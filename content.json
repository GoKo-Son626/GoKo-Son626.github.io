{"posts":[{"title":"xv6-riscv_PLAN","text":"How do you learn in 12 hours? from chatgpt, but I do it. 🕐 第 1 阶段：xv6 是怎么“活”起来的（0–2h）⬛ 第0章：xv6 overview （PDF开头）学习目标：大致知道 xv6 有哪些模块，调用图 方法：通读目录，理解它的子系统划分、进程图 ⬛ 第1章：启动与用户态文件：kernel/entry.S, kernel/start.c, kernel/main.c路径：QEMU → bootloader → 内核 → main → userinit() 重点理解： entry.S 作用（设置 satp、sp、mret） kvminit / kvmmap / kvminithart 如何设置页表 userinit() 如何设置第一个进程（initproc） ✅ 建议操作： 给 start.c 和 main.c 打日志，观察 kvminit、procinit 调用顺序。 🕒 第 2 阶段：进程管理和系统调用（2–5h）⬛ 第2章：进程管理（重点）文件：kernel/proc.c, kernel/proc.h 关键点： allocproc, fork, scheduler, yield, exit, wait 进程状态 enum procstate 的流转图（NEW → RUNNABLE → RUNNING → ZOMBIE） ✅ 建议操作： 用 ps 类似命令验证状态 手动修改 user/test.c 增加 fork 和 wait ⬛ 第3章：系统调用机制文件：kernel/syscall.c, kernel/trap.c, user/usys.S 流程：用户态 → ecall → trap → syscall() → sys_*() ✅ 建议操作： 打日志看 syscall number 传入路径 追踪 sys_write 是如何调用到 filewrite 🕓 第 3 阶段：内存管理（5–7h）⬛ 第4章：内存子系统文件：kernel/vm.c, kernel/kalloc.c, kernel/defs.h 重点函数： allocuvm, deallocuvm, uvmcopy walk, mappages，页表结构 Sv39 ✅ 学习方法： 画图：Sv39 三级页表的 index 是怎么划分的 使用 make qemu-gdb 中断在 uvmcopy 看页表 🕔 第 4 阶段：I/O + 文件系统（7–9h）⬛ 第5章：文件系统文件：fs.c, file.c, bio.c, log.c 关键理解： inode、目录项、open/file 结构体 file-&gt;ip-&gt;dev-&gt;read() 等层级调用 ✅ 操作建议： 手动创建小文件，查看 inode 分配 给 fs.c 中的 readi / writei 加日志 ⬛ 第6章：设备驱动文件：uart.c, console.c, virtio_disk.c 理解： UART 输出和中断机制 virtio 如何模拟硬盘读写 ✅ 小测试： 改写 consoleintr() 中的字符判断，屏蔽输入 'a' 试试 🕖 第 5 阶段：调试 + 回顾（9–12h） 使用 make qemu-gdb，用 gdb 打断点看启动流程、trap 过程 使用 grep + cscope 学会快速定位函数定义 整理 syscall 流程、trap 流程图 复现 lab 中的练习题（如添加系统调用）","link":"/post/xv6-riscv-PLAN.html"},{"title":"xv6-riscv-ch1","text":"How does xv6 come to life? ch1: Operating system interfaces As Figure 1.1 shows, xv6 takes the traditional form of a kernel, a special program that providesservices to running programs. Each running program, called a process, has memory containinginstructions, data, and a stack. The instructions implement the program’s computation. The dataare the variables on which the computation acts. The stack organizes the program’s procedure calls.A given computer typically has many processes but only a single kernel. When a user program invokes a sys-tem call, the hardware raises the privilege level and starts executing a pre-arranged function in thekernel.The collection of system calls that a kernel provides is the interface that user programs see. Thexv6 kernel provides a subset of the services and system calls that Unix kernels traditionally offer.Figure 1.2 lists all of xv6’s system calls. The shell is an ordinary program that reads commands from the user and executes them. Thefact that the shell is a user program, and not part of the kernel, illustrates the power of the systemcall interface: there is nothing special about the shell. It also means that the shell is easy to replace;as a result, modern Unix systems have a variety of shells to choose from, each with its own userinterface and scripting features. The xv6 shell is a simple implementation of the essence of theUnix Bourne shell. Its implementation can be found at (user/sh.c:1).The xv6 shell uses the exec calls of blew to run programs on behalf of users. The main structure ofthe shell is simple; see main (user/sh.c:146). The main loop reads a line of input from the user withgetcmd. Then it calls fork, which creates a copy of the shell process. The parent calls wait,while the child runs the command. For example, if the user had typed “echo hello” to the shell,runcmd would have been called with “echo hello” as the argument. runcmd (user/sh.c:55) runsthe actual command. For “echo hello”, it would call exec (user/sh.c:79). If exec succeeds thenthe child will execute instructions from echo instead of runcmd. At some point echo will callexit, which will cause the parent to return from wait in main (user/sh.c:146). 1.1 Processes and memory An xv6 process consists of user-space memory (instructions, data, and stack) and per-process stateprivate to the kernel. Xv6 time-shares processes: it transparently switches the available CPUsamong the set of processes waiting to execute. When a process is not executing, xv6 saves theprocess’s CPU registers, restoring them when it next runs the process. The kernel associates aprocess identifier, or PID, with each process. the following program fragment written in the C programming lan-guage 1234567891011int pid = fork();if(pid &gt; 0){printf(&quot;parent: child=%d\\n&quot;, pid);pid = wait((int *) 0);printf(&quot;child %d is done\\n&quot;, pid);} else if(pid == 0){printf(&quot;child: exiting\\n&quot;);exit(0);} else {printf(&quot;fork error\\n&quot;);} In the example, the output linesparent: child=1234child: exitingmight come out in either order (or even intermixed), depending on whether the parent or child getsto its printf call first. After the child exits, the parent’s wait returns, causing the parent to printparent: child 1234 is doneAlthough the child has the same memory contents as the parent initially, the parent and child areexecuting with separate memory and separate registers: changing a variable in one does not affectthe other. For example, when the return value of wait is stored into pid in the parent process, itdoesn’t change the variable pid in the child. The value of pid in the child will still be zero. The exec system call replaces the calling process’s memory with a new memory image loadedfrom a file stored in the file system. The file must have a particular format, which specifies whichpart of the file holds instructions, which part is data, at which instruction to start, etc. Xv6 uses theELF format, which Chapter 3 discusses in more detail. Usually the file is the result of compilinga program’s source code. When exec succeeds, it does not return to the calling program; instead,the instructions loaded from the file start executing at the entry point declared in the ELF header.exec takes two arguments: the name of the file containing the executable and an array of stringarguments. For example 123456char *argv[3];argv[0] = &quot;echo&quot;;argv[1] = &quot;hello&quot;;argv[2] = 0;exec(&quot;/bin/echo&quot;, argv);printf(&quot;exec error\\n&quot;); This fragment replaces the calling program with an instance of the program /bin/echo runningwith the argument list echo hello. Most programs ignore the first element of the argument array,which is conventionally the name of the program. why fork and exec are not combined in a single callwe will see later thatthe shell exploits the separation in its implementation of I/O redirection.Xv6 allocates most user-space memory implicitly: fork allocates the memory required for thechild’s copy of the parent’s memory, and exec allocates enough memory to hold the executablefile. A process that needs more memory at run-time (perhaps for malloc) can call sbrk(n) togrow its data memory by n zero bytes; sbrk returns the location of the new memory. 1.2 I/O and File descriptors A file descriptor is a small integer representing a kernel-managed object that a process may readfrom or write to. A process may obtain a file descriptor by opening a file, directory, or device,or by creating a pipe, or by duplicating an existing descriptor. For simplicity we’ll often referto the object a file descriptor refers to as a “file”; the file descriptor interface abstracts away thedifferences between files, pipes, and devices, making them all look like streams of bytes. We’llrefer to input and output as I/O. Internally, the xv6 kernel uses the file descriptor as an index into a per-process table, so thatevery process has a private space of file descriptors starting at zero. By convention, a process readsfrom file descriptor 0 (standard input), writes output to file descriptor 1 (standard output), andwrites error messages to file descriptor 2 (standard error). As we will see, the shell exploits theconvention to implement I/O redirection and pipelines. The shell ensures that it always has threefile descriptors open (user/sh.c:152), which are by default file descriptors for the console. The following program fragment (which forms the essence of the program cat) copies datafrom its standard input to its standard output. If an error occurs, it writes a message to the standarderror. 123456789101112131415char buf[512];int n;for(;;){n = read(0, buf, sizeof buf);if(n == 0)break;if(n &lt; 0){fprintf(2, &quot;read error\\n&quot;);exit(1);}if(write(1, buf, n) != n){fprintf(2, &quot;write error\\n&quot;);exit(1);}} The important thing to note in the code fragment is that cat doesn’t know whether it is readingfrom a file, console, or a pipe. Similarly cat doesn’t know whether it is printing to a console, afile, or whatever. The use of file descriptors and the convention that file descriptor 0 is input andfile descriptor 1 is output allows a simple implementation of cat. The close system call releases a file descriptor, making it free for reuse by a future open,pipe, or dup system call (see below). A newly allocated file descriptor is always the lowest-numbered unused descriptor of the current process. File descriptors and fork interact to make I/O redirection easy to implement. 12345678char *argv[2];argv[0] = &quot;cat&quot;;argv[1] = 0;if(fork() == 0) {close(0);open(&quot;input.txt&quot;, O_RDONLY);exec(&quot;cat&quot;, argv);} After the child closes file descriptor 0, open is guaranteed to use that file descriptor for the newlyopened input.txt: 0 will be the smallest available file descriptor. cat then executes with filedescriptor 0 (standard input) referring to input.txt. The parent process’s file descriptors are notchanged by this sequence Two file descriptors share an offset if they were derived from the same original file descriptorby a sequence of fork and dup calls. Otherwise file descriptors do not share offsets, even if theyresulted from open calls for the same file. dup allows shells to implement commands like this: ls existing-file non-existing-file &gt; tmp1 2&gt;&amp;1. The 2&gt;&amp;1 tells the shell to give the command a file descriptor 2 that is a duplicate of descriptor 1. Both the name of the existing file and the error message for the non-existing file will show up in the file tmp1. The xv6 shell doesn’t support I/O redirection for the error file descriptor, but now you know how to implement it. 1.3 Pipes A pipe is a small kernel buffer exposed to processes as a pair of file descriptors, one for readingand one for writing. Writing data to one end of the pipe makes that data available for reading fromthe other end of the pipe. Pipes provide a way for processes to communicate. The following example code runs the program wc with standard input connected to the readend of a pipe. 12345678910111213141516int p[2];char *argv[2];argv[0] = &quot;wc&quot;;argv[1] = 0;pipe(p);if(fork() == 0) {close(0);dup(p[0]);close(p[0]);close(p[1]);exec(&quot;/bin/wc&quot;, argv);} else {close(p[0]);write(p[1], &quot;hello world\\n&quot;, 12);close(p[1]);} 12345678910 pipe [p[1]] -------&gt; [p[0]] (write) (read)parent: write(p[1], ...)child: dup(p[0]) -&gt; fd 0 exec(&quot;wc&quot;) -&gt; wc reads from stdin (=read of pipe) The fact that read blocks until it is impossible for new data to arriveis one reason that it’s important for the child to close the write end of the pipe before executingwc above: if one of wc ’s file descriptors referred to the write end of the pipe and not close, wc would never seeend-of-file. The xv6 shell implements pipelines such as grep fork sh.c | wc -l in a manner similarto the above code (user/sh.c:101). The child process creates a pipe to connect the left end of thepipeline with the right end. Then it calls fork and runcmd for the left end of the pipeline andfork and runcmd for the right end, and waits for both to finish. The right end of the pipelinemay be a command that itself includes a pipe (e.g., a | b | c), which itself forks two new childprocesses (one for b and one for c). Thus, the shell may create a tree of processes. The leaves16of this tree are commands and the interior nodes are processes that wait until the left and rightchildren complete. 12345 sh / \\a sh / \\ b c echo hello world &gt;/tmp/xyz; wc &lt;/tmp/xyzPipes have at least three advantages over temporary files in this situation. First, pipes automatically clean themselves up; with the file redirection, a shell would have to be careful to remove /tmp/xyz when done. Second, pipes can pass arbitrarily long streams of data, while file redirection requires enough free space on disk to store all the data. Third, pipes allow for parallel execution of pipeline stages, while the file approach requires the first program to finish before the second starts. 1.4 File system The xv6 file system provides data files, which contain uninterpreted byte arrays, and directories,which contain named references to data files and other directories. There are system calls to create new files and directories: mkdir creates a new directory, openwith the O_CREATE flag creates a new data file, and mknod creates a new device file. This exampleillustrates all three: 1234mkdir(&quot;/dir&quot;);fd = open(&quot;/dir/file&quot;, O_CREATE|O_WRONLY);close(fd);mknod(&quot;/console&quot;, 1, 1); mknod creates a special file that refers to a device. Associated with a device file are the major andminor device numbers (the two arguments to mknod), which uniquely identify a kernel device.When a process later opens a device file, the kernel diverts read and write system calls to thekernel device implementation instead of passing them to the file system. A file’s name is distinct from the file itself; the same underlying file, called an inode, can havemultiple names, called links. Each link consists of an entry in a directory; the entry contains a filename and a reference to an inode. An inode holds metadata about a file, including its type (file ordirectory or device), its length, the location of the file’s content on disk, and the number of links toa file. The fstat system call retrieves information from the inode that a file descriptor refers to. Itfills in a struct stat, defined in stat.h (kernel/stat.h) as: 1234567891011#define T_DIR 1// Directory#define T_FILE 2// File#define T_DEVICE 3// Devicestruct stat { int dev; // File system’s disk device uint ino; // Inode number short type; // Type of file short nlink; // Number of links to file uint64 size; // Size of file in bytes}; The link system call creates another file system name referring to the same inode as an exist-ing file. This fragment creates a new file named both a and b. 12open(&quot;a&quot;, O_CREATE|O_WRONLY);link(&quot;a&quot;, &quot;b&quot;); Reading from or writing to a is the same as reading from or writing to b. Each inode is identifiedby a unique inode number. After the code sequence above, it is possible to determine that a and brefer to the same underlying contents by inspecting the result of fstat: both will return the sameinode number (ino), and the nlink count will be set to 2.The unlink system call removes a name from the file The unlink system call removes a name from the file system. The file’s inode and the diskspace holding its content are only freed when the file’s link count is zero and no file descriptorsrefer to it. Thus adding 1unlink(&quot;a&quot;); to the last code sequence leaves the inode and file content accessible as b. Furthermore, 12fd = open(&quot;/tmp/xyz&quot;, O_CREATE|O_RDWR);unlink(&quot;/tmp/xyz&quot;); is an idiomatic way to create a temporary inode with no name that will be cleaned up when theprocess closes fd or exits. Unix provides file utilities callable from the shell as user-level programs, for example mkdir,ln, and rm. This design allows anyone to extend the command-line interface by adding new user-level programs. In hindsight this plan seems obvious, but other systems designed at the time ofUnix often built such commands into the shell (and built the shell into the kernel).One exception is cd, which is built into the shell (user/sh.c:161). cd must change the currentworking directory of the shell itself. If cd were run as a regular command, then the shell would18fork a child process, the child process would run cd, and cd would change the child ’s workingdirectory. The parent’s (i.e., the shell’s) working directory would not change. 1.5 Real world the shell was the first so-called “scripting language.” The Unix system call interface persists today insystems like BSD, Linux, and macOS. The Unix system call interface has been standardized through the Portable Operating SystemInterface (POSIX) standard. Xv6 is not POSIX compliant: it is missing many system calls (in-cluding basic ones such as lseek), and many of the system calls it does provide differ from thestandard. Our main goals for xv6 are simplicity and clarity while providing a simple UNIX-likesystem-call interface. Several people have extended xv6 with a few more system calls and a sim-ple C library in order to run basic Unix programs. Modern kernels, however, provide many moresystem calls, and many more kinds of kernel services, than xv6. For example, they support net-working, windowing systems, user-level threads, drivers for many devices, and so on. Modernkernels evolve continuously and rapidly, and offer many features beyond POSIX. Xv6 does not provide a notion of users or of protecting one user from another; in Unix terms,all xv6 processes run as root. comments： Linux tries to adhere to POSIX (glibc provides most of the POSIX interfaces), but has its own extensions (e.g., epoll). Programmers who write POSIX interfaces can compile and run them on macOS, BSD, and Linux (as long as they don’t use platform-specific extensions). Think of the xv6 system call interface as a “subset implementation of POSIX.” POSIX文档","link":"/post/xv6-riscv-ch1.html"},{"title":"hexo博客搭建","text":"1. 安装并初始化Hexo 安装 Hexo CLI 1npm install -g hexo-cli 初始化博客项目目录 123mkdir my-blog &amp;&amp; cd my-bloghexo initnpm install 本地预览 1hexo server 启动本地服务：在浏览器访问 http://localhost:4000 查看效果 2. 配置 GitHub Pages 部署 创建GitHub仓库 创建一个仓库，名字叫 你的GitHub用户名.github.io 比如你是 goko，就叫 goko.github.io 安装部署插件 1npm install hexo-deployer-git --save 修改 _config.yml（根目录下）添加部署配置： 12345deploy: type: git # repo建议使用SSH, SSH免密 repo: https://github.com/你的GitHub用户名/你的GitHub用户名.github.io.git branch: main # 或者 master，看你的默认分支 生成并部署博客 123hexo cleanhexo generatehexo deploy 3. 域名(.com)绑定 添加域名(在my-blog下) 123echo &quot;&lt;xxxx&gt;.com&quot; &gt; source/CNAME# 或者可以：echo &quot;www.&lt;xxxx&gt;.com&quot; &gt; source/CNAME# 只能添加一个，而且两个需要添加不同的域名解析（如下） 重新部署 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 设置 DNS 解析指向 GitHub Pages A. 使用裸域名（apex 域名）goku72.com 记录类型 主机记录 记录值 说明 A @ 185.199.108.153 GitHub Pages IP A @ 185.199.109.153 GitHub Pages IP A @ 185.199.110.153 GitHub Pages IP A @ 185.199.111.153 GitHub Pages IP example aliyun: 选择业务需求: 将网站域名解析到服务器IPv4地址 选择网站域名(主机记录): .com（对应设置“@”主机记录） 填写 IP（记录值）： 在输入框里粘贴以下四行（每一行一个 IP）： &gt; 185.199.109.153 &gt; 185.199.108.153 &gt; 185.199.110.153 &gt; 185.199.111.153 B. 使用 www.goku72.com 作为主域名 记录类型 主机记录 记录值 说明 CNAME www &lt;github用户名&gt;.github.io. 指向你的 GitHub 用户页仓库 example aliyun: 选择业务需求: 将网站域名解析到另外的目标域名 选择网站域名(主机记录): www..com（对应设置“www”主机记录） 填写 IP（记录值）：&lt;github用户名&gt;.github.io. (最有有一个符号”.”) 4. 设置主题 cd my-blog/themes git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git butterfly 修改_config.yml: theme: butterfly hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 更多主题：https://hexo.io/themes/ 注： 如果AB两个方式都添加了，只需要在 Hexo 项目的 source/CNAME 文件中写 www..com，GitHub Pages 就会自动把 goku72.com 重定向过去，无需额外设置！ 后续换域名只需要：阿里云重新解析 + 修改 source/CNAME + 重新部署 Hexo，就能完成域名迁移。 有些主题可能需要下载插件","link":"/post/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html"},{"title":"xv6-riscv_struct","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475.├── kernel│ ├── bio.c│ ├── buf.h│ ├── console.c│ ├── defs.h│ ├── elf.h│ ├── entry.S│ ├── exec.c│ ├── fcntl.h│ ├── file.c│ ├── file.h│ ├── fs.c│ ├── fs.h│ ├── kalloc.c│ ├── kernel.ld│ ├── kernelvec.S│ ├── log.c│ ├── main.c│ ├── memlayout.h│ ├── param.h│ ├── pipe.c│ ├── plic.c│ ├── printf.c│ ├── proc.c│ ├── proc.h│ ├── riscv.h│ ├── sleeplock.c│ ├── sleeplock.h│ ├── spinlock.c│ ├── spinlock.h│ ├── start.c│ ├── stat.h│ ├── string.c│ ├── swtch.S│ ├── syscall.c│ ├── syscall.h│ ├── sysfile.c│ ├── sysproc.c│ ├── trampoline.S│ ├── trap.c│ ├── types.h│ ├── uart.c│ ├── virtio_disk.c│ ├── virtio.h│ └── vm.c├── LICENSE├── Makefile├── mkfs│ └── mkfs.c├── README└── user ├── cat.c ├── echo.c ├── forktest.c ├── grep.c ├── grind.c ├── init.c ├── initcode.S ├── kill.c ├── ln.c ├── ls.c ├── mkdir.c ├── printf.c ├── rm.c ├── sh.c ├── stressfs.c ├── ulib.c ├── umalloc.c ├── user.h ├── user.ld ├── usertests.c ├── usys.pl ├── wc.c └── zombie.c 逐文件详细解读它们的作用、重要性： 🧠 整体结构 目录/文件 作用 建议重点关注 kernel/ xv6 核心实现，内核源码 ✅ 必看 user/ 用户态程序、测试程序、库 ✅ 推荐 mkfs/ 构建文件系统镜像工具 ❗可选 顶层构建文件 Makefile, README, LICENSE 等 🧩 熟悉结构用 📁 kernel/ — xv6 的心脏（重点模块）xv6 主要模块可分为： 内核启动与内存管理：entry.S、start.c、vm.c、kalloc.c 中断、异常、系统调用：trap.c、syscall.c、kernelvec.S、trampoline.S 进程调度与管理：proc.c、swtch.S 文件系统与文件接口：fs.c、file.c、bio.c、log.c 设备驱动：uart.c、console.c、virtio_disk.c、plic.c 内核工具代码：spinlock.c、sleeplock.c、printf.c、string.c 🧾 文件级详细解释（按子系统分类） 🟩 一、内核启动与内存管理 文件 作用 说明 entry.S 核心启动汇编入口 设置页表、跳转到 start() start.c C 语言入口 main() 前做环境初始化（页表、trapframe） main.c 内核主函数 启动内核模块，如 userinit() kernel.ld 内核链接脚本 指定内核段地址、符号导出顺序 vm.c 虚拟内存系统 页表分配、拷贝、映射（基于 Sv39） kalloc.c 物理页分配器 管理空闲页链表，用于 allocuvm memlayout.h 内存布局宏 定义 KERNBASE、PHYSTOP 等常量 📌 建议从 entry.S → start.c → main.c → userinit() 跑一遍流程。 🟦 二、进程管理与调度 文件 作用 说明 proc.c 管理进程表、fork/wait scheduler() 是调度器核心 proc.h 进程结构体定义 结构体 struct proc 包含页表、状态、trapframe swtch.S 上下文切换汇编 保存/恢复寄存器，调度必用 trap.c trap/中断入口 用户 → 内核的总入口；异常调度、syscall 都走它 sysproc.c 与进程相关的系统调用 sys_exit、sys_fork、sys_wait 📌 强烈建议：给 fork()、scheduler()、yield() 加打印观察运行。 🟨 三、系统调用机制 文件 作用 说明 syscall.c syscall 分发器 根据 syscall num 分发到 sys_* syscall.h syscall 编号 用 #define SYS_write 1 等映射 sysfile.c 文件相关 syscall open/close/read/write 的内核实现 usys.pl → usys.S 用户态 syscall 包装 生成用户代码 mov a7, id; ecall 📌 syscall 流程 = 用户态 ecall → trap → syscall.c → sys_*() 🟧 四、文件系统与 I/O 接口 文件 作用 说明 fs.c inode 层 ialloc, readi, writei，文件核心结构 fs.h inode 定义 struct inode，块地址信息等 file.c 文件描述符层 struct file，管理 open/close 等 file.h 文件描述符定义 支持 pipe/dev/inode 等类型 bio.c 缓存块读写 实现 block 级读写缓存 log.c 日志机制 crash-safe 写操作事务（write-ahead logging） pipe.c 管道实现 内存中双向 FIFO fcntl.h, stat.h POSIX 相关头文件 用于 open flag、stat 结构体 📌 建议调试 fs.c 的 namei()、dirlookup()，看路径如何被解析。 🟥 五、设备驱动与中断控制 文件 作用 说明 uart.c 串口驱动 初始化串口，写入字符给终端 console.c 控制台 I/O 与 UART 配合实现 shell 输入输出 plic.c 中断控制器 Platform-Level Interrupt Controller virtio_disk.c 虚拟磁盘驱动 QEMU 虚拟磁盘硬件访问层 virtio.h virtio 设备定义 配套数据结构 📌 virtio_disk.c 调试方法：观察 virtio_rw() 实现的读写逻辑。 🟫 六、工具类 / 内核库函数 文件 作用 说明 defs.h 内核函数声明 extern 所有模块函数，供全局使用 riscv.h RISC-V CSR 宏、寄存器定义 包含 rdtime, csrr, sstatus 等 spinlock.c/.h 自旋锁实现 核心互斥机制，需关中断 sleeplock.c/.h 睡眠锁实现 用于文件系统，sleep/wakeup 管理 string.c libc 实现 memcpy, strlen 等内核自带函数 printf.c 内核级 printf 用于调试打印，无缓冲版 param.h 系统参数宏 定义 NPROC, MAXPATH 等全局参数 types.h 常用类型定义 uchar, uint, sint 等简写 📌 常用 grep 命令：grep -rn &quot;spin_lock&quot; kernel/ 追踪并发点 📁 user/ — 用户态程序与测试 文件 作用 说明 *.c 命令程序 shell 命令如 ls, cat, echo, sh 等 init.c 首个用户进程 userinit() 启动的程序，运行 /init initcode.S 最原始的用户态代码 由 userinit() 载入的程序（汇编） ulib.c libc 函数 用户态的 malloc, printf 等 umalloc.c malloc 实现 用户态堆分配 usertests.c 用户态测试集 测试 syscall、进程、文件功能 user.ld 用户态链接脚本 控制用户程序的段分布 user.h 函数声明 供用户程序引用 printf, fork 等接口 📌 强烈推荐你从 init.c 开始 debug，第一个用户进程的运行关键路径！ 📁 mkfs/ — 构建文件系统镜像工具 文件 说明 mkfs.c 构建 xv6 文件系统镜像（user/init 等文件压入） 📌 不看也无妨，用于 make 阶段构建 fs.img 📄 顶层文件 文件 说明 Makefile 编译入口，构建 kernel, fs.img, qemu 等 README 简要说明文档，讲解如何使用 LICENSE 授权条款（MIT） ✅ 总结 用 模块化思维 分阶段学，比如 “先把 trap 理清楚”，再看 syscall。 推荐搭配如下工具： tmux zsh grep…","link":"/post/xv6-riscv-struct.html"},{"title":"xv6-riscv-ch2","text":"ch2: Operating system organization2.1 Abstracting physical resources2.2 User mode, supervisor mode, and system calls2.3 Kernel organization2.4 Code: xv6 organization2.5 Process overview2.6 Code: starting xv6, the first process and system call2.7 Security Model2.8 Real world2.9 Exercises","link":"/post/xv6-riscv-ch2.html"}],"tags":[{"name":"xv6-riscv","slug":"xv6-riscv","link":"/tags/xv6-riscv/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"}],"categories":[],"pages":[{"title":"","text":"Troy’s Blog &gt;&gt;&gt; 欢迎交换友链~ 请通过邮件联系我。","link":"/friend/index.html"}]}