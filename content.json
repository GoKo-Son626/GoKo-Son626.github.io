{"posts":[{"title":"hexo博客搭建","text":"使用hexo和GitHub Pagtes部署一个自己的博客 1. 安装并初始化Hexo 安装 Hexo CLI 1npm install -g hexo-cli 初始化博客项目目录 123mkdir my-blog &amp;&amp; cd my-bloghexo initnpm install 本地预览 1hexo server 启动本地服务：在浏览器访问 http://localhost:4000 查看效果 2. 配置 GitHub Pages 部署 创建GitHub仓库 创建一个仓库，名字叫 你的GitHub用户名.github.io 比如你是 goko，就叫 goko.github.io 安装部署插件 1npm install hexo-deployer-git --save 修改 _config.yml（根目录下）添加部署配置： 12345deploy: type: git # repo建议使用SSH, SSH免密 repo: https://github.com/你的GitHub用户名/你的GitHub用户名.github.io.git branch: main # 或者 master，看你的默认分支 生成并部署博客 123hexo cleanhexo generatehexo deploy 3. 域名(.com)绑定 添加域名(在my-blog下) 123echo &quot;&lt;xxxx&gt;.com&quot; &gt; source/CNAME# 或者可以：echo &quot;www.&lt;xxxx&gt;.com&quot; &gt; source/CNAME# 只能添加一个，而且两个需要添加不同的域名解析（如下） 重新部署 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 设置 DNS 解析指向 GitHub Pages A. 使用裸域名（apex 域名）goku72.com 记录类型 主机记录 记录值 说明 A @ 185.199.108.153 GitHub Pages IP A @ 185.199.109.153 GitHub Pages IP A @ 185.199.110.153 GitHub Pages IP A @ 185.199.111.153 GitHub Pages IP example aliyun: 选择业务需求: 将网站域名解析到服务器IPv4地址 选择网站域名(主机记录): .com（对应设置“@”主机记录） 填写 IP（记录值）： 在输入框里粘贴以下四行（每一行一个 IP）： &gt; 185.199.109.153 &gt; 185.199.108.153 &gt; 185.199.110.153 &gt; 185.199.111.153 B. 使用 www.goku72.com 作为主域名 记录类型 主机记录 记录值 说明 CNAME www &lt;github用户名&gt;.github.io. 指向你的 GitHub 用户页仓库 example aliyun: 选择业务需求: 将网站域名解析到另外的目标域名 选择网站域名(主机记录): www..com（对应设置“www”主机记录） 填写 IP（记录值）：&lt;github用户名&gt;.github.io. (最有有一个符号”.”) 4. 设置主题 cd my-blog/themes git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git butterfly 修改_config.yml: theme: butterfly hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 更多主题：https://hexo.io/themes/ 注： 如果AB两个方式都添加了，只需要在 Hexo 项目的 source/CNAME 文件中写 www..com，GitHub Pages 就会自动把 goku72.com 重定向过去，无需额外设置！ 后续换域名只需要：阿里云重新解析 + 修改 source/CNAME + 重新部署 Hexo，就能完成域名迁移。 有些主题可能需要下载插件","link":"/post/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html"},{"title":"qspinlock","text":"qspinlock is a hybrid spinlock combining the fairness of ticket locks with the scalability of MCS locks: it uses only 4 bytes under low contention, falls back to an MCS queue under heavy load, and optimizes the second contender with a pending bit. It improves fairness and scalability but should not be enabled on RISC-V platforms lacking Ziccrse or Zabha. 1. 传统spinlock： 多个等待的 CPU 核心中，谁先获得锁并无保证，存在公平性问题，同时缓存一致性开销大（如MESI），CPU核心越大，cache需求越厉害，缺乏可扩展性 2. Ticket spinlock1234567891011121314151617#define TICKET_NEXT 16typedef struct { union { u32 lock; struct __raw_tickets { /* little endian */ u16 owner; u16 next; } tickets; };} arch_spinlock_t;my_ticket = atomic_fetch_inc(&amp;lock-&gt;tickets.next); while (lock-&gt;tickets.owner != my_ticket) cpu_relax(); 解决了公平问题，防止某些 CPU 永远得不到锁，但所有核都轮询同一个owner变量，read cache line成热点，限制扩展性 3. MCS lock 本质上是一种基于链表结构的自旋锁，每个CPU有一个对应的节点(锁的副本)，基于各自不同的副本变量进行等待，锁本身是共享的，但队列节点是线程自己维护的，每个CPU只需要查询自己对应的本地cache line，仅在这个变量发生变化的时候，才需要读取内存和刷新这条cache line, 不像 classic/ticket对共享变量进行spin 123456789101112131415161718192021222324struct mcs_spinlock { struct mcs_spinlock *next; int locked; /* 1 if lock acquired */ int count; /* nesting count, see qspinlock.c */};static inlinevoid mcs_spin_lock(struct mcs_spinlock **lock, struct mcs_spinlock *node){ struct mcs_spinlock *prev; /* Init node */ node-&gt;locked = 0; node-&gt;next = NULL; prev = xchg(lock, node); if (likely(prev == NULL)) { return; } WRITE_ONCE(prev-&gt;next, node); /* Wait until the lock holder passes the lock down. */ arch_mcs_spin_lock_contended(&amp;node-&gt;locked);} 每个 CPU 线程创建的node 是独立的，每个线程都有自己的 node 实例。但是结构体中多了一个指针使结构体变大了，导致了“内存开销问题”：MCS 锁把竞争带来的 cache-line 抖动降低了，但牺牲了一些内存和部分结构管理的成本。 4. qspinlockinclude/asm-generic/qspinlock_types.h: 锁数据结构 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758typedef struct qspinlock { union { atomic_t val; /* * By using the whole 2nd least significant byte for the * pending bit, we can allow better optimization of the lock * acquisition for the pending bit holder. */#ifdef __LITTLE_ENDIAN struct { u8 locked; u8 pending; }; struct { u16 locked_pending; u16 tail; };#else struct { u16 tail; u16 locked_pending; }; struct { u8 reserved[2]; u8 pending; u8 locked; };#endif };} arch_spinlock_t;/* * Initializier */#define __ARCH_SPIN_LOCK_UNLOCKED { { .val = ATOMIC_INIT(0) } }/* * Bitfields in the atomic value: * * When NR_CPUS &lt; 16K * 0- 7: locked byte * 8: pending * 9-15: not used * 16-17: tail index * 18-31: tail cpu (+1) * * When NR_CPUS &gt; = 16K * 0- 7: locked byte * 8: pending * 9-10: tail index * 11-31: tail cpu (+1) */#define _Q_SET_MASK(type) (((1U &lt;&lt; _Q_ ## type ## _BITS) - 1)\\ &lt;&lt; _Q_ ## type ## _OFFSET)#define _Q_LOCKED_OFFSET 0#define _Q_LOCKED_BITS 8#define _Q_LOCKED_MASK _Q_SET_MASK(LOCKED) When NR_CPUS &lt; 16K： locked：用来表示这个锁是否被人持有（0：无，1：有） pending：可以理解为最优先持锁位，即当unlock之后只有这个位的CPU最先持锁，也有1和0 tail：有idx+CPU构成，用来标识等待队列的最后一个节点。 tail_idx：就是index，它作为mcs_nodes数组的下标使用 tail_CPU：用来表示CPU的编号+1，+1因为规定tail为0的时候表示等待队列中没有成员 kernel/locking/mcs_spinlock.h 12345struct mcs_spinlock { struct mcs_spinlock *next; int locked; /* 1 if lock acquired */ int count; /* nesting count, see qspinlock.c */}; locked = 1:只是说锁传到了当前加节点，但是当前节点还需要主动申请锁(qspinlock -&gt; locked = 1)count：针对四种上下文用于追踪当前用了第几个 node（即 idx），最大为4,不够用时就fallback不排队直接自旋 kernel/locking/qspinlock.c: 123456789101112131415161718#define MAX_NODES 4struct qnode { struct mcs_spinlock mcs;#ifdef CONFIG_PARAVIRT_SPINLOCKS long reserved[2];#endif};/* * Per-CPU queue node structures; we can never have more than 4 nested * contexts: task, softirq, hardirq, nmi. * * Exactly fits one 64-byte cacheline on a 64-bit architecture. * * PV doubles the storage and uses the second cacheline for PV state. */static DEFINE_PER_CPU_ALIGNED(struct qnode, qnodes[MAX_NODES]); 一个 CPU 上可能嵌套多个锁, qnodes针对四种上下文情况下，例：进程上下文中发生中断后再次获取锁 PER_CPU的优点是快，可防止抢锁时再mallock或临时分配导致延迟，成本等问题 申请锁： 快速申请include/asm-generic/qspinlock.h 12345678910111213/** * queued_spin_lock - acquire a queued spinlock * @lock: Pointer to queued spinlock structure */static __always_inline void queued_spin_lock(struct qspinlock *lock){ int val = 0; if (likely(atomic_try_cmpxchg_acquire(&amp;lock-&gt;val, &amp;val, _Q_LOCKED_VAL))) return; queued_spin_lock_slowpath(lock, val);} 中速申请 快速申请失败，queue中为空时，设置锁的pending位 再次检测（检查中间是否有其它cpu进入） 一直循环检测locked位 当locked位为0时，清除pending位获得锁 慢速申请 申请 操作 快速申请 这个锁当前没有人持有，直接通过cmpxchg()设置locked域即可获取了锁 中速申请 锁已经被人持有，但是MCS链表没有其他人，有且仅有一个人在等待这个锁。设置pending域，表示是第一顺位继承者，自旋等待lock-&gt; locked清0，即锁持有者释放锁 慢速申请 进入到queue中自旋等待，若为队列头（队列中没有等待的cpu），说明它已排到最前，可以开始尝试获取锁；否则，它会自旋等待前一个节点释放锁，并通知它可以尝试获取锁了 end: 如果只有1个或2个CPU试图获取锁，那么只需要一个4字节的qspinlock就可以了，其所占内存的大小和ticket spinlock一样。当有3个以上的CPU试图获取锁，则需要(N-2)个MCS node qspinlock中加入”pending”位域的意义，如果是两个CPU试图获取锁，那么第二个CPU只需要简单地设置”pending”为1，而不用创建一个MCS node 试图加锁的CPU数目超过3个，使用ticket spinlock机制就会造成多个CPU的cache line刷新的问题，而qspinlock可以利用MCS node队列来解决这个问题 在多核争用严重场景下，qspinlock 让等待者在本地内存区域自旋，减少了锁的缓存抖动和对总线的竞争消耗 RISCV_QUEUED_SPINLOCKS 只应在平台具有 Zabha 或 Ziccrse 时启用，不支持的情况不要选用 优先级反转问题，queue会保证了FIFO提高了公平性，但它无法感知任务的优先级，可能因为排在队列前方的低优先级任务未释放锁而发生等待，从而导致 优先级反转","link":"/post/qspinlock.html"},{"title":"xv6-riscv-ch1","text":"This chapter-1 introduces the basic Unix process, file, and I/O abstractions that applications use to interact with the OS. ch1: Operating system interfaces As Figure 1.1 shows, xv6 takes the traditional form of a kernel, a special program that providesservices to running programs. Each running program, called a process, has memory containinginstructions, data, and a stack. The instructions implement the program’s computation. The dataare the variables on which the computation acts. The stack organizes the program’s procedure calls.A given computer typically has many processes but only a single kernel. When a user program invokes a sys-tem call, the hardware raises the privilege level and starts executing a pre-arranged function in thekernel.The collection of system calls that a kernel provides is the interface that user programs see. Thexv6 kernel provides a subset of the services and system calls that Unix kernels traditionally offer.Figure 1.2 lists all of xv6’s system calls. The shell is an ordinary program that reads commands from the user and executes them. Thefact that the shell is a user program, and not part of the kernel, illustrates the power of the systemcall interface: there is nothing special about the shell. It also means that the shell is easy to replace;as a result, modern Unix systems have a variety of shells to choose from, each with its own userinterface and scripting features. The xv6 shell is a simple implementation of the essence of theUnix Bourne shell. Its implementation can be found at (user/sh.c:1).The xv6 shell uses the exec calls of blew to run programs on behalf of users. The main structure ofthe shell is simple; see main (user/sh.c:146). The main loop reads a line of input from the user withgetcmd. Then it calls fork, which creates a copy of the shell process. The parent calls wait,while the child runs the command. For example, if the user had typed “echo hello” to the shell,runcmd would have been called with “echo hello” as the argument. runcmd (user/sh.c:55) runsthe actual command. For “echo hello”, it would call exec (user/sh.c:79). If exec succeeds thenthe child will execute instructions from echo instead of runcmd. At some point echo will callexit, which will cause the parent to return from wait in main (user/sh.c:146). 1.1 Processes and memory An xv6 process consists of user-space memory (instructions, data, and stack) and per-process stateprivate to the kernel. Xv6 time-shares processes: it transparently switches the available CPUsamong the set of processes waiting to execute. When a process is not executing, xv6 saves theprocess’s CPU registers, restoring them when it next runs the process. The kernel associates aprocess identifier, or PID, with each process. the following program fragment written in the C programming lan-guage 1234567891011int pid = fork();if(pid &gt; 0){printf(&quot;parent: child=%d\\n&quot;, pid);pid = wait((int *) 0);printf(&quot;child %d is done\\n&quot;, pid);} else if(pid == 0){printf(&quot;child: exiting\\n&quot;);exit(0);} else {printf(&quot;fork error\\n&quot;);} In the example, the output linesparent: child=1234child: exitingmight come out in either order (or even intermixed), depending on whether the parent or child getsto its printf call first. After the child exits, the parent’s wait returns, causing the parent to printparent: child 1234 is doneAlthough the child has the same memory contents as the parent initially, the parent and child areexecuting with separate memory and separate registers: changing a variable in one does not affectthe other. For example, when the return value of wait is stored into pid in the parent process, itdoesn’t change the variable pid in the child. The value of pid in the child will still be zero. The exec system call replaces the calling process’s memory with a new memory image loadedfrom a file stored in the file system. The file must have a particular format, which specifies whichpart of the file holds instructions, which part is data, at which instruction to start, etc. Xv6 uses theELF format, which Chapter 3 discusses in more detail. Usually the file is the result of compilinga program’s source code. When exec succeeds, it does not return to the calling program; instead,the instructions loaded from the file start executing at the entry point declared in the ELF header.exec takes two arguments: the name of the file containing the executable and an array of stringarguments. For example 123456char *argv[3];argv[0] = &quot;echo&quot;;argv[1] = &quot;hello&quot;;argv[2] = 0;exec(&quot;/bin/echo&quot;, argv);printf(&quot;exec error\\n&quot;); This fragment replaces the calling program with an instance of the program /bin/echo runningwith the argument list echo hello. Most programs ignore the first element of the argument array,which is conventionally the name of the program. why fork and exec are not combined in a single callwe will see later thatthe shell exploits the separation in its implementation of I/O redirection.Xv6 allocates most user-space memory implicitly: fork allocates the memory required for thechild’s copy of the parent’s memory, and exec allocates enough memory to hold the executablefile. A process that needs more memory at run-time (perhaps for malloc) can call sbrk(n) togrow its data memory by n zero bytes; sbrk returns the location of the new memory. 1.2 I/O and File descriptors A file descriptor is a small integer representing a kernel-managed object that a process may readfrom or write to. A process may obtain a file descriptor by opening a file, directory, or device,or by creating a pipe, or by duplicating an existing descriptor. For simplicity we’ll often referto the object a file descriptor refers to as a “file”; the file descriptor interface abstracts away thedifferences between files, pipes, and devices, making them all look like streams of bytes. We’llrefer to input and output as I/O. Internally, the xv6 kernel uses the file descriptor as an index into a per-process table, so thatevery process has a private space of file descriptors starting at zero. By convention, a process readsfrom file descriptor 0 (standard input), writes output to file descriptor 1 (standard output), andwrites error messages to file descriptor 2 (standard error). As we will see, the shell exploits theconvention to implement I/O redirection and pipelines. The shell ensures that it always has threefile descriptors open (user/sh.c:152), which are by default file descriptors for the console. The following program fragment (which forms the essence of the program cat) copies datafrom its standard input to its standard output. If an error occurs, it writes a message to the standarderror. 123456789101112131415char buf[512];int n;for(;;){n = read(0, buf, sizeof buf);if(n == 0)break;if(n &lt; 0){fprintf(2, &quot;read error\\n&quot;);exit(1);}if(write(1, buf, n) != n){fprintf(2, &quot;write error\\n&quot;);exit(1);}} The important thing to note in the code fragment is that cat doesn’t know whether it is readingfrom a file, console, or a pipe. Similarly cat doesn’t know whether it is printing to a console, afile, or whatever. The use of file descriptors and the convention that file descriptor 0 is input andfile descriptor 1 is output allows a simple implementation of cat. The close system call releases a file descriptor, making it free for reuse by a future open,pipe, or dup system call (see below). A newly allocated file descriptor is always the lowest-numbered unused descriptor of the current process. File descriptors and fork interact to make I/O redirection easy to implement. 12345678char *argv[2];argv[0] = &quot;cat&quot;;argv[1] = 0;if(fork() == 0) {close(0);open(&quot;input.txt&quot;, O_RDONLY);exec(&quot;cat&quot;, argv);} After the child closes file descriptor 0, open is guaranteed to use that file descriptor for the newlyopened input.txt: 0 will be the smallest available file descriptor. cat then executes with filedescriptor 0 (standard input) referring to input.txt. The parent process’s file descriptors are notchanged by this sequence Two file descriptors share an offset if they were derived from the same original file descriptorby a sequence of fork and dup calls. Otherwise file descriptors do not share offsets, even if theyresulted from open calls for the same file. dup allows shells to implement commands like this: ls existing-file non-existing-file &gt; tmp1 2&gt;&amp;1. The 2&gt;&amp;1 tells the shell to give the command a file descriptor 2 that is a duplicate of descriptor 1. Both the name of the existing file and the error message for the non-existing file will show up in the file tmp1. The xv6 shell doesn’t support I/O redirection for the error file descriptor, but now you know how to implement it. 1.3 Pipes A pipe is a small kernel buffer exposed to processes as a pair of file descriptors, one for readingand one for writing. Writing data to one end of the pipe makes that data available for reading fromthe other end of the pipe. Pipes provide a way for processes to communicate. The following example code runs the program wc with standard input connected to the readend of a pipe. 12345678910111213141516int p[2];char *argv[2];argv[0] = &quot;wc&quot;;argv[1] = 0;pipe(p);if(fork() == 0) {close(0);dup(p[0]);close(p[0]);close(p[1]);exec(&quot;/bin/wc&quot;, argv);} else {close(p[0]);write(p[1], &quot;hello world\\n&quot;, 12);close(p[1]);} 12345678910 pipe [p[1]] -------&gt; [p[0]] (write) (read)parent: write(p[1], ...)child: dup(p[0]) -&gt; fd 0 exec(&quot;wc&quot;) -&gt; wc reads from stdin (=read of pipe) The fact that read blocks until it is impossible for new data to arriveis one reason that it’s important for the child to close the write end of the pipe before executingwc above: if one of wc ’s file descriptors referred to the write end of the pipe and not close, wc would never seeend-of-file. The xv6 shell implements pipelines such as grep fork sh.c | wc -l in a manner similarto the above code (user/sh.c:101). The child process creates a pipe to connect the left end of thepipeline with the right end. Then it calls fork and runcmd for the left end of the pipeline andfork and runcmd for the right end, and waits for both to finish. The right end of the pipelinemay be a command that itself includes a pipe (e.g., a | b | c), which itself forks two new childprocesses (one for b and one for c). Thus, the shell may create a tree of processes. The leaves16of this tree are commands and the interior nodes are processes that wait until the left and rightchildren complete. 12345 sh / \\a sh / \\ b c echo hello world &gt;/tmp/xyz; wc &lt;/tmp/xyzPipes have at least three advantages over temporary files in this situation. First, pipes automatically clean themselves up; with the file redirection, a shell would have to be careful to remove /tmp/xyz when done. Second, pipes can pass arbitrarily long streams of data, while file redirection requires enough free space on disk to store all the data. Third, pipes allow for parallel execution of pipeline stages, while the file approach requires the first program to finish before the second starts. 1.4 File system The xv6 file system provides data files, which contain uninterpreted byte arrays, and directories,which contain named references to data files and other directories. There are system calls to create new files and directories: mkdir creates a new directory, openwith the O_CREATE flag creates a new data file, and mknod creates a new device file. This exampleillustrates all three: 1234mkdir(&quot;/dir&quot;);fd = open(&quot;/dir/file&quot;, O_CREATE|O_WRONLY);close(fd);mknod(&quot;/console&quot;, 1, 1); mknod creates a special file that refers to a device. Associated with a device file are the major andminor device numbers (the two arguments to mknod), which uniquely identify a kernel device.When a process later opens a device file, the kernel diverts read and write system calls to thekernel device implementation instead of passing them to the file system. A file’s name is distinct from the file itself; the same underlying file, called an inode, can havemultiple names, called links. Each link consists of an entry in a directory; the entry contains a filename and a reference to an inode. An inode holds metadata about a file, including its type (file ordirectory or device), its length, the location of the file’s content on disk, and the number of links toa file. The fstat system call retrieves information from the inode that a file descriptor refers to. Itfills in a struct stat, defined in stat.h (kernel/stat.h) as: 1234567891011#define T_DIR 1// Directory#define T_FILE 2// File#define T_DEVICE 3// Devicestruct stat { int dev; // File system’s disk device uint ino; // Inode number short type; // Type of file short nlink; // Number of links to file uint64 size; // Size of file in bytes}; The link system call creates another file system name referring to the same inode as an exist-ing file. This fragment creates a new file named both a and b. 12open(&quot;a&quot;, O_CREATE|O_WRONLY);link(&quot;a&quot;, &quot;b&quot;); Reading from or writing to a is the same as reading from or writing to b. Each inode is identifiedby a unique inode number. After the code sequence above, it is possible to determine that a and brefer to the same underlying contents by inspecting the result of fstat: both will return the sameinode number (ino), and the nlink count will be set to 2.The unlink system call removes a name from the file The unlink system call removes a name from the file system. The file’s inode and the diskspace holding its content are only freed when the file’s link count is zero and no file descriptorsrefer to it. Thus adding 1unlink(&quot;a&quot;); to the last code sequence leaves the inode and file content accessible as b. Furthermore, 12fd = open(&quot;/tmp/xyz&quot;, O_CREATE|O_RDWR);unlink(&quot;/tmp/xyz&quot;); is an idiomatic way to create a temporary inode with no name that will be cleaned up when theprocess closes fd or exits. Unix provides file utilities callable from the shell as user-level programs, for example mkdir,ln, and rm. This design allows anyone to extend the command-line interface by adding new user-level programs. In hindsight this plan seems obvious, but other systems designed at the time ofUnix often built such commands into the shell (and built the shell into the kernel).One exception is cd, which is built into the shell (user/sh.c:161). cd must change the currentworking directory of the shell itself. If cd were run as a regular command, then the shell would18fork a child process, the child process would run cd, and cd would change the child ’s workingdirectory. The parent’s (i.e., the shell’s) working directory would not change. 1.5 Real world the shell was the first so-called “scripting language.” The Unix system call interface persists today insystems like BSD, Linux, and macOS. The Unix system call interface has been standardized through the Portable Operating SystemInterface (POSIX) standard. Xv6 is not POSIX compliant: it is missing many system calls (in-cluding basic ones such as lseek), and many of the system calls it does provide differ from thestandard. Our main goals for xv6 are simplicity and clarity while providing a simple UNIX-likesystem-call interface. Several people have extended xv6 with a few more system calls and a sim-ple C library in order to run basic Unix programs. Modern kernels, however, provide many moresystem calls, and many more kinds of kernel services, than xv6. For example, they support net-working, windowing systems, user-level threads, drivers for many devices, and so on. Modernkernels evolve continuously and rapidly, and offer many features beyond POSIX. Xv6 does not provide a notion of users or of protecting one user from another; in Unix terms,all xv6 processes run as root. comments： Linux tries to adhere to POSIX (glibc provides most of the POSIX interfaces), but has its own extensions (e.g., epoll). Programmers who write POSIX interfaces can compile and run them on macOS, BSD, and Linux (as long as they don’t use platform-specific extensions). Think of the xv6 system call interface as a “subset implementation of POSIX.” POSIX文档","link":"/post/xv6-riscv-ch1.html"},{"title":"xv6-riscv-ch2","text":"This chapter2 explains how the OS is structured internally to manage hardware resources, run processes, and enforce protection. ch2: Operating system organization A key requirement for an operating system is to support several activities at once. an operating system must fulfill three requirements: multiplexing, isolation, andinteraction. Xv6 runs on a multi-core1 RISC-V microprocessor, and much of its low-level functionality(for example, its process implementation) is specific to RISC-V. RISC-V is a 64-bit CPU, and xv6is written in “LP64” C, which means long (L) and pointers (P) in the C programming languageare 64 bits, but an int is 32 bits. RISCV Technical Specifications 2.1 Abstracting physical resources The Unix interface is not the only way to abstractresources, but it has proved to be a good one. 2.2 User mode, supervisor mode, and system calls CPUs provide hardware support for strong isolation. For example, RISC-V has three modes inwhich the CPU can execute instructions: machine mode, supervisor mode, and user mode. Instruc-tions executing in machine mode have full privilege; a CPU starts in machine mode. Machine modeis mostly intended for setting up the computer during boot. Xv6 executes a few lines in machinemode and then changes to supervisor mode. In supervisor mode the CPU is allowed to execute privileged instructions: for example, en-abling and disabling interrupts, reading and writing the register that holds the address of a pagetable, etc. An application can execute only user-mode instructions (e.g., addingnumbers, etc.) and is said to be running in user space, while the software in supervisor mode canalso execute privileged instructions and is said to be running in kernel space. The software runningin kernel space (or in supervisor mode) is called the kernel. CPUs provide aspecial instruction that switches the CPU from user mode to supervisor mode and enters the kernelat an entry point specified by the kernel. (RISC-V provides the ecall instruction for this purpose.)Once the CPU has switched to supervisor mode, the kernel can then validate the arguments of thesystem call (e.g., check if the address passed to the system call is part of the application’s memory),decide whether the application is allowed to perform the requested operation (e.g., check if theapplication is allowed to write the specified file), and then deny it or execute it. It is important thatthe kernel control the entry point for transitions to supervisor mode; if the application could decidethe kernel entry point, a malicious application could, for example, enter the kernel at a point wherethe validation of arguments is skipped. 2.3 Kernel organization A key design question is what part of the operating system should run in supervisor mode. Onepossibility is that the entire operating system resides in the kernel, so that the implementations ofall system calls run in supervisor mode. This organization is called a monolithic kernel. A downside of the monolithic organization is that the interactions among different parts ofthe operating system are often complex (as we will see in the rest of this text), and therefore it is easy for an operating system developer to make a mistake. In a monolithic kernel, a mistake isfatal, because an error in supervisor mode will often cause the kernel to fail. If the kernel fails,the computer stops working, and thus all applications fail too. The computer must reboot to startagain. To reduce the risk of mistakes in the kernel, OS designers can minimize the amount of operatingsystem code that runs in supervisor mode, and execute the bulk of the operating system in usermode. This kernel organization is called a microkernel. Figure 2.1 illustrates this microkernel design. In the figure, the file system runs as a user-levelprocess. OS services running as processes are called servers. To allow applications to interact withthe file server, the kernel provides an inter-process communication mechanism to send messagesfrom one user-mode process to another. Xv6 is implemented as a monolithic kernel, like most Unix operating systems. Thus, the xv6kernel interface corresponds to the operating system interface, and the kernel implements the com-plete operating system. Since xv6 doesn’t provide many services, its kernel is smaller than somemicrokernels, but conceptually xv6 is monolithic. 2.4 Code: xv6 organization The xv6 kernel source is in the kernel/ sub-directory. The source is divided into files, followinga rough notion of modularity; Figure 2.2 lists the files.The inter-module interfaces are defined in defs.h (kernel/defs.h). 2.5 Process overview The unit of isolation in xv6 (as in other Unix operating systems) is a process. The process ab-straction prevents one process from wrecking or spying on another process’s memory, CPU, filedescriptors, etc. It also prevents a process from wrecking the kernel itself, so that a process can’tsubvert the kernel’s isolation mechanisms. To help enforce isolation, the process abstraction provides the illusion to a program that it hasits own private machine. A process provides a program with what appears to be a private memorysystem, or address space, which other processes cannot read or write. A process also provides theprogram with what appears to be its own CPU to execute the program’s instructions. Xv6 uses page tables (which are implemented by hardware) to give each process its own ad-dress space. The RISC-V page table translates (or “maps”) a virtual address (the address that anRISC-V instruction manipulates) to a physical address (an address that the CPU sends to mainmemory). 12345678910111213| 9 bits | 9 bits | 9 bits | 12 bits || VPN[2] | VPN[1] | VPN[0] | Page Offset ||-------- 页表索引 --------| 页内偏移 |example:虚拟地址：0x0000004001234567 ↓VPN[2] = 0x01 → level-2 页表（根）中偏移 8，得到 PTE1 → 指向 0x2000_0000VPN[1] = 0x01 → level-1 页表中偏移 8，得到 PTE2 → 指向 0x3000_0000VPN[0] = 0x46 → level-0 页表中偏移 0x230，得到 PTE3 → 页帧 0x4000offset = 0x4567→ 最终物理地址 = 0x4000_0000 + 0x4567 = **0x4000_4567** Xv6 maintains a separate page table for each process that defines that process’s address space.As illustrated in Figure 2.3, an address space includes the process’s user memory starting at virtualaddress zero. Instructions come first, followed by global variables, then the stack, and finally a “heap” area (for malloc) that the process can expand as needed. There are a number of factors that limit the maximum size of a process’s address space: pointers on the RISC-V are 64 bits wide; the hardware uses only the low 39 bits when looking up virtual addresses in page tables; and xv6 uses only 38 of those 39 bits. Thus, the maximum address is 238 − 1 = 0x3fffffffff, which is MAXVA (kernel/riscv.h:378). At the top of the address space xv6 places a trampoline page (4096 bytes) and a trapframe page. Xv6 uses these two pages to transition into the kernel and back; the trampoline page contains the code to transition in and out of the kernel, and the trapframe is where the kernel saves the process’s user registers, as Chapter 4 explains. The xv6 kernel maintains many pieces of state for each process, which it gathers into a struct proc (kernel/proc.h:85). A process’s most important pieces of kernel state are its page table, its kernelstack, and its run state. We’ll use the notation p-&gt;xxx to refer to elements of the proc structure; for example, p-&gt;pagetable is a pointer to the process’s page table. Each process has a thread of control (or thread for short) that holds the state needed to ex-ecute the process.might be executing on a CPU, or suspended (notexecuting, but capable of resuming executing in the future). Each process has two stacks: user stack: When the process is executing user instructions,only its user stack is in use, and its kernel stack is empty. kernel stack: When the process enters the kernel (for a system call or interrupt), the kernel code executes on the process’s kernel stack; while a process is in the kernel, its user stack still contains saved data, but isn’t actively used. A process’s thread alternates between actively using its user stack and its kernel stack. The kernel stack is separate (and protected from user code) so that the kernel can execute even if a process has wrecked its user stack. A process can make a system call by executing the RISC-V ecall instruction. This instruction raises the hardware privilege level and changes the program counter to a kernel-defined entry point. The code at the entry point switches to the process’s kernel stack and executes the kernel instructions that implement the system call. When the system call completes, the kernel switches back to the user stack and returns to user space by calling the sret instruction, which lowers the hardware privilege level and resumes executing user instructions just after the system call instruction. A process’s thread can “block” in the kernel to wait for I/O, and resume where it left off when the I/O has finished. p-&gt;state indicates whether the process is allocated, ready to run, currently running on a CPU, waiting for I/O, or exiting. p-&gt;pagetable holds the process’s page table, in the format that the RISC-V hardware ex- pects. Xv6 causes the paging hardware to use a process’s p-&gt;pagetable when executing that process in user space. A process’s page table also serve In summary, a process bundles two design ideas: an address space to give a process the illusion of its own memory, and a thread to give the process the illusion of its own CPU. In xv6, a process consists of one address space and one thread. In real operating systems a process may have more than one thread to take advantage of multiple CPUs. 2.6 Code: starting xv6, the first process and system callTo make xv6 more concrete, we’ll outline how the kernel starts and runs the first process.The subsequent chapters will describe the mechanisms that show up in this overview in more detail. When the RISC-V computer powers on, it initializes itself and runs a boot loader which is stored in read-only memory.The boot loader loads the xv6 kernel into memory.Then, in machine mode, the CPU executes xv6 starting at _entry (kernel/entry.S:7).The RISC-V starts with paging hardware disabled: virtual addresses map directly to physical addresses. The loader loads the xv6 kernel into memory at physical address 0x80000000.The reason it places the kernel at 0x80000000 rather than 0x0 is because the address range 0x0:0x80000000 contains I/O devices. The instructions at _entry set up a stack so that xv6 can run C code.Xv6 declares space for an initial stack, stack0, in the file start.c (kernel/start.c:11).The code at _entry loads the stack pointer register sp with the address stack0 + 4096, the top of the stack, because the stack on RISC-V grows down.Now that the kernel has a stack, _entry calls into C code at start (kernel/start.c:15). The function start performs some configuration that is only allowed in machine mode, and then switches to supervisor mode.To enter supervisor mode, RISC-V provides the instruction mret.This instruction is most often used to return from a previous call from supervisor mode to machine mode.start isn’t returning from such a call, but sets things up as if it were: it sets the previous privilege mode to supervisor in the register mstatus, it sets the return address to main by writing main’s address into the register mepc, disables virtual address translation in supervisor mode by writing 0 into the page-table register satp, and delegates all interrupts and exceptions to supervisor mode. Before jumping into supervisor mode, start performs one more task:it programs the clock chip to generate timer interrupts.With this housekeeping out of the way, start “returns” to supervisor mode by calling mret.This causes the program counter to change to main (kernel/main.c:11), the address previously stored in mepc. After main (kernel/main.c:11) initializes several devices and subsystems, it creates the first process by calling userinit (kernel/proc.c:233).The first process executes a small program written in RISC-V assembly, which makes the first system call in xv6.initcode.S (user/initcode.S:3) loads the number for the exec system call, SYS_EXEC (kernel/syscall.h:8), into register a7,and then calls ecall to re-enter the kernel. The kernel uses the number in register a7 in syscall (kernel/syscall.c:132) to call the desired system call.The system call table (kernel/syscall.c:107) maps SYS_EXEC to the function sys_exec, which the kernel invokes.As we saw in Chapter 1, exec replaces the memory and registers of the current process with a new program (in this case, /init). Once the kernel has completed exec, it returns to user space in the /init process.init (user/init.c:15) creates a new console device file if needed and then opens it as file descriptors 0, 1, and 2. Then it starts a shell on the console. The system is up. 2.7 Security Model The operating system must assume that a process’s user-level code will do its best to wreck the kernel or other processes.User code may try to dereference pointers outside its allowed address space; it may attempt to execute any RISC-V instructions, even those not intended for user code; it may try to read and write any RISC-V control register; it may try to directly access device hardware; and it may pass clever values to system calls in an attempt to trick the kernel into crashing or doing something stupid. The kernel’s goal is to restrict each user process so that all it can do is: read/write/execute its own user memory, use the 32 general-purpose RISC-V registers, and affect the kernel and other processes only in the ways that system calls are intended to allow. The expectations for the kernel’s own code are quite different.Kernel code is assumed to be written by well-meaning and careful programmers.Kernel code is expected to be bug-free, and certainly to contain nothing malicious.This assumption affects how we analyze kernel code.For example, there are many internal kernel functions (e.g., the spin locks) that would cause serious problems if kernel code used them incorrectly.When examining any specific piece of kernel code, we’ll want to convince ourselves that it behaves correctly.We assume, however, that kernel code in general is correctly written, and follows all the rules about use of the kernel’s own functions and data structures. At the hardware level, the RISC-V CPU, RAM, disk, etc. are assumed to operate as advertised in the documentation, with no hardware bugs. 2.8 Real worldMost operating systems have adopted the process concept, and most processes look similar to xv6’s. Modern operating systems, however, support several threads within a process, to allow a single process to exploit multiple CPUs. Supporting multiple threads in a process involves quite a bit of machinery that xv6 doesn’t have, often including interface changes (e.g., Linux’s clone, a variant of fork), to control which aspects of a process threads share.","link":"/post/xv6-riscv-ch2.html"},{"title":"xv6-riscv_ch3","text":"This chapter covers the fundamental concepts of paging hardware, memory allocation, and process address space management, including practical code implementations like creating address spaces, physical memory allocation, and process management functions such as sbrk and exec. ch3: Page tables Page tables are the most popular mechanism through which the operating system provides each process with its own private address space and memory. Xv6 performs a few tricks: mapping the same memory (a trampoline page) in several address spaces, and guarding kernel and user stacks with an unmapped page. The rest of this chapter explains the page tables that the RISC-V hardware provides and how xv6 uses them. 3.1 Paging hardware As a reminder, RISC-V instructions (both user and kernel) manipulate virtual addresses. The machine’s RAM, or physical memory, is indexed with physical addresses. The RISC-V page table hardware connects these two kinds of addresses, by mapping each virtual address to a physical address. Xv6 runs on Sv39 RISC-V, which means that only the bottom 39 bits of a 64-bit virtual address are used; the top 25 bits are not used. In this Sv39 configuration, a RISC-V page table is logically an array of 227 (134,217,728) page table entries (PTEs). Each PTE contains a 44-bit physical page number (PPN) and some flags. The paging hardware translates a virtual address by using the top 27 bits of the 39 bits to index into the page table to find a PTE, and making a 56-bit physical address whose top 44 bits come from the PPN in the PTE and whose bottom 12 bits are copied from the original virtual address. Figure 3.1 shows this process with a logical view of the page table as a simple array of PTEs (see Figure 3.2 for a fuller story). A page table gives the operating system control over virtual-to-physical address translations at the granularity of aligned chunks of 4096 (212 ) bytes. Such a chunk is called a page. In Sv39 RISC-V, the top 25 bits of a virtual address are not used for translation. The physicaladdress also has room for growth: there is room in the PTE format for the physical page numberto grow by another 10 bits. The designers of RISC-V chose these numbers based on technologypredictions. 239 bytes is 512 GB, which should be enough address space for applications running on RISC-V computers. 256 is enough physical memory space for the near future to fit many I/Odevices and RAM chips. If more is needed, the RISC-V designers have defined Sv48 with 48-bitvirtual addresses [3]. As Figure 3.2 shows, a RISC-V CPU translates a virtual address into a physical in three steps.A page table is stored in physical memory as a three-level tree. The root of the tree is a 4096-bytepage-table page that contains 512 PTEs, which contain the physical addresses for page-table pagesin the next level of the tree. Each of those pages contains 512 PTEs for the final level in the tree.The paging hardware uses the top 9 bits of the 27 bits to select a PTE in the root page-table page,the middle 9 bits to select a PTE in a page-table page in the next level of the tree, and the bottom9 bits to select the final PTE. (In Sv48 RISC-V a page table has four levels, and bits 39 through 47of a virtual address index into the top-level.)If any of the three PTEs required to translate an address is not present, the paging hardwareraises a page-fault exception, leaving it up to the kernel to handle the exception (see Chapter 4).The three-level structure of Figure 3.2 allows a memory-efficient way of recording PTEs, com-pared to the single-level design of Figure 3.1. In the common case in which large ranges of virtualaddresses have no mappings, the three-level structure can omit entire page directories. For exam-ple, if an application uses only a few pages starting at address zero, then the entries 1 through 511of the top-level page directory are invalid, and the kernel doesn’t have to allocate pages those for511 intermediate page directories. Furthermore, the kernel also doesn’t have to allocate pages forthe bottom-level page directories for those 511 intermediate page directories. So, in this example,the three-level design saves 511 pages for intermediate page directories and 511 × 512 pages forbottom-level page directories.Although a CPU walks the three-level structure in hardware as part of executing a load or storeinstruction, a potential downside of three levels is that the CPU must load three PTEs from memoryto perform the translation of the virtual address in the load/store instruction to a physical address.To avoid the cost of loading PTEs from physical memory, a RISC-V CPU caches page table entriesin a Translation Look-aside Buffer (TLB).allowed to be used. PTE_V indicates whether the PTE is present: if it is not set, a reference to thepage causes an exception (i.e., is not allowed). PTE_R controls whether instructions are allowedto read to the page. PTE_W controls whether instructions are allowed to write to the page. PTE_Xcontrols whether the CPU may interpret the content of the page as instructions and execute them.PTE_U controls whether instructions in user mode are allowed to access the page; if PTE_U is notset, the PTE can be used only in supervisor mode. Figure 3.2 shows how it all works. The flags andall other page hardware-related structures are defined in (kernel/riscv.h) To tell a CPU to use a page table, the kernel must write the physical address of the root page-table page into the satp register. A CPU will translate all addresses generated by subsequentinstructions using the page table pointed to by its own satp. Each CPU has its own satp so thatdifferent CPUs can run different processes, each with a private address space described by its ownpage table. notice:A few notes about terms used in this book. Physical memory refers to storage cells in RAM.A byte of physical memory has an address, called a physical address. Instructions that dereferenceaddresses (such as loads, stores, jumps, and function calls) use only virtual addresses, which thepaging hardware translates to physical addresses, and then sends to the RAM hardware to read orwrite storage. An address space is the set of virtual addresses that are valid in a given page table; each xv6 process has a separate user address space, and the xv6 kernel has its own address space aswell. User memory refers to a process’s user address space plus the physical memory that the pagetable allows the process to access. Virtual memory refers to the ideas and techniques associatedwith managing page tables and using them to achieve goals such as isolation. 3.2 Kernel address space Xv6 maintains one page table per process, describing each process’s user address space, plus a sin-gle page table that describes the kernel’s address space. The kernel configures the layout of its ad-dress space to give itself access to physical memory and various hardware resources at predictable virtual addresses. Figure 3.3 shows how this layout maps kernel virtual addresses to physical addresses. The file (kernel/memlayout.h) declares the constants for xv6’s kernel memory layout. The kernel gets at RAM and memory-mapped device registers using “direct mapping;” thatis, mapping the resources at virtual addresses that are equal to the physical address. For example,the kernel itself is located at KERNBASE=0x80000000 in both the virtual address space and inphysical memory. Direct mapping simplifies kernel code that reads or writes physical memory. There are a couple of kernel virtual addresses that aren’t direct-mapped: The trampoline page. It is mapped at the top of the virtual address space; user page tables have this same mapping. Chapter 4 discusses the role of the trampoline page, but we see here an interesting use case of page tables; a physical page (holding the trampoline code) is mapped twice in the virtual address space of the kernel: once at top of the virtual address space and once with a direct mapping. The kernel stack pages. Each process has its own kernel stack, which is mapped high so that below it xv6 can leave an unmapped guard page. The guard page’s PTE is invalid (i.e., PTE_V is not set), so that if the kernel overflows a kernel stack, it will likely cause an exception and the kernel will panic. Without a guard page an overflowing stack would overwrite other kernel memory, resulting in incorrect operation. A panic crash is preferable. 3.3 Code: creating an address space Most of the xv6 code for manipulating address spaces and page tables resides in vm.c (kernel/vm.c:1). The central data structure is pagetable_t, which is really a pointer to a RISC-V root page-table page; a pagetable_t may be either the kernel page table, or one of the per-process page tables. The central functions are walk, which finds the PTE for a virtual address,and mappages, which installs PTEs for new mappings. Functions starting with kvm manipulate the kernel page table; functions starting with uvm manipulate a user page table; other functions are used for both. copyout and copyin copy data to and from user virtual addresses provided as system call arguments; they are in vm.c because they need to explicitly translate those addresses in order to find the corresponding physical memory. Early in the boot sequence, main calls kvminit (kernel/vm.c:54) to create the kernel’s page ta-ble using kvmmake (kernel/vm.c:20). This call occurs before xv6 has enabled paging on the RISC-V,so addresses refer directly to physical memory. kvmmake first allocates a page of physical mem-ory to hold the root page-table page. Then it calls kvmmap to install the translations that the kernelneeds. The translations include the kernel’s instructions and data, physical memory up to PHYSTOP,and memory ranges which are actually devices. proc_mapstacks (kernel/proc.c:33) allocates akernel stack for each process. It calls kvmmap to map each stack at the virtual address generatedby KSTACK, which leaves room for the invalid stack-guard pages. kvmmap (kernel/vm.c:132) calls mappages (kernel/vm.c:144), which installs mappings into apage table for a range of virtual addresses to a corresponding range of physical addresses. It doesthis separately for each virtual address in the range, at page intervals. For each virtual address tobe mapped, mappages calls walk to find the address of the PTE for that address. It then initializesthe PTE to hold the relevant physical page number, the desired permissions (PTE_W, PTE_X, and/orPTE_R), and PTE_V to mark the PTE as valid (kernel/vm.c:165). walk (kernel/vm.c:86) mimics the RISC-V paging hardware as it looks up the PTE for a virtualaddress (see Figure 3.2). walk descends the page table one level at a time, using each level’s 9bits of virtual address to index into the relevant page directory page. At each level it finds eitherthe PTE of the next level’s page directory page, or the PTE of final page (kernel/vm.c:92). If a PTEin a first or second level page directory page isn’t valid, then the required directory page hasn’tyet been allocated; if the alloc argument is set, walk allocates a new page-table page and putsits physical address in the PTE. It returns the address of the PTE in the lowest layer in the tree(kernel/vm.c:102). main calls kvminithart (kernel/vm.c:62) to install the kernel page table. It writes the physicaladdress of the root page-table page into the register satp. After this the CPU will translate ad-dresses using the kernel page table. Since the kernel uses a direct mapping, the now virtual addressof the next instruction will map to the right physical memory address. Each RISC-V CPU caches page table entries in a Translation Look-aside Buffer (TLB), andwhen xv6 changes a page table, it must tell the CPU to invalidate corresponding cached TLBentries. If it didn’t, then at some point later the TLB might use an old cached mapping, point-ing to a physical page that in the meantime has been allocated to another process, and as a re-sult, a process might be able to scribble on some other process’s memory. The RISC-V has an instruction sfence.vma that flushes the current CPU’s TLB. Xv6 executes sfence.vma inkvminithart after reloading the satp register, and in the trampoline code that switches to auser page table before returning to user space (kernel/trampoline.S:89).It is also necessary to issue sfence.vma before changing satp, in order to wait for comple-tion of all outstanding loads and stores. This wait ensures that preceding updates to the page tablehave completed, and ensures that preceding loads and stores use the old page table, not the newone.To avoid flushing the complete TLB, RISC-V CPUs may support address space identifiers(ASIDs) [3]. The kernel can then flush just the TLB entries for a particular address space. Xv6does not use this feature. 3.4 Physical memory allocation The kernel must allocate and free physical memory at run-time for page tables, user memory,kernel stacks, and pipe buffers. Xv6 uses the physical memory between the end of the kernel and PHYSTOP for run-time alloca-tion. It allocates and frees whole 4096-byte pages at a time. It keeps track of which pages are freeby threading a linked list through the pages themselves. Allocation consists of removing a pagefrom the linked list; freeing consists of adding the freed page to the list. 3.5 Code: Physical memory allocator The allocator resides in kalloc.c (kernel/kalloc.c:1). The allocator’s data structure is a free listof physical memory pages that are available for allocation. Each free page’s list element is astruct run (kernel/kalloc.c:17). Where does the allocator get the memory to hold that data struc-ture? It store each free page’s run structure in the free page itself, since there’s nothing else storedthere. The free list is protected by a spin lock (kernel/kalloc.c:21-24). The list and the lock arewrapped in a struct to make clear that the lock protects the fields in the struct. For now, ignore thelock and the calls to acquire and release; Chapter 6 will examine locking in detail.The function main calls kinit to initialize the allocator (kernel/kalloc.c:27). kinit initializesthe free list to hold every page between the end of the kernel and PHYSTOP. Xv6 ought to de-termine how much physical memory is available by parsing configuration information providedby the hardware. Instead xv6 assumes that the machine has 128 megabytes of RAM. kinit callsfreerange to add memory to the free list via per-page calls to kfree. A PTE can only refer toa physical address that is aligned on a 4096-byte boundary (is a multiple of 4096), so freerangeuses PGROUNDUP to ensure that it frees only aligned physical addresses. The allocator starts withno memory; these calls to kfree give it some to manage.The allocator sometimes treats addresses as integers in order to perform arithmetic on them(e.g., traversing all pages in freerange), and sometimes uses addresses as pointers to read andwrite memory (e.g., manipulating the run structure stored in each page); this dual use of addressesis the main reason that the allocator code is full of C type casts.The function kfree (kernel/kalloc.c:47) begins by setting every byte in the memory being freedto the value 1. This will cause code that uses memory after freeing it (uses “dangling references”)to read garbage instead of the old valid contents; hopefully that will cause such code to break faster.Then kfree prepends the page to the free list: it casts pa to a pointer to struct run, records theold start of the free list in r-&gt;next, and sets the free list equal to r. kalloc removes and returnsthe first element in the free list. 3.6 Process address space Each process has its own page table, and when xv6 switches between processes, it also changespage tables. Figure 3.4 shows a process’s address space in more detail than Figure 2.3. A process’suser memory starts at virtual address zero and can grow up to MAXVA (kernel/riscv.h:375), allowinga process to address in principle 256 Gigabytes of memory.A process’s address space consists of pages that contain the text of the program (which xv6maps with the permissions PTE_R, PTE_X, and PTE_U), pages that contain the pre-initialized dataof the program, a page for the stack, and pages for the heap. Xv6 maps the data, stack, and heapwith the permissions PTE_R, PTE_W, and PTE_U.Using permissions within a user address space is a common technique to harden a user process.If the text were mapped with PTE_W, then a process could accidentally modify its own program;for example, a programming error may cause the program to write to a null pointer, modifyinginstructions at address 0, and then continue running, perhaps creating more havoc. To detect sucherrors immediately, xv6 maps the text without PTE_W; if a program accidentally attempts to storeto address 0, the hardware will refuse to execute the store and raises a page fault (see Section 4.6).The kernel then kills the process and prints out an informative message so that the developer cantrack down the problem.Similarly, by mapping data without PTE_X, a user program cannot accidentally jump to anaddress in the program’s data and start executing at that address.In the real world, hardening a process by setting permissions carefully also aids in defendingagainst security attacks. An adversary may feed carefully-constructed input to a program (e.g., aWeb server) that triggers a bug in the program in the hope of turning that bug into an exploit [14].Setting permissions carefully and other techniques, such as randomizing of the layout of the useraddress space, make such attacks harder.The stack is a single page, and is shown with the initial contents as created by exec. Stringscontaining the command-line arguments, as well as an array of pointers to them, are at the verytop of the stack. Just under that are values that allow a program to start at main as if the functionmain(argc, argv) had just been called.To detect a user stack overflowing the allocated stack memory, xv6 places an inaccessible guardpage right below the stack by clearing the PTE_U flag. If the user stack overflows and the processtries to use an address below the stack, the hardware will generate a page-fault exception becausethe guard page is inaccessible to a program running in user mode. A real-world operating systemmight instead automatically allocate more memory for the user stack when it overflows.When a process asks xv6 for more user memory, xv6 grows the process’s heap. Xv6 first uses kalloc to allocate physical pages. It then adds PTEs to the process’s page table that point to thenew physical pages. Xv6 sets the PTE_W, PTE_R, PTE_U, and PTE_V flags in these PTEs. Mostprocesses do not use the entire user address space; xv6 leaves PTE_V clear in unused PTEs.We see here a few nice examples of use of page tables. First, different processes’ page tablestranslate user addresses to different pages of physical memory, so that each process has private usermemory. Second, each process sees its memory as having contiguous virtual addresses starting atzero, while the process’s physical memory can be non-contiguous. Third, the kernel maps a pagewith trampoline code at the top of the user address space (without PTE_U), thus a single page ofphysical memory shows up in all address spaces, but can be used only by the kernel. 3.7 Code: sbrk sbrk is the system call for a process to shrink or grow its memory. The system call is implementedby the function growproc (kernel/proc.c:260). growproc calls uvmalloc or uvmdealloc, de-pending on whether n is positive or negative. uvmalloc (kernel/vm.c:233) allocates physical mem-ory with kalloc, zeros the allocated memory, and adds PTEs to the user page table with mappages.uvmdealloc calls uvmunmap (kernel/vm.c:178), which uses walk to find PTEs and kfree tofree the physical memory they refer to.Xv6 uses a process’s page table not just to tell the hardware how to map user virtual addresses, but also as the only record of which physical memory pages are allocated to that process. That is the reason why freeing user memory (in uvmunmap) requires examination of the user page table. 3.8 Code: exec A binary is typically the output of the compiler and linker, and holdsmachine instructions and program data. exec (kernel/exec.c:23) opens the named binary path usingnamei (kernel/exec.c:36), which is explained in Chapter 8. Then, it reads the ELF header. Xv6binaries are formatted in the widely-used ELF format, defined in (kernel/elf.h). An ELF binaryconsists of an ELF header, struct elfhdr (kernel/elf.h:6), followed by a sequence of programsection headers, struct proghdr (kernel/elf.h:25). Each progvhdr describes a section of theapplication that must be loaded into memory; xv6 programs have two program section headers:one for instructions and one for data.The first step is a quick check that the file probably contains an ELF binary. An ELF binarystarts with the four-byte “magic number” 0x7F, ‘E’, ‘L’, ‘F’, or ELF_MAGIC (kernel/elf.h:3). Ifthe ELF header has the right magic number, exec assumes that the binary is well-formed.exec allocates a new page table with no user mappings with proc_pagetable (kernel/exec.c:49),allocates memory for each ELF segment with uvmalloc (kernel/exec.c:65), and loads each segmentinto memory with loadseg (kernel/exec.c:10). loadseg uses walkaddr to find the physical ad-dress of the allocated memory at which to write each page of the ELF segment, and readi to readfrom the file. The program section header for /init, the first user program created with exec, looks like this: 12345678910111213141516# objdump -p user/_init# 告诉操作系统如何将文件的各个段（segment）加载到内存中去执行user/_init: file format elf64-littleProgram Header:0x70000003 off 0x0000000000006bb0 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**0 filesz 0x000000000000004a memsz 0x0000000000000000 flags r--LOAD off 0x0000000000001000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**12 filesz 0x0000000000001000 memsz 0x0000000000001000 flags r-xLOAD off 0x0000000000002000 vaddr 0x0000000000001000 paddr 0x0000000000001000 align 2**12 filesz 0x0000000000000010 memsz 0x0000000000000030 flags rw-STACK off 0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**4 filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw- The output of objdump -p shows the Program Header Table of an ELF (Executable and Linkable Format) file. This is a crucial part of the ELF file, telling the operating system how to load each segment into memory for execution. 🌟 Explanation of ELF Program Header fields — each segment corresponds to the following fields: Field Meaning off Byte offset of the segment in the file, counted from the beginning. vaddr Virtual address of the segment in memory. paddr Physical address — usually ignored by modern OSes. align Alignment requirement; the segment must be aligned to this (often a page size). filesz Size of the segment in the file (in bytes). loadseg reads this many bytes. memsz Total size the segment occupies in memory after loading (may be larger than in the file, e.g., for bss). flags Permission flags: r (read), w (write), x (execute). type Segment type (e.g., LOAD, STACK, NOTE, DYNAMIC, etc.). align Memory alignment requirement. 4 Program Headers (Segments):1. First Segment: Type 0x70000003 (non-standard) 1230x70000003 off 0x0000000000006bb0 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**0 filesz 0x000000000000004a memsz 0x0000000000000000 flags r-- type=0x70000003 is processor-specific and non-standard — generally ignored by developers. off=0x6bb0 — the offset within the file. filesz=0x4a — 74 bytes of data. memsz=0x0 — although there is data in the file, nothing is loaded into memory (e.g., debug info, notes). This is typically metadata, not code or data. 2. Second Segment: The actual code segment (text segment) 123LOAD off 0x0000000000001000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**12 filesz 0x0000000000001000 memsz 0x0000000000001000 flags r-x Type: LOAD — to be loaded into memory. off=0x1000 — loading starts from offset 0x1000 in the file. vaddr=0x0 — to be loaded at virtual address 0x0 (important). filesz = memsz = 0x1000 — both file and memory size are 4KB. flags=r-x — readable and executable. Indicates this is the code segment. 🔑 This segment contains program instructions (text segment), and exec/loadseg will load it into memory at 0x0. 3. Third Segment: Data segment 123LOAD off 0x0000000000002000 vaddr 0x0000000000001000 paddr 0x0000000000001000 align 2**12 filesz 0x0000000000000010 memsz 0x0000000000000030 flags rw- Type: LOAD — also needs to be loaded. File offset: 0x2000 Virtual address: 0x1000 filesz = 0x10, memsz = 0x30 — 16 bytes from file, the rest is BSS (needs to be zero-initialized). flags = rw- — read/write permission, indicates this is a data segment. 🔑 This segment holds global variables — part comes from the file, the rest is zeroed out by memset or page initialization. 4. Fourth Segment: Stack segment 123STACK off 0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**4 filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw- Type: STACK — indicates a stack segment. Usually has no actual content; the stack is manually allocated by the kernel (not loaded from ELF). This is just a marker indicating that the ELF expects a stack. 🔧 Main points in how exec loads ELF in xv6 ELF segment loading Each segment (like .text, .data) specifies a vaddr (virtual address). The kernel reads filesz bytes from the file offset and loads them into memory at vaddr. If memsz &gt; filesz, the remaining space (like .bss) must be zero-initialized. User stack initialization One page of memory is allocated for the user stack; the top stores the argument strings. A “guard page” is placed below the stack and made inaccessible. Arguments are passed to main() via a0 (argc) and a1 (argv). Security checks A malicious ELF file could attempt to set dangerous vaddr values or trigger integer overflows. xv6 performs checks, such as preventing vaddr + memsz overflows. On RISC-V, xv6 uses separate page tables for user and kernel space to prevent interference. ELF loading steps (in exec) The kernel reads the ELF header and locates the Program Headers. For each LOAD-type segment: It calls uvmalloc to allocate memory from vaddr to vaddr + memsz. It uses loadseg to read filesz bytes from the file into that memory. If memsz &gt; filesz, the remaining bytes are cleared to zero. Finally, it creates the user stack, sets up the trap frame and arguments, and jumps to user mode for execution. 3.9 Real world Xv6 is simplified by the kernel’s use of a direct map between virtual and physical addresses, andby its assumption that there is physical RAM at address 0x80000000, where the kernel expects tobe loaded. This works with QEMU, but on real hardware it turns out to be a bad idea; real hardwareplaces RAM and devices at unpredictable physical addresses, so that (for example) there might beno RAM at 0x80000000, where xv6 expect to be able to store the kernel. More serious kerneldesigns exploit the page table to turn arbitrary hardware physical memory layouts into predictablekernel virtual address layouts. RISC-V supports protection at the level of physical addresses, but xv6 doesn’t use that feature. On machines with lots of memory it might make sense to use RISC-V’s support for “superpages.” Small pages make sense when physical memory is small, to allow allocation and page-outto disk with fine granularity. For example, if a program uses only 8 kilobytes of memory, givingit a whole 4-megabyte super-page of physical memory is wasteful. Larger pages make sense onmachines with lots of RAM, and may reduce overhead for page-table manipulation. The xv6 kernel’s lack of a malloc-like allocator that can provide memory for small objectsprevents the kernel from using sophisticated data structures that would require dynamic allocation.A more elaborate kernel would likely allocate many different sizes of small blocks, rather than (asin xv6) just 4096-byte blocks; a real kernel allocator would need to handle small allocations aswell as large ones.","link":"/post/xv6-riscv-ch3.html"},{"title":"xv6-riscv_ch4","text":"How traps and system calls work on RISC-V. It introduces the trap mechanism, how user programs invoke system calls, how the kernel handles those traps, and how arguments are passed. It also covers kernel-mode traps, page faults, and real-world implications like protection and isolation. ch4: Traps and system calls There are three kinds of event which cause the CPU to set aside ordinary execution of instructions and force a transfer of control to special code that handles the event. and we uses trap as a generic term for these situations. One situation is a systemcall, when a user program executes the ecall instruction to ask the kernel to do something for it. Another situation is an exception: an instruction (user or kernel) does something illegal, such as divide by zero or use an invalid virtual address. The third situation is a device interrupt, when a device signals that it needs attention, for example when the disk hardware finishes a read or write request. Xv6 handles all traps in the kernel; traps are not delivered to user code. Handling traps in the kernel is natural for system calls. It makes sense for interrupts since isolation demands that only the kernel be allowed to use devices, and because the kernel is a convenient mechanism with which to share devices among multiple processes. It also makes sense for exceptions since xv6 responds to all exceptions from user space by killing the offending program. Xv6 trap handling proceeds in four stages: hardware actions taken by the RISC-V CPU, some assembly instructions that prepare the way for kernel C code a C function that decides what to do with the trap and the system call or device-driver service routine. While commonality among the three trap types suggests that a kernel could handle all traps with a single code path, it turns out to be convenient to have separate code for two distinct cases: traps from user space, and traps from kernel space. Kernel code (assembler or C) that processes a trap is often called a handler; the first handler instructions are usually written in assembler (rather than C) and are sometimes called a vector. 4.1 RISC-V trap machinery机制 Each RISC-V CPU has a set of control registers that the kernel writes to tell the CPU how to handle traps, and that the kernel can read to find out about a trap that has occurred. The RISC-V documents contain the full story [3]. riscv.h (kernel/riscv.h:1) contains definitions that xv6 uses. Here’s an outline of the most important registers: stvec: The kernel writes the address of its trap handler here; the RISC-V jumps to the address in stvec to handle a trap. sepc: When a trap occurs, RISC-V saves the program counter here (since the pc is then overwritten with the value in stvec). The sret (return from trap) instruction copies sepc to the pc. The kernel can write sepc to control where sret goes. scause: RISC-V puts a number here that describes the reason for the trap. sscratch: The trap handler code uses sscratch to help it avoid overwriting user registers before saving them. sstatus: The SIE bit in sstatus controls whether device interrupts are enabled. If the kernel clears SIE, the RISC-V will defer device interrupts until the kernel sets SIE. The SPP bit indicates whether a trap came from user mode or supervisor mode, and controls to what mode sret returns. The above registers relate to traps handled in supervisor mode, and they cannot be read or written in user mode. Each CPU on a multi-core chip has its own set of these registers, and more than one CPU may be handling a trap at any given time. When it needs to force a trap, the RISC-V hardware does the following for all trap types: If the trap is a device interrupt, and the sstatus SIE bit is clear, don’t do any of the following. Disable interrupts by clearing the SIE bit in sstatus. Copy the pc to sepc. Save the current mode (user or supervisor) in the SPP bit in sstatus. Set scause to reflect the trap’s cause. Set the mode to supervisor. Copy stvec to the pc. Start executing at the new pc. Note that the CPU doesn’t switch to the kernel page table, doesn’t switch to a stack in the kernel, and doesn’t save any registers other than the pc. Kernel software must perform these tasks. One reason that the CPU does minimal work during a traps is to provide flexibility to software; for example, some operating systems omit a page table switch in some situations to increase trap performance.It’s worth thinking about whether any of the steps listed above could be omitted, perhaps in search of faster traps. Though there are situations in which a simpler sequence can work, many of the steps would be dangerous to omit in general. For example, suppose that the CPU didn’t switch program counters. Then a trap from user space could switch to supervisor mode while still running user instructions. Those user instructions could break user/kernel isolation, for example by modifying the satp register to point to a page table that allowed accessing all of physical memory. It is thus important that the CPU switch to a kernel-specified instruction address, namely stvec. 4.2 Traps from user spaceXv6 handles traps differently depending on whether the trap occurs while executing in the kernelor in user code. Here is the story for traps from user code; Section 4.5 describes traps from kernelcode.A trap may occur while executing in user space if the user program makes a system call (ecallinstruction), or does something illegal, or if a device interrupts. The high-level path of a trap fromuser space is uservec (kernel/trampoline.S:22), then usertrap (kernel/trap.c:37); and when re-turning, usertrapret (kernel/trap.c:90) and then userret (kernel/trampoline.S:101).A major constraint on the design of xv6’s trap handling is the fact that the RISC-V hardwaredoes not switch page tables when it forces a trap. This means that the trap handler address instvec must have a valid mapping in the user page table, since that’s the page table in force whenthe trap handling code starts executing. Furthermore, xv6’s trap handling code needs to switch tothe kernel page table; in order to be able to continue executing after that switch, the kernel pagetable must also have a mapping for the handler pointed to by stvec.Xv6 satisfies these requirements using a trampoline page. The trampoline page contains uservec,the xv6 trap handling code that stvec points to. The trampoline page is mapped in every process’spage table at address TRAMPOLINE, which is at the top of the virtual address space so that it will beabove memory that programs use for themselves. The trampoline page is also mapped at addressTRAMPOLINE in the kernel page table. See Figure 2.3 and Figure 3.3. Because the trampolinepage is mapped in the user page table, traps can start executing there in supervisor mode. Becausethe trampoline page is mapped at the same address in the kernel address space, the trap handlercan continue to execute after it switches to the kernel page table.The code for the uservec trap handler is in trampoline.S (kernel/trampoline.S:22). Whenuservec starts, all 32 registers contain values owned by the interrupted user code. These 32values need to be saved somewhere in memory, so that later on the kernel can restore them beforereturning to user space. Storing to memory requires use of a register to hold the address, but at thispoint there are no general-purpose registers available! Luckily RISC-V provides a helping hand inthe form of the sscratch register. The csrw instruction at the start of uservec saves a0 insscratch. Now uservec has one register (a0) to play with.uservec’s next task is to save the 32 user registers. The kernel allocates, for each process, apage of memory for a trapframe structure that (among other things) has space to save the 32user registers (kernel/proc.h:43). Because satp still refers to the user page table, uservec needsthe trapframe to be mapped in the user address space. Xv6 maps each process’s trapframe at virtualaddress TRAPFRAME in that process’s user page table; TRAPFRAME is just below TRAMPOLINE.The process’s p-&gt;trapframe also points to the trapframe, though at its physical address so thekernel can use it through the kernel page table.Thus uservec loads address TRAPFRAME into a0 and saves all the user registers there,including the user’s a0, read back from sscratch.The trapframe contains the address of the current process’s kernel stack, the current CPU’shartid, the address of the usertrap function, and the address of the kernel page table. uservecretrieves these values, switches satp to the kernel page table, and jumps to usertrap.The job of usertrap is to determine the cause of the trap, process it, and return (kernel/-trap.c:37). It first changes stvec so that a trap while in the kernel will be handled by kernelvecrather than uservec. It saves the sepc register (the saved user program counter), becauseusertrap might call yield to switch to another process’s kernel thread, and that process mightreturn to user space, in the process of which it will modify sepc. If the trap is a system call,usertrap calls syscall to handle it; if a device interrupt, devintr; otherwise it’s an ex-ception, and the kernel kills the faulting process. The system call path adds four to the saved userprogram counter because RISC-V, in the case of a system call, leaves the program pointer pointingto the ecall instruction but user code needs to resume executing at the subsequent instruction.On the way out, usertrap checks if the process has been killed or should yield the CPU (if thistrap is a timer interrupt).The first step in returning to user space is the call to usertrapret (kernel/trap.c:90). Thisfunction sets up the RISC-V control registers to prepare for a future trap from user space: settingstvec to uservec and preparing the trapframe fields that uservec relies on. usertrapretsets sepc to the previously saved user program counter. At the end, usertrapret calls userreton the trampoline page that is mapped in both user and kernel page tables; the reason is that as-sembly code in userret will switch page tables.usertrapret’s call to userret passes a pointer to the process’s user page table in a0(kernel/trampoline.S:101). userret switches satp to the process’s user page table. Recall that theuser page table maps both the trampoline page and TRAPFRAME, but nothing else from the kernel.The trampoline page mapping at the same virtual address in user and kernel page tables allowsuserret to keep executing after changing satp. From this point on, the only data userretcan use is the register contents and the content of the trapframe. userret loads the TRAPFRAMEaddress into a0, restores saved user registers from the trapframe via a0, restores the saved usera0, and executes sret to return to user space. 4.3 Code: Calling system callsChapter 2 ended with initcode.S invoking the exec system call (user/initcode.S:11). Let’s lookat how the user call makes its way to the exec system call’s implementation in the kernel.initcode.S places the arguments for exec in registers a0 and a1, and puts the system callnumber in a7. System call numbers match the entries in the syscalls array, a table of functionpointers (kernel/syscall.c:107). The ecall instruction traps into the kernel and causes uservec,usertrap, and then syscall to execute, as we saw above.syscall (kernel/syscall.c:132) retrieves the system call number from the saved a7 in the trapframeand uses it to index into syscalls. For the first system call, a7 contains SYS_exec (ker-nel/syscall.h:8), resulting in a call to the system call implementation function sys_exec.When sys_exec returns, syscall records its return value in p-&gt;trapframe-&gt;a0. This willcause the original user-space call to exec() to return that value, since the C calling conventionon RISC-V places return values in a0. System calls conventionally return negative numbers toindicate errors, and zero or positive numbers for success. If the system call number is invalid,syscall prints an error and returns −1. 4.4 Code: System call arguments System call implementations in the kernel need to find the arguments passed by user code. Becauseuser code calls system call wrapper functions, the arguments are initially where the RISC-V Ccalling convention places them: in registers. The kernel trap code saves user registers to the currentprocess’s trap frame, where kernel code can find them. The kernel functions argint, argaddr,and argfd retrieve the n ’th system call argument from the trap frame as an integer, pointer, or a filedescriptor. They all call argraw to retrieve the appropriate saved user register (kernel/syscall.c:34).Some system calls pass pointers as arguments, and the kernel must use those pointers to reador write user memory. The exec system call, for example, passes the kernel an array of pointersreferring to string arguments in user space. These pointers pose two challenges. First, the user pro-gram may be buggy or malicious, and may pass the kernel an invalid pointer or a pointer intendedto trick the kernel into accessing kernel memory instead of user memory. Second, the xv6 kernelpage table mappings are not the same as the user page table mappings, so the kernel cannot useordinary instructions to load or store from user-supplied addresses.The kernel implements functions that safely transfer data to and from user-supplied addresses.fetchstr is an example (kernel/syscall.c:25). File system calls such as exec use fetchstr toretrieve string file-name arguments from user space. fetchstr calls copyinstr to do the hardwork.copyinstr (kernel/vm.c:415) copies up to max bytes to dst from virtual address srcva inthe user page table pagetable. Since pagetable is not the current page table, copyinstruses walkaddr (which calls walk) to look up srcva in pagetable, yielding physical addresspa0. The kernel’s page table maps all of physical RAM at virtual addresses that are equal to theRAM’s physical address. This allows copyinstr to directly copy string bytes from pa0 to dst.walkaddr (kernel/vm.c:109) checks that the user-supplied virtual address is part of the process’s user address space, so programs cannot trick the kernel into reading other memory. A similarfunction, copyout, copies data from the kernel to a user-supplied address. 4.5 Traps from kernel spaceXv6 handles traps from kernel code in a different way than traps from user code. When enteringthe kernel, usertrap points stvec to the assembly code at kernelvec (kernel/kernelvec.S:12).Since kernelvec only executes if xv6 was already in the kernel, kernelvec can rely onsatp being set to the kernel page table, and on the stack pointer referring to a valid kernel stack.kernelvec pushes all 32 registers onto the stack, from which it will later restore them so thatthe interrupted kernel code can resume without disturbance.kernelvec saves the registers on the stack of the interrupted kernel thread, which makessense because the register values belong to that thread. This is particularly important if the trapcauses a switch to a different thread – in that case the trap will actually return from the stack of thenew thread, leaving the interrupted thread’s saved registers safely on its stack.kernelvec jumps to kerneltrap (kernel/trap.c:135) after saving registers. kerneltrapis prepared for two types of traps: device interrupts and exceptions. It calls devintr (kernel/-trap.c:185) to check for and handle the former. If the trap isn’t a device interrupt, it must be anexception, and that is always a fatal error if it occurs in the xv6 kernel; the kernel calls panic andstops executing.If kerneltrap was called due to a timer interrupt, and a process’s kernel thread is running(as opposed to a scheduler thread), kerneltrap calls yield to give other threads a chance torun. At some point one of those threads will yield, and let our thread and its kerneltrap resumeagain. Chapter 7 explains what happens in yield.When kerneltrap’s work is done, it needs to return to whatever code was interruptedby the trap. Because a yield may have disturbed sepc and the previous mode in sstatus,kerneltrap saves them when it starts. It now restores those control registers and returns tokernelvec (kernel/kernelvec.S:38). kernelvec pops the saved registers from the stack and ex-ecutes sret, which copies sepc to pc and resumes the interrupted kernel code.It’s worth thinking through how the trap return happens if kerneltrap called yield due toa timer interrupt.Xv6 sets a CPU’s stvec to kernelvec when that CPU enters the kernel from user space;you can see this in usertrap (kernel/trap.c:29). There’s a window of time when the kernel hasstarted executing but stvec is still set to uservec, and it’s crucial that no device interrupt occurduring that window. Luckily the RISC-V always disables interrupts when 4.6 Page-fault exceptions4.7 Real world4.8 Exercises","link":"/post/xv6-riscv-ch4.html"},{"title":"xv6-riscv_struct","text":"File structure of xv6-riscv 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475.├── kernel│ ├── bio.c│ ├── buf.h│ ├── console.c│ ├── defs.h│ ├── elf.h│ ├── entry.S│ ├── exec.c│ ├── fcntl.h│ ├── file.c│ ├── file.h│ ├── fs.c│ ├── fs.h│ ├── kalloc.c│ ├── kernel.ld│ ├── kernelvec.S│ ├── log.c│ ├── main.c│ ├── memlayout.h│ ├── param.h│ ├── pipe.c│ ├── plic.c│ ├── printf.c│ ├── proc.c│ ├── proc.h│ ├── riscv.h│ ├── sleeplock.c│ ├── sleeplock.h│ ├── spinlock.c│ ├── spinlock.h│ ├── start.c│ ├── stat.h│ ├── string.c│ ├── swtch.S│ ├── syscall.c│ ├── syscall.h│ ├── sysfile.c│ ├── sysproc.c│ ├── trampoline.S│ ├── trap.c│ ├── types.h│ ├── uart.c│ ├── virtio_disk.c│ ├── virtio.h│ └── vm.c├── LICENSE├── Makefile├── mkfs│ └── mkfs.c├── README└── user ├── cat.c ├── echo.c ├── forktest.c ├── grep.c ├── grind.c ├── init.c ├── initcode.S ├── kill.c ├── ln.c ├── ls.c ├── mkdir.c ├── printf.c ├── rm.c ├── sh.c ├── stressfs.c ├── ulib.c ├── umalloc.c ├── user.h ├── user.ld ├── usertests.c ├── usys.pl ├── wc.c └── zombie.c 逐文件详细解读它们的作用、重要性： 🧠 整体结构 目录/文件 作用 建议重点关注 kernel/ xv6 核心实现，内核源码 ✅ 必看 user/ 用户态程序、测试程序、库 ✅ 推荐 mkfs/ 构建文件系统镜像工具 ❗可选 顶层构建文件 Makefile, README, LICENSE 等 🧩 熟悉结构用 📁 kernel/ — xv6 的心脏（重点模块）xv6 主要模块可分为： 内核启动与内存管理：entry.S、start.c、vm.c、kalloc.c 中断、异常、系统调用：trap.c、syscall.c、kernelvec.S、trampoline.S 进程调度与管理：proc.c、swtch.S 文件系统与文件接口：fs.c、file.c、bio.c、log.c 设备驱动：uart.c、console.c、virtio_disk.c、plic.c 内核工具代码：spinlock.c、sleeplock.c、printf.c、string.c 🧾 文件级详细解释（按子系统分类） 🟩 一、内核启动与内存管理 文件 作用 说明 entry.S 核心启动汇编入口 设置页表、跳转到 start() start.c C 语言入口 main() 前做环境初始化（页表、trapframe） main.c 内核主函数 启动内核模块，如 userinit() kernel.ld 内核链接脚本 指定内核段地址、符号导出顺序 vm.c 虚拟内存系统 页表分配、拷贝、映射（基于 Sv39） kalloc.c 物理页分配器 管理空闲页链表，用于 allocuvm memlayout.h 内存布局宏 定义 KERNBASE、PHYSTOP 等常量 📌 建议从 entry.S → start.c → main.c → userinit() 跑一遍流程。 🟦 二、进程管理与调度 文件 作用 说明 proc.c 管理进程表、fork/wait scheduler() 是调度器核心 proc.h 进程结构体定义 结构体 struct proc 包含页表、状态、trapframe swtch.S 上下文切换汇编 保存/恢复寄存器，调度必用 trap.c trap/中断入口 用户 → 内核的总入口；异常调度、syscall 都走它 sysproc.c 与进程相关的系统调用 sys_exit、sys_fork、sys_wait 📌 强烈建议：给 fork()、scheduler()、yield() 加打印观察运行。 🟨 三、系统调用机制 文件 作用 说明 syscall.c syscall 分发器 根据 syscall num 分发到 sys_* syscall.h syscall 编号 用 #define SYS_write 1 等映射 sysfile.c 文件相关 syscall open/close/read/write 的内核实现 usys.pl → usys.S 用户态 syscall 包装 生成用户代码 mov a7, id; ecall 📌 syscall 流程 = 用户态 ecall → trap → syscall.c → sys_*() 🟧 四、文件系统与 I/O 接口 文件 作用 说明 fs.c inode 层 ialloc, readi, writei，文件核心结构 fs.h inode 定义 struct inode，块地址信息等 file.c 文件描述符层 struct file，管理 open/close 等 file.h 文件描述符定义 支持 pipe/dev/inode 等类型 bio.c 缓存块读写 实现 block 级读写缓存 log.c 日志机制 crash-safe 写操作事务（write-ahead logging） pipe.c 管道实现 内存中双向 FIFO fcntl.h, stat.h POSIX 相关头文件 用于 open flag、stat 结构体 📌 建议调试 fs.c 的 namei()、dirlookup()，看路径如何被解析。 🟥 五、设备驱动与中断控制 文件 作用 说明 uart.c 串口驱动 初始化串口，写入字符给终端 console.c 控制台 I/O 与 UART 配合实现 shell 输入输出 plic.c 中断控制器 Platform-Level Interrupt Controller virtio_disk.c 虚拟磁盘驱动 QEMU 虚拟磁盘硬件访问层 virtio.h virtio 设备定义 配套数据结构 📌 virtio_disk.c 调试方法：观察 virtio_rw() 实现的读写逻辑。 🟫 六、工具类 / 内核库函数 文件 作用 说明 defs.h 内核函数声明 extern 所有模块函数，供全局使用 riscv.h RISC-V CSR 宏、寄存器定义 包含 rdtime, csrr, sstatus 等 spinlock.c/.h 自旋锁实现 核心互斥机制，需关中断 sleeplock.c/.h 睡眠锁实现 用于文件系统，sleep/wakeup 管理 string.c libc 实现 memcpy, strlen 等内核自带函数 printf.c 内核级 printf 用于调试打印，无缓冲版 param.h 系统参数宏 定义 NPROC, MAXPATH 等全局参数 types.h 常用类型定义 uchar, uint, sint 等简写 📌 常用 grep 命令：grep -rn &quot;spin_lock&quot; kernel/ 追踪并发点 📁 user/ — 用户态程序与测试 文件 作用 说明 *.c 命令程序 shell 命令如 ls, cat, echo, sh 等 init.c 首个用户进程 userinit() 启动的程序，运行 /init initcode.S 最原始的用户态代码 由 userinit() 载入的程序（汇编） ulib.c libc 函数 用户态的 malloc, printf 等 umalloc.c malloc 实现 用户态堆分配 usertests.c 用户态测试集 测试 syscall、进程、文件功能 user.ld 用户态链接脚本 控制用户程序的段分布 user.h 函数声明 供用户程序引用 printf, fork 等接口 📌 强烈推荐你从 init.c 开始 debug，第一个用户进程的运行关键路径！ 📁 mkfs/ — 构建文件系统镜像工具 文件 说明 mkfs.c 构建 xv6 文件系统镜像（user/init 等文件压入） 📌 不看也无妨，用于 make 阶段构建 fs.img 📄 顶层文件 文件 说明 Makefile 编译入口，构建 kernel, fs.img, qemu 等 README 简要说明文档，讲解如何使用 LICENSE 授权条款（MIT） ✅ 总结 用 模块化思维 分阶段学，比如 “先把 trap 理清楚”，再看 syscall。 推荐搭配如下工具： tmux zsh grep…","link":"/post/xv6-riscv-struct.html"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"riscv","slug":"riscv","link":"/tags/riscv/"},{"name":"xv6-riscv","slug":"xv6-riscv","link":"/tags/xv6-riscv/"}],"categories":[],"pages":[{"title":"","text":"Troy's Blog >>> 欢迎交换友链~ 请通过邮件联系我。","link":"/friend/index.html"}]}