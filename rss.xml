<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GoKo&#39;s blog</title>
    <link>https://GoKo-Son626.github.io/</link>
    
    <atom:link href="https://goko-son626.github.io/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 27 May 2025 11:05:07 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>IIC</title>
      <link>https://goko-son626.github.io/post/wds-IIC.html</link>
      <guid>https://goko-son626.github.io/post/wds-IIC.html</guid>
      <pubDate>Sun, 25 May 2025 02:02:38 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;hr&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><hr></li></ul><span id="more"></span><h1 id="EEPROM-IIC"><a href="#EEPROM-IIC" class="headerlink" title="EEPROM(IIC)"></a>EEPROM(IIC)</h1><ul><li>ROM(Read Only Memory): 制造和升级不便</li><li>PROM(Programmable ROM): 但是只能写入一次，后续无法修改</li><li>EPROM(Erasable Programmable ROM): 紫外线透过玻璃窗口照射内部芯片就可以擦除其内部的数据</li><li>EEPROM: 带电可擦除可编程只读存储器，以电子信号来修改其内容，它属于双电压芯片。借助于EEPROM芯片的双电压特性，可以使BIOS具有良好的防毒功能，在升级时，把跳线开关打至“on”的位置，即给芯片加上相应的编程电压，就可以方便地升级；平时使用时，则把跳线开关打至“off”的位置，防止CIH类的病毒对BIOS芯片的非法修改。</li></ul><p>读取IIC设备：</p><ul><li>控制器</li><li>设备地址：根据芯片手册和模块原理图查询<br>查找IIC设备：i2cdetect -y 0&#x2F;1&#x2F;2…</li></ul><ul><li><p><strong>Platform 总线 (Platform Bus):</strong></p><ul><li><strong>特点:</strong> 这是一种虚拟总线，用于连接那些没有硬件总线（如PCI、USB等）但又需要与CPU直接通信的设备。这些设备通常是SoC（System on Chip）内部的各种控制器，例如GPIO控制器、UART、SPI、I2C控制器本身等等。</li><li><strong>作用:</strong> 它提供了一种统一的机制来管理和抽象这些片上设备，使得驱动开发者不需要关心具体的硬件地址和中断号，而是通过 Platform 总线提供的接口来注册和操作设备。</li><li><strong>原理:</strong> Platform 设备和 Platform 驱动通过 <code>platform_device</code> 和 <code>platform_driver</code> 结构体进行描述。当设备和驱动的名称匹配时，内核就会将它们关联起来。</li><li><strong>匹配过程:</strong> 通常是基于 <code>name</code> 字段的字符串匹配。<code>platform_device</code> 中的 <code>name</code> 字段与 <code>platform_driver</code> 中 <code>driver.name</code> 字段进行比较。如果匹配成功，就会调用驱动的 <code>probe</code> 函数。</li></ul></li><li><p><strong>I2C 总线 (I2C Bus):</strong></p><ul><li><strong>特点:</strong> I2C 是一种串行通信协议，用于连接低速外设，如传感器、EEPROM、实时时钟 (RTC) 等。在 Linux 中，I2C 总线管理着I2C控制器和I2C从设备。</li><li><strong>作用:</strong> 它为I2C设备提供了一套标准的API，使得驱动开发者可以方便地读写I2C设备寄存器，而无需关心I2C协议的底层细节。</li><li><strong>原理:</strong> I2C 总线包含I2C适配器（I2C Adapter，即I2C控制器）和I2C客户端（I2C Client，即I2C从设备）。适配器提供I2C通信能力，客户端则代表具体的I2C设备。</li><li><strong>匹配过程:</strong> I2C设备的匹配通常有两种方式：<ul><li><strong>基于名称匹配:</strong> <code>i2c_client</code> 中的 <code>name</code> 字段与 <code>i2c_driver</code> 中的 <code>id_table</code> 里的 <code>name</code> 字段进行匹配。</li><li><strong>基于compatible字符串匹配 (更常用和推荐):</strong> <code>i2c_client</code> 中的 <code>of_node-&gt;compatible</code> 属性与 <code>i2c_driver</code> 中的 <code>of_match_table</code> 里的 <code>compatible</code> 字符串进行匹配。这种方式常用于设备树 (Device Tree) 中。</li></ul></li></ul></li></ul><p>除了这两者，还有：</p><ul><li><strong>PCI 总线 (PCI Bus):</strong> 用于连接高性能外设，如显卡、网卡、声卡等。</li><li><strong>USB 总线 (USB Bus):</strong> 用于连接各种USB设备，如U盘、键盘、鼠标、摄像头等。</li><li><strong>SPI 总线 (SPI Bus):</strong> 另一种串行通信协议，常用于连接传感器、FLASH存储器等。</li><li><strong>MMC&#x2F;SD 总线 (MMC&#x2F;SD Bus):</strong> 用于连接SD卡、eMMC存储器等。</li><li><strong>Input 总线 (Input Bus):</strong> 用于管理各种输入设备，如键盘、鼠标、触摸屏等。</li><li><strong>等等…</strong></li></ul><h3 id="2-它们之间有什么区别和联系？都有什么用？原理是什么？"><a href="#2-它们之间有什么区别和联系？都有什么用？原理是什么？" class="headerlink" title="2. 它们之间有什么区别和联系？都有什么用？原理是什么？"></a>2. 它们之间有什么区别和联系？都有什么用？原理是什么？</h3><p><strong>区别：</strong></p><ul><li><strong>物理特性:</strong><ul><li><strong>I2C:</strong> 是一种串行通信协议，有SDA（数据线）和SCL（时钟线）两根线。</li><li><strong>Platform:</strong> 是一种虚拟总线，没有对应的物理连接线，它抽象的是CPU内部或直接连接到CPU的设备。</li><li><strong>其他总线 (PCI, USB等):</strong> 都有各自的物理连接方式和通信协议。</li></ul></li><li><strong>设备类型:</strong><ul><li><strong>I2C:</strong> 专注于低速外设。</li><li><strong>Platform:</strong> 专注于SoC内部或直接连接的片上设备。</li><li><strong>PCI:</strong> 专注于高性能、高带宽设备。</li><li><strong>USB:</strong> 专注于即插即用、通用性强的设备。</li></ul></li></ul><p><strong>联系：</strong></p><ul><li><strong>统一的设备模型:</strong> 尽管有各种不同的总线，但 Linux 内核提供了一个统一的设备模型 (Device Model)。这个模型的目标是将设备和驱动进行分离，实现通用化和可移植性。</li><li><strong>Bus-Device-Driver 架构:</strong> 所有的总线都遵循 Bus-Device-Driver 架构。<ul><li><strong>Bus (总线):</strong> 负责管理其上的设备和驱动，提供匹配机制。</li><li><strong>Device (设备):</strong> 代表具体的硬件设备，包含设备的各种信息（地址、中断号、名称、ID等）。</li><li><strong>Driver (驱动):</strong> 负责与特定类型的设备进行交互，实现设备的各种功能。</li></ul></li><li><strong>Client-Driver 适配:</strong> 你说的没错！无论是 I2C、Platform 还是其他总线，它们的核心都是 <strong>Client (设备) 和 Driver (驱动) 进行适配</strong>。这里的 “Client” 对应于 “Device”。</li></ul><p><strong>都有什么用？</strong></p><ul><li><strong>抽象硬件差异:</strong> 不同的总线屏蔽了底层硬件的复杂性，提供统一的编程接口。</li><li><strong>代码复用:</strong> 驱动可以独立于具体的硬件平台开发，只要设备模型支持，就可以在不同的平台上运行。</li><li><strong>模块化管理:</strong> 允许设备和驱动作为独立的模块加载和卸载，提高了系统的灵活性。</li><li><strong>即插即用 (Plug-and-Play):</strong> 对于PCI、USB等支持热插拔的总线，设备模型可以实现设备的动态识别和加载驱动。</li></ul><p><strong>原理：</strong></p><p>Linux 设备模型的核心思想是 <strong>“将设备和驱动分离”</strong>。它通过 <code>struct device</code> 和 <code>struct device_driver</code> 这两个核心结构体来表示设备和驱动。</p><ul><li><strong><code>struct bus_type</code>:</strong> 定义了总线的属性和操作，包括设备的注册、驱动的注册、设备的遍历、驱动的匹配函数等。</li><li><strong><code>struct device</code>:</strong> 代表一个具体的硬件设备。它包含设备的通用属性（如名称、父设备、设备树节点等），以及特定总线的私有数据。</li><li><strong><code>struct device_driver</code>:</strong> 代表一个设备驱动。它包含驱动的通用属性（如名称、驱动所支持的设备ID表），以及驱动的操作函数（如 <code>probe</code>、<code>remove</code> 等）。</li></ul><p>当一个设备被注册到总线上时，总线会遍历所有已注册的驱动，尝试找到能够与该设备匹配的驱动。一旦匹配成功，就会调用驱动的 <code>probe</code> 函数来初始化设备。</p><h3 id="3-驱动不就是一份代码吗？为什么还有driver的代码和client的代码，两份？"><a href="#3-驱动不就是一份代码吗？为什么还有driver的代码和client的代码，两份？" class="headerlink" title="3. 驱动不就是一份代码吗？为什么还有driver的代码和client的代码，两份？"></a>3. 驱动不就是一份代码吗？为什么还有driver的代码和client的代码，两份？</h3><p>这是一个很好的问题，也是很多初学者容易混淆的地方。</p><p><strong>驱动 (Driver) 确实是“一份代码”，但这份代码是为了管理一类特定功能的硬件设备。</strong></p><p>为了实现驱动的通用性和可移植性，Linux 设备模型将驱动分成了两个逻辑部分：</p><ol><li><p><strong>设备 (Device) 的描述代码 (Client&#x2F;Platform Device):</strong></p><ul><li>这部分代码主要负责 <strong>描述硬件设备的信息</strong>，而不是实现设备的功能。它告诉内核：“这里有一个设备，它的类型是什么，它连接在哪个总线上，它的地址是多少，它需要哪些资源（如中断、内存区域）”。</li><li>这部分代码通常位于 <strong>板级文件 (board-specific file)</strong> 或 <strong>设备树 (Device Tree)</strong> 中。</li><li>例如：<ul><li>对于 Platform 设备，你会看到 <code>struct platform_device</code> 的定义，里面包含了设备的名称、资源等。</li><li>对于 I2C 设备，你会看到 <code>struct i2c_client</code> 的定义，或者在设备树中描述I2C设备的节点。</li></ul></li></ul></li><li><p><strong>驱动 (Driver) 的功能实现代码 (Platform Driver&#x2F;I2C Driver):</strong></p><ul><li>这部分代码才是真正意义上的 <strong>“驱动”</strong>。它负责 <strong>实现与特定类型设备进行交互的逻辑</strong>。</li><li>它包含了设备初始化（<code>probe</code> 函数）、数据传输、中断处理、电源管理等核心功能。</li><li>这部分代码通常位于 <strong>独立的驱动文件</strong> 中（例如：<code>drivers/char/xxx.c</code>, <code>drivers/i2c/chips/yyy.c</code>, <code>drivers/platform/zzz.c</code>）。</li><li>例如：<ul><li>对于 Platform 驱动，你会看到 <code>struct platform_driver</code> 的定义，其中包含了 <code>probe</code>、<code>remove</code> 等函数指针。</li><li>对于 I2C 驱动，你会看到 <code>struct i2c_driver</code> 的定义，同样包含 <code>probe</code>、<code>remove</code> 等函数指针。</li></ul></li></ul></li></ol><p><strong>为什么会有两份？</strong></p><ul><li><strong>分离关注点 (Separation of Concerns):</strong><ul><li>将设备描述和驱动功能分离，使得驱动代码更加通用。同一个驱动可以在不同的硬件平台上使用，只要这些平台能够正确描述出该设备。</li><li>板级厂商只需要描述其硬件设备的特性，而驱动开发者可以专注于实现设备功能。</li></ul></li><li><strong>可移植性 (Portability):</strong><ul><li>驱动代码可以独立于具体的硬件平台编译和加载。</li><li>当硬件平台发生变化时，可能只需要修改设备描述部分（如设备树），而无需修改驱动代码本身。</li></ul></li><li><strong>模块化 (Modularity):</strong><ul><li>设备和驱动可以作为独立的模块动态加载和卸载，方便开发和调试。</li></ul></li><li><strong>即插即用 (Plug and Play):</strong><ul><li>当设备被发现时（例如插入USB设备），内核可以根据设备的描述信息自动寻找并加载对应的驱动。</li></ul></li></ul><h3 id="4-Match-的过程是什么样子的呢？"><a href="#4-Match-的过程是什么样子的呢？" class="headerlink" title="4. Match 的过程是什么样子的呢？"></a>4. Match 的过程是什么样子的呢？</h3><p>匹配 (Matching) 是设备模型中最核心的机制之一。当一个设备被注册到总线上时，内核会触发匹配过程，寻找能够驱动该设备的驱动。</p><p><strong>通用匹配流程 (以 Platform 总线为例)：</strong></p><ol><li><strong>设备注册:</strong> 当内核或某个模块发现并注册一个 <code>platform_device</code> 到 <code>platform_bus</code> 上时，匹配过程开始。<ul><li>这通常发生在内核启动时，或者通过设备树动态解析设备。</li><li><code>platform_device_register()</code> 函数会被调用。</li></ul></li><li><strong>遍历驱动:</strong> <code>platform_bus</code> 会遍历所有已经注册到它上面的 <code>platform_driver</code>。</li><li><strong>调用匹配函数:</strong> 对于每一个 <code>platform_driver</code>，总线会调用其内部的 <code>match</code> 函数（对于 Platform 总线，通常是 <code>platform_match()</code>）。</li><li><strong>匹配逻辑:</strong> <code>match</code> 函数会根据预定的规则（通常是名称匹配或 compatible 字符串匹配）来判断当前设备是否与当前驱动兼容。<ul><li><strong>名称匹配:</strong> <code>platform_device-&gt;name == platform_driver-&gt;driver.name</code>。</li><li><strong>设备树 compatible 匹配 (更常用):</strong> <code>platform_device-&gt;of_node-&gt;compatible</code> 属性与 <code>platform_driver-&gt;of_match_table</code> 中的 <code>compatible</code> 字符串进行比较。</li></ul></li><li><strong>成功匹配:</strong> 如果 <code>match</code> 函数返回成功（表示设备和驱动匹配），那么总线就会将该设备与该驱动关联起来。</li><li><strong>调用 <code>probe</code> 函数:</strong> 接着，内核会调用匹配成功的 <code>platform_driver</code> 的 <code>probe</code> 函数。<ul><li><code>probe</code> 函数是驱动的核心，它负责初始化设备、请求资源、注册中断、创建设备节点等等。</li><li>如果 <code>probe</code> 函数成功返回，表示设备驱动加载成功；如果返回错误码，则表示加载失败。</li></ul></li></ol><p><strong>I2C 总线匹配流程：</strong></p><p>I2C 总线的匹配与 Platform 类似，但它有自己的 <code>i2c_bus_type</code> 和匹配函数。</p><ol><li><strong>I2C 适配器注册:</strong> I2C 控制器作为 Platform 设备注册后，其 Platform 驱动会注册 <code>i2c_adapter</code>，这代表了一个可用的 I2C 总线。</li><li><strong>I2C 客户端注册:</strong> I2C 设备的描述（通常在设备树中）被解析后，会创建一个 <code>i2c_client</code> 结构体并将其注册到对应的 <code>i2c_adapter</code> 上。</li><li><strong>遍历 I2C 驱动:</strong> I2C 总线会遍历所有已经注册的 <code>i2c_driver</code>。</li><li><strong>调用匹配函数:</strong> I2C 总线会调用其内部的匹配函数 (<code>i2c_device_match()</code>)。</li><li><strong>匹配逻辑:</strong><ul><li><strong>ID 表匹配:</strong> <code>i2c_driver-&gt;id_table</code> 字段中的 <code>name</code> 成员与 <code>i2c_client-&gt;name</code> 进行匹配。</li><li><strong>设备树 compatible 匹配 (更常用):</strong> <code>i2c_client-&gt;dev.of_node-&gt;compatible</code> 属性与 <code>i2c_driver-&gt;driver.of_match_table</code> 中的 <code>compatible</code> 字符串进行比较。</li></ul></li><li><strong>成功匹配:</strong> 匹配成功后，调用 <code>i2c_driver</code> 的 <code>probe</code> 函数。</li></ol><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li><strong>Linux 设备模型的核心是 Bus-Device-Driver 架构，旨在将设备和驱动分离，实现代码的通用性和可移植性。</strong></li><li><strong>总线 (Bus) 负责管理设备和驱动的注册与匹配。</strong></li><li><strong>设备 (Device&#x2F;Client) 描述了硬件的特性和资源。</strong></li><li><strong>驱动 (Driver) 实现了与设备交互的逻辑。</strong></li><li><strong>匹配过程是总线根据预定的规则（名称或 compatible 字符串）将设备和驱动关联起来的过程，成功后会调用驱动的 <code>probe</code> 函数。</strong></li></ul><p>希望这些解释能帮助你更好地理解 Linux 设备驱动的 Bus-Device-Driver 架构！这是一个值得深入学习的领域，一旦掌握，你会对操作系统如何与硬件交互有更深刻的理解。</p>]]></content:encoded>
      
      
      
      <category domain="https://GoKo-Son626.github.io/tags/linux-dirvers/">linux-dirvers</category>
      
      
      <comments>https://goko-son626.github.io/post/wds-IIC.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Troy-interview</title>
      <link>https://goko-son626.github.io/post/Troy-interview.html</link>
      <guid>https://goko-son626.github.io/post/Troy-interview.html</guid>
      <pubDate>Sat, 24 May 2025 13:26:58 GMT</pubDate>
      
        
        
      <description>&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;1-linux启动&quot;&gt;&lt;a href=&quot;#1-linux启动&quot; class=&quot;headerlink&quot; title=&quot;1. linux启动&quot;&gt;&lt;/a&gt;1. linux启动&lt;/h1&gt;&lt;h3 id=&quot;1-存储介质&quot;&gt;&lt;a</description>
        
      
      
      
      <content:encoded><![CDATA[<span id="more"></span><h1 id="1-linux启动"><a href="#1-linux启动" class="headerlink" title="1. linux启动"></a>1. linux启动</h1><h3 id="1-存储介质"><a href="#1-存储介质" class="headerlink" title="1. 存储介质"></a><strong>1. 存储介质</strong></h3><table><thead><tr><th>SRAM &gt;</th><th>DRAM&gt;&gt;</th><th>ROM</th><th>HDD</th></tr></thead><tbody><tr><td>sram:</td><td>静态随机存取存储器：</td><td>快 成本高:</td><td>用于高速缓存</td></tr><tr><td>dram：</td><td>动态随机存取存储器：</td><td>略慢 成本低：</td><td>内存条</td></tr><tr><td>rom：</td><td>只读存储器：</td><td>掉电不丢失 最慢：</td><td>BIOS&#x2F;UEFI&#x2F;bootloader…</td></tr><tr><td>ram includes sram and dram</td><td></td><td></td><td></td></tr></tbody></table><ul><li><strong>ROM (Read-Only Memory)</strong> 是一种只能读取不能修改的存储器，早期用于存放固定的启动代码。</li><li><strong>NOR Flash</strong> 是一种特殊的闪存，它在存储启动代码方面取代了传统的ROM和一些早期的EEPROM。NOR Flash最大的特点是支持“<strong>执行到位</strong>”（Execute In Place, XIP），这意味着处理器可以直接从NOR Flash中读取并执行代码，而不需要先将代码加载到RAM中。这对于启动过程至关重要。</li><li>在PC上，BIOS (Basic Input&#x2F;Output System) 或更现代的UEFI (Unified Extensible Firmware Interface) 就是存储在主板上的NOR Flash中，负责电脑开机时的自检、硬件初始化以及引导操作系统。</li></ul><p><strong>2. 系统上电</strong></p><ul><li><p>Soc会从固化的启动介质（如SPI NOR&#x2F;NAND:「SPI」是指 Serial Peripheral Interface（串行外设接口），是一种通信总线协议，通常用于连接 Flash 存储器。SPI NOR &#x2F; NAND Flash 是常见的非易失性存储器，上电后Soc中的BootROM会从固化的启动介质（如SPI NOR&#x2F;NAND&#x2F;eMMC&#x2F;SD Card）读取并加载第一阶段的Bootloader， 通常是 SPL（Secondary Program Loader）二级程序加载器。</p><p>   +——————+<br>   |     上电复位     |<br>   +——–+———+<br>        |<br>        v<br>   +——————+<br>   |     执行BootROM      | &lt;– 固化在 SoC 内部的不可修改代码（类似计算机的BIOS ROM）<br>   |                     |<br>   | **核心任务：**      |<br>   |  -&gt; 极简硬件初始化    | (例如：配置时钟、基本GPIO、电源管理单元)<br>   |  -&gt; <strong>初始化SoC内部SRAM</strong> | (这是CPU在外部DRAM可用前的唯一工作内存，容量通常几十到几百KB)<br>   |  -&gt; 配置外部启动设备控制器| (例如：SPI控制器、SD&#x2F;eMMC控制器，以便能从这些设备读取数据)<br>   |                     |<br>   | 从外部启动介质（如 SPI NOR&#x2F;NAND Flash&#x2F;eMMC&#x2F;SD Card） |<br>   | 读取 SPL 的头部或整个 SPL -&gt; <strong>SoC内部SRAM</strong> |<br>   | <strong>解释：</strong>          |<br>   |  *   <strong>SPI NOR Flash：</strong> 理论上支持XIP（Execute In Place），CPU可以直接在其上执行代码。<br>   |      但出于性能、通用性和后续阶段流程的统一性考虑，通常仍会将SPL加载到更快的SoC内部SRAM中执行。<br>   |  *   <strong>NAND Flash&#x2F;eMMC&#x2F;SD Card：</strong> 它们是块设备，<strong>不支持XIP</strong>，因此必须先将SPL<br>   |      （或其一部分）加载到SoC内部SRAM中才能执行。<br>   |  *   <strong>目的：</strong> 提供一个快速、可靠、上电即用的临时工作区，以执行下一阶段的启动代码。<br>   |                                                      &lt;–加载第一阶段Bootloader:SPL:几十KB到几百KB<br>   +——–+———+<br>        |<br>        v<br>        SPL &#x3D; Secondary Program Loader<br>   +——————++————————————————-+<br>   |       执行SPL        |   &lt;– 此时SPL在SoC内部SRAM中运行，执行效率高<br>   |                     |<br>   | **核心任务：**      |<br>   |  -&gt; <strong>初始化外部DRAM控制器和DRAM内存</strong> | (这是SPL最关键的任务，使数GB的主内存可用)<br>   |  -&gt; 初始化更多关键外设    | (例如：USB控制器、UART用于调试、MMC&#x2F;SD控制器等)<br>   |  -&gt; 加载 U-Boot 到外部DRAM | (U-Boot通常较大，需要外部DRAM提供足够空间)<br>   +——–+———+<br>        |<br>        v<br>   +——————+<br>   |   执行U-Boot     | &lt;– 第二阶段 Bootloader，此时已在外部DRAM中运行<br>   |                     |<br>   | **核心任务：**      |<br>   |  -&gt; 初始化更复杂的外设    | (例如：网络、显示、存储设备文件系统等)<br>   |  -&gt; 提供命令行接口        | (供用户交互和调试，如设置环境变量)<br>   |  -&gt; 加载 Linux Kernel、Device Tree Blob (dtb)、 |<br>   |     Initial Ramdisk (initrd) 到外部DRAM   |<br>   |  -&gt; 根据配置，执行 booti&#x2F;bootm 等命令，将控制权移交给Linux内核 |<br>   +——–+———+<br>        |<br>  +———+———-+<br>  | 可选中间阶段（平台相关，如TF-A或OpenSBI） |<br>  |                        | <strong>解释：</strong> 这些阶段通常在U-Boot之前或与U-Boot并行工作，而非严格地在U-Boot之后。<br>  |                        | 它们管理CPU的权限级别和安全状态，在U-Boot或Linux内核之前加载并运行。<br>  |                        | 当U-Boot或Linux内核需要执行安全操作时，会通过EL3的Secure Monitor（ATF）或<br>  |                        | M-mode的SBI（OpenSBI）来完成。<br>  |                        |<br>  | ARM: TF-A (Trusted Firmware-A)   | -&gt; <strong>BL31</strong> (EL3 Secure Monitor) 负责管理安全世界和非安全世界，<br>  |   (包含BL31, BL32)      |    提供PSCI (Power State Coordination Interface)等服务。<br>  |                        | -&gt; <strong>BL32</strong> (EL1 Secure World) 可选，用于运行TEE OS (如OP-TEE)。<br>  |                        | -&gt; <strong>BL33</strong> 通常是U-Boot。如果某些配置中，ATF直接加载Linux内核，<br>  |                        |    则BL33可以指向裸格式的Linux内核镜像。<br>  |                        |<br>  | RISC-V: OpenSBI (M-mode) | -&gt; 提供标准的SBI (Supervisor Binary Interface)，允许操作系统在S-mode<br>  |   (Machine Mode)       |    调用底层硬件功能（如中断处理、定时器、系统关机等）。<br>  |                        | -&gt; <code>fw_payload.elf</code> 通常是OpenSBI和Linux内核的组合，由SPL直接加载并执行。<br>  +———+———-+<br>        |<br>        v<br>   +——————+<br>   |   Linux Kernel   |    &lt;– 操作系统的核心部分<br>   | start_kernel()   |<br>   |  -&gt; 初始化更多硬件     | (例如：驱动程序、文件系统等)<br>   |  -&gt; 初始化内核子系统 | (例如：进程管理、内存管理、调度器等)<br>   |  -&gt; 挂载根文件系统    |<br>   |  -&gt; 启动 init 进程    | (用户空间第一个进程)<br>   +——–+———+<br>        |<br>        v<br>   +——————+<br>   |    &#x2F;sbin&#x2F;init    | &lt;– 用户空间起点，开始加载用户程序和服务<br>   |  用户空间起点     |<br>   +——————+</p></li></ul><table><thead><tr><th align="left">阶段</th><th align="left">权限级别</th><th align="left">世界</th><th align="left">作用</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left"><strong>BL1</strong></td><td align="left">EL3</td><td align="left">Secure</td><td align="left">ROM引导 (Primary Bootloader)</td><td align="left">出厂固化在 SoC 中（如STM32MP157的BootROM），其任务是从外部存储（SPI NOR &#x2F; eMMC &#x2F; SD）中寻找并加载下一阶段的BL2到内部SRAM执行。</td></tr><tr><td align="left"><strong>BL2</strong></td><td align="left">EL3</td><td align="left">Secure</td><td align="left">固件加载器 (Secondary Bootloader)</td><td align="left">由BL1加载并执行，其主要任务是初始化一些必要的硬件，并加载后续的固件（如BL31和BL33）到DRAM，然后将控制权交给它们。STM32MP15 使用 TF-A 的 <code>bl2.bin</code>。</td></tr><tr><td align="left"><strong>BL31</strong></td><td align="left">EL3</td><td align="left">Secure</td><td align="left">安全运行时固件 (Secure Monitor)</td><td align="left">运行在EL3，提供Secure Monitor Call (SMC) 接口，响应来自非安全世界的请求（如系统电源管理PSCI、核间通信、切换安全&#x2F;非安全模式等）。它是管理安全与非安全世界转换的核心。</td></tr><tr><td align="left"><strong>BL32</strong></td><td align="left">Secure World (通常为EL1或EL0)</td><td align="left">Secure</td><td align="left">可选的安全执行环境 (TEE)</td><td align="left">运行在Secure World，通常是一个独立的“迷你操作系统”（如OP-TEE），用于处理敏感操作，如加密、密钥管理、指纹识别等，与主操作系统（非安全世界）隔离。这是一个可选的阶段。</td></tr><tr><td align="left"><strong>BL33</strong></td><td align="left">EL2&#x2F;EL1 (或更低)</td><td align="left">Non-secure</td><td align="left">最终跳转目标</td><td align="left">通常是主操作系统的前导加载器（如U-Boot）或直接就是Linux内核。它运行在非安全世界，负责非安全侧的硬件初始化和加载Linux内核。EL2是管理程序，EL1是操作系统内核。</td></tr></tbody></table><h1 id="2-设备树-Device-Tree-DT"><a href="#2-设备树-Device-Tree-DT" class="headerlink" title="2. 设备树 (Device Tree - DT)"></a>2. 设备树 (Device Tree - DT)</h1><ul><li>设备树是一种用于描述硬件信息的<strong>数据结构</strong>，它以文本形式（DTS）描述了系统中的CPU、内存、总线、各种外设及其连接关系、中断、时钟等所有硬件细节。编译后生成二进制文件（DTB），供引导程序（Bootloader）和内核使用。</li></ul><ul><li><strong>.dts&#x2F;.dtsi -&gt; dtb：</strong> 使用 <code>dtc (Device Tree Compiler)</code> 编译器将设备树源文件 (<code>.dts</code>) 及其包含的片段文件 (<code>.dtsi</code>) 编译成二进制的设备树文件 (<code>.dtb</code>)。这个编译过程是<strong>架构无关</strong>的。</li><li>*<em>通过of_<em>系列API读取信息：</em></em> Linux内核通过一套<code>of_*</code>（Open Firmware）API来解析<code>.dtb</code>文件，并在运行时获取各种硬件信息，供内核子系统和驱动程序使用。</li><li><strong>设备树语言本身是架构无关的：</strong> 无论是ARM、RISC-V、PowerPC、MIPS等任何CPU架构，都可以使用相同的DTS语法来描述硬件。<code>dtc</code>编译器是通用的。</li><li><strong>设备树内容与CPU架构高度相关：</strong> 虽然语法通用，但设备树中描述的<strong>具体硬件信息</strong>（如CPU节点下的ISA扩展、特权模式；中断控制器如RISC-V的PLIC&#x2F;CLINT；内存映射；外设的寄存器地址等）是<strong>与目标CPU架构和SoC设计紧密绑定</strong>的。</li></ul><h3 id="1-设备树结构"><a href="#1-设备树结构" class="headerlink" title="1. 设备树结构"></a>1. 设备树结构</h3><p>一个典型的设备树文件以根节点 <code>/</code> 开始，并包含多个子节点，每个节点代表一个硬件设备或逻辑单元。属性则用于描述设备的具体信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs c">/dts-v1/; <span class="hljs-comment">// 声明设备树语言版本，固定写法</span><br><br><span class="hljs-comment">// 包含文件：通常用于导入SoC厂商提供的芯片级通用设备树定义</span><br><span class="hljs-comment">// 例如：#include &lt;dt-bindings/interrupt-controller/irq.h&gt; // 包含中断控制器宏定义</span><br><span class="hljs-comment">//       #include &quot;riscv_vendor_soc.dtsi&quot; // 假设SoC厂商提供芯片级通用DTSi</span><br><span class="hljs-comment">//       #include &quot;riscv_vendor_board_common.dtsi&quot; // 假设板卡厂商提供公共DTSi</span><br><br>/ &#123;                <span class="hljs-comment">// 根节点，必须有且唯一，代表整个系统</span><br>    compatible = <span class="hljs-string">&quot;your_vendor,your_board_model&quot;</span>, <span class="hljs-string">&quot;vendor,soc_model&quot;</span>, <span class="hljs-string">&quot;generic-platform&quot;</span>; <span class="hljs-comment">// 核心属性，用于板级驱动匹配。</span><br>                        <span class="hljs-comment">// 多个值时按顺序匹配，越具体越靠前。</span><br>    model = <span class="hljs-string">&quot;Your Specific Board Name and Model&quot;</span>; <span class="hljs-comment">// 可读的板子型号名称</span><br>    interrupt-parent = &lt;&amp;plic&gt;; <span class="hljs-comment">// 根节点或总线节点通常会指定其默认的中断控制器</span><br><br>    <span class="hljs-comment">// 定义当前节点及其子节点`reg`属性中地址和长度单元的长度。</span><br>    <span class="hljs-comment">// &lt;1&gt; 表示一个32位单元；&lt;2&gt; 表示一个64位单元。</span><br>    <span class="hljs-meta">#address-cells = <span class="hljs-string">&lt;1&gt;</span>; <span class="hljs-comment">// 用于`reg`属性中物理地址的单元数量</span></span><br>    <span class="hljs-meta">#size-cells = <span class="hljs-string">&lt;1&gt;</span>;    <span class="hljs-comment">// 用于`reg`属性中内存区域大小的单元数量</span></span><br><br>    aliases &#123; <span class="hljs-comment">// 别名节点，为常用设备节点提供短名称，方便访问和引用（例如：/soc/serial@... 可以别名为 serial0）</span><br>        serial0 = &amp;uart0;<br>        spi0 = &amp;spi0_controller;<br>        ethernet0 = &amp;ethernet_mac;<br>        mmc0 = &amp;sd_controller;<br>        <span class="hljs-comment">// ...</span><br>    &#125;;<br><br>    chosen &#123; <span class="hljs-comment">// 用于引导程序（Bootloader）和操作系统内核之间传递参数的节点</span><br>        <span class="hljs-built_in">stdout</span>-path = <span class="hljs-string">&quot;serial0:115200&quot;</span>; <span class="hljs-comment">// 指定内核启动时的控制台输出设备（引用alias）和波特率</span><br>        bootargs = <span class="hljs-string">&quot;console=ttyS0,115200 earlycon root=/dev/mmcblk0p2 rootwait ro&quot;</span>; <span class="hljs-comment">// 传递给内核的启动参数</span><br>        <span class="hljs-comment">// linux,initrd-start = &lt;0x...&gt;; // 可选：指定Initrd的物理内存起始地址</span><br>        <span class="hljs-comment">// linux,initrd-end = &lt;0x...&gt;;   // 可选：指定Initrd的物理内存结束地址</span><br>    &#125;;<br><br>    memory@<span class="hljs-number">80000000</span> &#123; <span class="hljs-comment">// 物理内存区域节点，节点名应包含起始地址</span><br>        device_type = <span class="hljs-string">&quot;memory&quot;</span>; <span class="hljs-comment">// 节点类型，固定为&quot;memory&quot;，表示这是一个内存区域</span><br>        reg = &lt;<span class="hljs-number">0x80000000</span> <span class="hljs-number">0x40000000</span>&gt;; <span class="hljs-comment">// 物理起始地址和大小 (例如：从0x80000000开始，大小1GB)</span><br>                                       <span class="hljs-comment">// 必须与板载DRAM的实际配置相符</span><br>    &#125;;<br><br>    cpus &#123; <span class="hljs-comment">// 定义系统中所有 CPU 核的数量、拓扑、启动方式等</span><br>        <span class="hljs-meta">#address-cells = <span class="hljs-string">&lt;1&gt;</span>; <span class="hljs-comment">// CPU ID的长度（通常是hart ID）</span></span><br>        <span class="hljs-meta">#size-cells = <span class="hljs-string">&lt;0&gt;</span>;    <span class="hljs-comment">// CPU节点通常没有大小信息</span></span><br><br>        cpu0: cpu@<span class="hljs-number">0</span> &#123; <span class="hljs-comment">// 每个CPU核一个节点，节点名通常包含其ID</span><br>            compatible = <span class="hljs-string">&quot;riscv&quot;</span>; <span class="hljs-comment">// RISC-V CPU的通用兼容性</span><br>            device_type = <span class="hljs-string">&quot;cpu&quot;</span>;<br>            reg = &lt;<span class="hljs-number">0</span>&gt;; <span class="hljs-comment">// hart id (硬件线程ID)</span><br>            clock-frequency = &lt;<span class="hljs-number">1000000000</span>&gt;; <span class="hljs-comment">// CPU主频，单位Hz (例如1GHz)</span><br>            riscv,isa = <span class="hljs-string">&quot;rv64imafdc&quot;</span>; <span class="hljs-comment">// RISC-V指令集扩展（例如：64位、整数、乘除、原子、浮点、双精度浮点、压缩指令）</span><br>            riscv,priv-modes = &lt;<span class="hljs-number">0x3</span>&gt;; <span class="hljs-comment">// 支持的特权模式 (M-mode, S-mode)</span><br>            <span class="hljs-comment">// interrupt-controller; // 如果该CPU内部有核心本地中断控制器(CLINT)，可以标记</span><br>            <span class="hljs-comment">// clock-names = &quot;cpu_clk&quot;; // 如果CPU有特定的时钟名称</span><br>            <span class="hljs-comment">// clocks = &lt;&amp;bus_clk&gt;;     // 引用CPU的时钟源</span><br>            <span class="hljs-comment">// d-cache-size = &lt;...&gt;; // L1 D-Cache大小</span><br>            <span class="hljs-comment">// i-cache-size = &lt;...&gt;; // L1 I-Cache大小</span><br>            <span class="hljs-comment">// l2-cache = &lt;&amp;l2_cache&gt;; // 引用L2 Cache节点</span><br>        &#125;;<br>        <span class="hljs-comment">// 如果有多个CPU核（如多核处理器），依此类推：cpu1: cpu@1 &#123; ... &#125;;</span><br>    &#125;;<br><br>    soc &#123;        <span class="hljs-comment">// 通常代表SoC内部的总线或集成外设，作为其他外设的父节点</span><br>        compatible = <span class="hljs-string">&quot;your_vendor,your_soc_model&quot;</span>, <span class="hljs-string">&quot;simple-bus&quot;</span>; <span class="hljs-comment">// SoC总线节点兼容性，&quot;simple-bus&quot;是通用总线</span><br>        <span class="hljs-meta">#address-cells = <span class="hljs-string">&lt;1&gt;</span>;</span><br>        <span class="hljs-meta">#size-cells = <span class="hljs-string">&lt;1&gt;</span>;</span><br>        ranges; <span class="hljs-comment">// 用于地址映射。空值表示子节点地址空间与父节点相同，无需映射。</span><br>                <span class="hljs-comment">// 如果需要地址转换，例如 `ranges = &lt;0x0 0x80000000 0x10000000&gt;;`</span><br>                <span class="hljs-comment">// 解释：子节点地址0x0映射到父节点地址0x80000000，长度0x10000000。</span><br><br>        <span class="hljs-comment">// **RISC-V特定中断控制器节点**</span><br>        plic: interrupt-controller@c000000 &#123; <span class="hljs-comment">// Platform-Level Interrupt Controller (PLIC)</span><br>            compatible = <span class="hljs-string">&quot;riscv,plic0&quot;</span>; <span class="hljs-comment">// 匹配PLIC驱动</span><br>            reg = &lt;<span class="hljs-number">0xc000000</span> <span class="hljs-number">0x4000000</span>&gt;; <span class="hljs-comment">// PLIC寄存器地址范围</span><br>            interrupt-controller; <span class="hljs-comment">// 标记这是一个中断控制器</span><br>            <span class="hljs-meta">#interrupt-cells = <span class="hljs-string">&lt;3&gt;</span>; <span class="hljs-comment">// PLIC需要3个单元：中断类型(1)、中断ID(2)、中断标志(3)</span></span><br>            riscv,max-harts = &lt;<span class="hljs-number">1</span>&gt;; <span class="hljs-comment">// 支持的最大hart数量</span><br>            riscv,ndev = &lt;<span class="hljs-number">64</span>&gt;; <span class="hljs-comment">// 支持的最大设备中断数量</span><br>            <span class="hljs-comment">// 中断类型通常为0表示IRQ，1表示软件中断。</span><br>            <span class="hljs-comment">// 中断标志通常表示中断的触发方式（电平触发/边缘触发、高/低电平）。</span><br>        &#125;;<br><br>        clint: timer@<span class="hljs-number">2000000</span> &#123; <span class="hljs-comment">// Core Local Interruptor (CLINT) - 提供定时器和处理器间中断</span><br>            compatible = <span class="hljs-string">&quot;riscv,clint0&quot;</span>;<br>            reg = &lt;<span class="hljs-number">0x2000000</span> <span class="hljs-number">0x10000</span>&gt;; <span class="hljs-comment">// CLINT寄存器地址范围</span><br>            <span class="hljs-comment">// CLINT通常作为CPU的中断源，不需要#interrupt-cells。</span><br>        &#125;;<br><br>        <span class="hljs-comment">// **UART控制器节点**</span><br>        uart0: serial@<span class="hljs-number">10000000</span> &#123; <span class="hljs-comment">// 节点名称和寄存器物理地址</span><br>            compatible = <span class="hljs-string">&quot;ns16550a&quot;</span>, <span class="hljs-string">&quot;riscv,uart0&quot;</span>; <span class="hljs-comment">// 通用UART驱动匹配字符串，或SoC特定UART兼容字符串</span><br>            reg = &lt;<span class="hljs-number">0x10000000</span> <span class="hljs-number">0x100</span>&gt;; <span class="hljs-comment">// 寄存器基地址和大小</span><br>            interrupts = &lt;<span class="hljs-number">0x4</span>&gt;; <span class="hljs-comment">// 中断号 (具体值取决于中断控制器，通常是中断请求线ID)</span><br>            interrupt-parent = &lt;&amp;plic&gt;; <span class="hljs-comment">// 明确指定中断来源（非必须，但推荐）</span><br>            clocks = &lt;&amp;clk_controller <span class="hljs-number">0</span>&gt;; <span class="hljs-comment">// 引用时钟源（假设clk_controller的第一个时钟）</span><br>            status = <span class="hljs-string">&quot;okay&quot;</span>; <span class="hljs-comment">// 启用设备</span><br>        &#125;;<br><br>        <span class="hljs-comment">// **SPI控制器节点**</span><br>        spi0_controller: spi@<span class="hljs-number">10001000</span> &#123;<br>            compatible = <span class="hljs-string">&quot;spi-controller-compatible&quot;</span>; <span class="hljs-comment">// 匹配SPI主控驱动 (例如 &quot;vendor,spi-v1&quot;)</span><br>            reg = &lt;<span class="hljs-number">0x10001000</span> <span class="hljs-number">0x100</span>&gt;;<br>            interrupts = &lt;<span class="hljs-number">0x5</span>&gt;;<br>            interrupt-parent = &lt;&amp;plic&gt;;<br>            <span class="hljs-meta">#address-cells = <span class="hljs-string">&lt;1&gt;</span>; <span class="hljs-comment">// 定义子设备（SPI从设备）的片选线号</span></span><br>            <span class="hljs-meta">#size-cells = <span class="hljs-string">&lt;0&gt;</span>;    <span class="hljs-comment">// SPI从设备没有大小信息</span></span><br>            status = <span class="hljs-string">&quot;okay&quot;</span>;<br><br>            <span class="hljs-comment">// SPI 从设备节点（例如一个SPI Nor Flash芯片）</span><br>            flash@<span class="hljs-number">0</span> &#123; <span class="hljs-comment">// 节点名通常包含片选号</span><br>                compatible = <span class="hljs-string">&quot;jedec,spi-nor&quot;</span>; <span class="hljs-comment">// 匹配通用SPI Nor Flash驱动</span><br>                reg = &lt;<span class="hljs-number">0</span>&gt;; <span class="hljs-comment">// 片选线号</span><br>                spi-max-frequency = &lt;<span class="hljs-number">50000000</span>&gt;; <span class="hljs-comment">// 最大SPI频率</span><br>            &#125;;<br>        &#125;;<br><br>        <span class="hljs-comment">// **GPIO控制器节点**</span><br>        gpio0: gpio@<span class="hljs-number">10002000</span> &#123;<br>            compatible = <span class="hljs-string">&quot;gpio-controller-compatible&quot;</span>; <span class="hljs-comment">// 匹配GPIO控制器驱动 (例如 &quot;vendor,gpio-v1&quot;)</span><br>            reg = &lt;<span class="hljs-number">0x10002000</span> <span class="hljs-number">0x100</span>&gt;;<br>            gpio-cells = &lt;<span class="hljs-number">2</span>&gt;; <span class="hljs-comment">// 每个GPIO PIN在引用时需要2个单元：PIN号和标志（GPIO_ACTIVE_HIGH/LOW等）</span><br>            interrupt-controller; <span class="hljs-comment">// 如果GPIO控制器也能产生中断</span><br>            <span class="hljs-meta">#interrupt-cells = <span class="hljs-string">&lt;2&gt;</span>; <span class="hljs-comment">// 如果作为中断控制器，需要2个单元：GPIO中断号和标志</span></span><br>            status = <span class="hljs-string">&quot;okay&quot;</span>;<br>        &#125;;<br><br>        <span class="hljs-comment">// **外部连接的LEDs (通过GPIO控制)**</span><br>        leds &#123;<br>            compatible = <span class="hljs-string">&quot;gpio-leds&quot;</span>; <span class="hljs-comment">// 匹配GPIO LED驱动</span><br><br>            led0: led@<span class="hljs-number">0</span> &#123; <span class="hljs-comment">// 节点名和LED索引</span><br>                label = <span class="hljs-string">&quot;system-led&quot;</span>; <span class="hljs-comment">// 用户友好的标签</span><br>                gpios = &lt;&amp;gpio0 <span class="hljs-number">0</span> GPIO_ACTIVE_HIGH&gt;; <span class="hljs-comment">// 引用gpio0控制器，使用GPIO 0，高电平有效</span><br>                <span class="hljs-keyword">default</span>-state = <span class="hljs-string">&quot;off&quot;</span>; <span class="hljs-comment">// 默认开机状态 (&quot;on&quot;, &quot;off&quot;, &quot;keep&quot;, &quot;blinking&quot;)</span><br>            &#125;;<br>            led1: led@<span class="hljs-number">1</span> &#123;<br>                label = <span class="hljs-string">&quot;user-led&quot;</span>;<br>                gpios = &lt;&amp;gpio0 <span class="hljs-number">1</span> GPIO_ACTIVE_LOW&gt;; <span class="hljs-comment">// 使用GPIO 1，低电平有效</span><br>            &#125;;<br>        &#125;;<br><br>        <span class="hljs-comment">// **其他外设...** (如I2C控制器、以太网MAC、MMC/SD控制器、USB控制器、PWM控制器、时钟控制器等)</span><br>        <span class="hljs-comment">// clocks: clock-controller@... &#123; // 时钟控制器节点</span><br>        <span class="hljs-comment">//     compatible = &quot;vendor,clock-controller&quot;;</span><br>        <span class="hljs-comment">//     reg = &lt;...&gt;;</span><br>        <span class="hljs-comment">//     #clock-cells = &lt;1&gt;; // 如果有时钟ID，需要一个单元</span><br>        <span class="hljs-comment">//     // ...</span><br>        <span class="hljs-comment">// &#125;;</span><br><br>        <span class="hljs-comment">// pinctrl@... &#123; // 引脚控制器节点，用于配置引脚复用和电气特性</span><br>        <span class="hljs-comment">//     compatible = &quot;vendor,pinctrl&quot;;</span><br>        <span class="hljs-comment">//     reg = &lt;...&gt;;</span><br>        <span class="hljs-comment">//     pinctrl-names = &quot;default&quot;; // 默认的引脚配置组名称</span><br>        <span class="hljs-comment">//     pinctrl-0 = &lt;&amp;pinmux_group_uart0&gt;; // 引用具体的引脚配置组</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//     pinmux_group_uart0: pinmux-group-uart0 &#123; // 定义引脚配置组</span><br>        <span class="hljs-comment">//         pins = &lt;0 1&gt;; // 具体的引脚编号</span><br>        <span class="hljs-comment">//         // 其他引脚配置，如驱动强度、上拉/下拉等</span><br>        <span class="hljs-comment">//     &#125;;</span><br>        <span class="hljs-comment">// &#125;;</span><br>    &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="2-常用节点-属性"><a href="#2-常用节点-属性" class="headerlink" title="2. 常用节点&#x2F;属性"></a>2. 常用节点&#x2F;属性</h3><table><thead><tr><th align="left">节点&#x2F;属性</th><th align="left">用途 (补充与修正)</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left"><code>compatible</code></td><td align="left"><strong>驱动匹配关键：</strong> 内核和驱动中通过这个字段进行匹配，实现驱动的硬件无关性。多个值时按顺序匹配，越具体越靠前。</td><td align="left"><code>&quot;vendor,device-v1&quot;, &quot;generic-device&quot;</code></td></tr><tr><td align="left"><code>reg</code></td><td align="left"><strong>硬件寄存器地址范围：</strong> 描述设备的物理地址和大小。格式通常为 <code>&lt;起始地址 长度&gt;</code>，单位数量由父节点的<code>#address-cells</code>和<code>#size-cells</code>决定。</td><td align="left"><code>&lt;0x10000000 0x100&gt;</code> (32位地址，长度256字节)</td></tr><tr><td align="left"><code>interrupts</code></td><td align="left"><strong>中断号、触发方式等：</strong> 驱动用来注册中断处理程序。具体含义和单元数量由父中断控制器节点的<code>#interrupt-cells</code>决定。</td><td align="left"><code>&lt;0x4&gt;</code> (单个中断ID)；<code>&lt;0 4 IRQ_TYPE_EDGE_RISING&gt;</code> (RISC-V PLIC中，指定中断类型、ID、标志)</td></tr><tr><td align="left"><code>interrupt-parent</code></td><td align="left"><strong>指定中断控制器：</strong> 明确该设备的中断连接到哪个中断控制器（节点引用）。如果未指定，默认继承父节点。</td><td align="left"><code>&lt;&amp;plic&gt;</code></td></tr><tr><td align="left"><code>#address-cells</code></td><td align="left"><strong>定义子节点地址单元长度：</strong> 决定其子节点<code>reg</code>属性中“地址”部分有多少个32位单元。</td><td align="left"><code>&lt;1&gt;</code> (32位地址)；<code>&lt;2&gt;</code> (64位地址)</td></tr><tr><td align="left"><code>#size-cells</code></td><td align="left"><strong>定义子节点长度单元长度：</strong> 决定其子节点<code>reg</code>属性中“大小”部分有多少个32位单元。</td><td align="left"><code>&lt;1&gt;</code> (32位长度)；<code>&lt;2&gt;</code> (64位长度)</td></tr><tr><td align="left"><code>#interrupt-cells</code></td><td align="left"><strong>定义中断单元长度：</strong> 标记该节点是一个中断控制器，并决定其子设备<code>interrupts</code>属性中中断描述符的单元数量。</td><td align="left"><code>&lt;1&gt;</code> (简单中断ID)；<code>&lt;3&gt;</code> (RISC-V PLIC)</td></tr><tr><td align="left"><code>#gpio-cells</code></td><td align="left"><strong>定义GPIO单元长度：</strong> 标记该节点是一个GPIO控制器，并决定其子设备<code>gpios</code>属性中GPIO描述符的单元数量。</td><td align="left"><code>&lt;2&gt;</code> (GPIO号和标志)</td></tr><tr><td align="left"><code>#clock-cells</code></td><td align="left"><strong>定义时钟单元长度：</strong> 标记该节点是一个时钟控制器，并决定其子设备<code>clocks</code>属性中时钟描述符的单元数量（通常是时钟ID）。</td><td align="left"><code>&lt;1&gt;</code></td></tr><tr><td align="left"><code>clocks</code></td><td align="left"><strong>时钟源引用：</strong> 引用设备所需的一个或多个时钟源（需要配合clk framework使用）。</td><td align="left"><code>&lt;&amp;clk_controller 0&gt;</code></td></tr><tr><td align="left"><code>clock-names</code></td><td align="left"><strong>时钟源名称：</strong> 为<code>clocks</code>属性中引用的时钟源提供名称，当设备需要多个不同功能的时钟时使用。</td><td align="left"><code>&quot;bus&quot;, &quot;peripheral&quot;</code></td></tr><tr><td align="left"><code>pinctrl-names</code></td><td align="left"><strong>引脚配置组名称：</strong> 定义引脚配置的状态名称，例如“default”, “sleep”, “idle”等。</td><td align="left"><code>&quot;default&quot;</code></td></tr><tr><td align="left"><code>pinctrl-0</code>, <code>pinctrl-1</code></td><td align="left"><strong>引脚配置组引用：</strong> 引用具体的引脚配置组（由pinctrl节点中的子节点定义）。<code>pinctrl-0</code>通常是默认配置。</td><td align="left"><code>&lt;&amp;pinmux_group_uart0&gt;</code></td></tr><tr><td align="left"><code>status</code></td><td align="left"><strong>设备启用状态：</strong> <code>&quot;okay&quot;</code>表示启用设备；<code>&quot;disabled&quot;</code>表示禁用设备；<code>&quot;reserved&quot;</code>表示预留。</td><td align="left"><code>&quot;okay&quot;</code></td></tr><tr><td align="left"><code>linux,phandle</code></td><td align="left"><strong>内核内部引用句柄：</strong> 由dtc编译器在编译时自动生成，用于内核内部节点之间的引用，不应手动设置。</td><td align="left">(自动生成)</td></tr><tr><td align="left"><code>ranges</code></td><td align="left"><strong>地址映射：</strong> 定义父子总线之间的地址转换规则。空值表示子节点地址空间与父节点相同，无需映射。</td><td align="left"><code>ranges;</code> 或 <code>&lt;0x0 0x80000000 0x10000000&gt;</code></td></tr><tr><td align="left"><code>device_type</code></td><td align="left"><strong>设备类型：</strong> 特定节点（如<code>memory</code>和<code>cpu</code>）的固定属性，用于标识其类型。</td><td align="left"><code>&quot;memory&quot;</code>, <code>&quot;cpu&quot;</code></td></tr><tr><td align="left"><code>model</code></td><td align="left"><strong>可读型号：</strong> 设备的可读型号描述，通常用于根节点和SoC节点。</td><td align="left"><code>&quot;My Awesome RISC-V Board&quot;</code></td></tr><tr><td align="left"><code>label</code></td><td align="left"><strong>用户友好标签：</strong> 为设备提供一个可读的字符串标签，方便在用户空间或调试时识别。</td><td align="left"><code>&quot;system-led&quot;</code></td></tr><tr><td align="left"><code>gpios</code></td><td align="left"><strong>GPIO引用：</strong> 引用一个或多个GPIO引脚。格式取决于<code>#gpio-cells</code>，通常为 <code>&lt;&amp;gpio_controller gpio_pin_number gpio_flags&gt;</code>。</td><td align="left"><code>&lt;&amp;gpio0 0 GPIO_ACTIVE_HIGH&gt;</code></td></tr><tr><td align="left"><code>default-state</code></td><td align="left"><strong>GPIO LED默认状态：</strong> 对于<code>gpio-leds</code>，定义LED的默认状态。</td><td align="left"><code>&quot;on&quot;</code>, <code>&quot;off&quot;</code>, <code>&quot;blinking&quot;</code>, <code>&quot;keep&quot;</code></td></tr><tr><td align="left"><code>riscv,isa</code></td><td align="left"><strong>RISC-V ISA扩展：</strong> 对于CPU节点，描述RISC-V指令集架构的扩展集合。</td><td align="left"><code>&quot;rv64imafdc&quot;</code></td></tr><tr><td align="left"><code>riscv,priv-modes</code></td><td align="left"><strong>RISC-V特权模式：</strong> 对于CPU节点，描述CPU支持的RISC-V特权模式（M-mode, S-mode, U-mode）。</td><td align="left"><code>&lt;0x3&gt;</code> (表示M-mode和S-mode)</td></tr><tr><td align="left"><code>clock-frequency</code></td><td align="left"><strong>设备工作频率：</strong> 通常用于CPU节点，描述其工作频率。</td><td align="left"><code>&lt;1000000000&gt;</code> (1GHz)</td></tr><tr><td align="left"><code>reserved-memory</code></td><td align="left"><strong>预留内存区域：</strong> 定义内核不应使用的内存段（例如，用于GPU、VPU、DSP或安全区域等）。</td><td align="left">(一个单独的节点，内部定义子节点描述各预留区域)</td></tr><tr><td align="left"><code>dma-names</code>, <code>dmas</code></td><td align="left"><strong>DMA通道引用：</strong> 引用DMA控制器及其通道。</td><td align="left"><code>&lt;&amp;dma_controller 0&gt;</code></td></tr></tbody></table><h3 id="3-拿到一个RISC-V开发板，如何写设备树？"><a href="#3-拿到一个RISC-V开发板，如何写设备树？" class="headerlink" title="3. 拿到一个RISC-V开发板，如何写设备树？"></a>3. 拿到一个RISC-V开发板，如何写设备树？</h3><h4 id="1-阶段一：信息收集与环境准备-地基"><a href="#1-阶段一：信息收集与环境准备-地基" class="headerlink" title="1. 阶段一：信息收集与环境准备 (地基)"></a>1. 阶段一：信息收集与环境准备 (地基)</h4><ul><li><strong>1.1 硬件文档是金：</strong><ul><li><strong>SoC 数据手册&#x2F;参考手册：</strong> 必读！获取所有内部外设（CPU、PLCI、CLINT、UART、SPI、I2C、GPIO等）的<strong>寄存器基地址、中断号、时钟源信息、引脚复用配置</strong>。</li><li><strong>开发板原理图 (Schematic)：</strong> 了解板载DRAM容量、外部Flash型号、以太网PHY、LEDs、Buttons、传感器等<strong>外部设备</strong>如何连接到SoC的特定引脚和接口。</li><li><strong>已有参考：</strong> 查找SoC厂商或开发板厂商提供的<strong>参考设备树文件 (<code>.dtsi</code>&#x2F;<code>.dts</code>)</strong>。这是最快的起点，可以避免从零开始。</li><li><strong>Bootloader 源码：</strong> 查阅U-Boot或其它Bootloader中对硬件的初始化代码，通常能反推出设备树的结构和属性。</li></ul></li><li><strong>1.2 Linux内核文档：</strong><ul><li><code>Linux内核源码/Documentation/devicetree/bindings/</code>：<strong>核心参考！</strong> 这个目录包含了各种标准设备（如GPIO控制器、UART、SPI控制器、PHY、LED等）的绑定规范。它会告诉你某个<code>compatible</code>字符串对应的节点应该有哪些属性，以及这些属性的含义、类型和格式。严格遵循这些绑定规范是确保驱动正常工作的关键。</li></ul></li><li><strong>1.3 工具：</strong> 确保<code>dtc</code>编译器已安装并可用。</li></ul><h4 id="2-阶段二：构建基础设备树框架-骨架"><a href="#2-阶段二：构建基础设备树框架-骨架" class="headerlink" title="2. 阶段二：构建基础设备树框架 (骨架)"></a>2. 阶段二：构建基础设备树框架 (骨架)</h4><ul><li><strong>2.1 创建顶层 <code>.dts</code> 文件：</strong> 通常以板子的名称命名，例如 <code>your_riscv_board.dts</code>。<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-keyword">/dts-v1/</span><span class="hljs-punctuation">;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;riscv_vendor_soc.dtsi&quot;</span> // 引入SoC芯片级的通用定义</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;riscv_vendor_board_common.dtsi&quot;</span> // 引入板级公共定义（如果有）</span><br><br><span class="hljs-title class_">/</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 根节点定义</span><br>    <span class="hljs-attr">compatible</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;your_vendor,your_board_model&quot;</span>, <span class="hljs-string">&quot;vendor,soc_model&quot;</span>, <span class="hljs-string">&quot;simple-bus&quot;</span><span class="hljs-punctuation">;</span><br>    <span class="hljs-attr">model</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;My Custom RISC-V Development Board&quot;</span><span class="hljs-punctuation">;</span><br>    <span class="hljs-meta">#address-cells = &lt;1&gt;; <span class="hljs-comment">// 假设地址是32位</span></span><br>    <span class="hljs-meta">#size-cells = &lt;1&gt;;    <span class="hljs-comment">// 假设大小是32位</span></span><br><br>    <span class="hljs-comment">// 内存节点：根据原理图填写DRAM的实际物理地址和大小</span><br>    <span class="hljs-title class_">memory@80000000</span> <span class="hljs-punctuation">&#123;</span><br>        device_<span class="hljs-attr">type</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;memory&quot;</span><span class="hljs-punctuation">;</span><br>        <span class="hljs-attr">reg</span> <span class="hljs-operator">=</span> <span class="hljs-params">&lt;<span class="hljs-number">0x80000000</span> <span class="hljs-number">0x40000000</span>&gt;</span><span class="hljs-punctuation">;</span> <span class="hljs-comment">// 例如：从0x80000000开始，1GB</span><br>    <span class="hljs-punctuation">&#125;;</span><br><br>    <span class="hljs-comment">// chosen 节点：最关键的调试信息，确保console可用</span><br>    <span class="hljs-title class_">chosen</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">stdout-path</span> <span class="hljs-operator">=</span> <span class="hljs-variable">&amp;uart0</span><span class="hljs-punctuation">;</span> <span class="hljs-comment">// 假设uart0是控制台</span><br>        <span class="hljs-attr">bootargs</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;console=ttyS0,115200 root=/dev/mmcblk0p2 rootwait earlycon&quot;</span><span class="hljs-punctuation">;</span><br>    <span class="hljs-punctuation">&#125;;</span><br><br>    <span class="hljs-title class_">aliases</span> <span class="hljs-punctuation">&#123;</span><br>        serial0 = <span class="hljs-variable">&amp;uart0</span><span class="hljs-punctuation">;</span> <span class="hljs-comment">// 方便chosen节点引用</span><br>        <span class="hljs-comment">// ...</span><br>    <span class="hljs-punctuation">&#125;;</span><br><br>    <span class="hljs-comment">// CPU节点：通常在SoC的dtsi中定义，此处可覆盖或添加属性</span><br>    <span class="hljs-variable">&amp;cpu0</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">clock-frequency</span> <span class="hljs-operator">=</span> <span class="hljs-params">&lt;<span class="hljs-number">1000000000</span>&gt;</span><span class="hljs-punctuation">;</span> <span class="hljs-comment">// 实际的CPU频率</span><br>        <span class="hljs-comment">// ...</span><br>    <span class="hljs-punctuation">&#125;;</span><br><br>    <span class="hljs-comment">// SoC内部外设节点：通过引用dtsi中已有的节点并添加/修改板级特定配置</span><br>    <span class="hljs-comment">// 例如，启用串口0</span><br>    <span class="hljs-variable">&amp;uart0</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">status</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;okay&quot;</span><span class="hljs-punctuation">;</span> <span class="hljs-comment">// 确保启用</span><br>        <span class="hljs-comment">// 如果与dtsi中定义不同，可覆盖reg, interrupts, clocks等</span><br>    <span class="hljs-punctuation">&#125;;</span><br><br>    <span class="hljs-comment">// PLIC/CLINT等中断控制器节点也应在dtsi中被引用和确保启用</span><br>    <span class="hljs-variable">&amp;plic</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">status</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;okay&quot;</span><span class="hljs-punctuation">;</span><br>    <span class="hljs-punctuation">&#125;;</span><br>    <span class="hljs-variable">&amp;clint</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">status</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;okay&quot;</span><span class="hljs-punctuation">;</span><br>    <span class="hljs-punctuation">&#125;;</span><br><br>    <span class="hljs-comment">// ...其他必要的SoC内部模块</span><br><span class="hljs-punctuation">&#125;;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="3-阶段三：逐步添加外设与调试-填充血肉"><a href="#3-阶段三：逐步添加外设与调试-填充血肉" class="headerlink" title="3. 阶段三：逐步添加外设与调试 (填充血肉)"></a>3. 阶段三：逐步添加外设与调试 (填充血肉)</h4><ul><li><strong>3.1 编译DTB：</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dtc -I dts -O dtb -o your_riscv_board.dtb your_riscv_board.dts<br></code></pre></td></tr></table></figure><ul><li><strong>错误处理：</strong> <code>dtc</code>会报告语法错误。确保没有警告或错误。</li></ul></li><li><strong>3.2 集成与启动：</strong><ul><li>将编译好的 <code>your_riscv_board.dtb</code> 文件放置到Bootloader（如U-Boot）能够访问的位置（例如SD卡、TFTP服务器）。</li><li>在U-Boot命令行中，确保正确加载了DTB并将其地址传递给Linux内核：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">fatload mmc 0:1 0x80200000 Image // 加载内核镜像<br>fatload mmc 0:1 0x82000000 your_riscv_board.dtb // 加载设备树<br>setenv bootargs <span class="hljs-string">&quot;console=ttyS0,115000 root=/dev/mmcblk0p2 rootwait&quot;</span> // 设置启动参数<br>booti 0x80200000 - 0x82000000 // 启动内核 (RISC-V booti 命令)<br></code></pre></td></tr></table></figure></li></ul></li><li><strong>3.3 验证与调试（迭代过程）：</strong><ul><li><strong>串口输出：</strong> 内核启动时会打印大量日志，这是验证设备树最直接的方式。关注与你添加的设备相关的行。</li><li><strong><code>dmesg</code>：</strong> 内核启动后，使用 <code>dmesg</code> 命令查看完整的内核日志。搜索你设备的<code>compatible</code>字符串，或者设备名称，看它是否被识别和初始化。</li><li><strong><code>/sys/firmware/devicetree/base/</code>：</strong> 这是设备树在Linux运行时的表现。<ul><li><code>ls -R /sys/firmware/devicetree/base/</code>：查看整个设备树的目录结构。</li><li><code>cat /sys/firmware/devicetree/base/&lt;node_path&gt;/&lt;property_name&gt;</code>：查看特定节点的属性值，验证是否与你DTS中定义的一致。</li></ul></li><li><strong><code>/proc/interrupts</code>：</strong> 检查中断是否正确注册。</li><li><strong><code>/sys/kernel/debug/gpio</code> (需启用debugfs)：</strong> 检查GPIO引脚的状态。</li><li><strong><code>lsmod</code> &#x2F; <code>modprobe</code>：</strong> 尝试手动加载&#x2F;卸载相关驱动模块，观察内核日志。</li><li><strong>逐步排查：</strong><ul><li><strong>如果设备未被识别：</strong> 检查<code>compatible</code>字符串是否与驱动匹配、<code>status = &quot;okay&quot;</code>是否设置、节点路径是否正确。</li><li><strong>如果设备被识别但功能异常：</strong> 检查<code>reg</code>地址和大小是否正确、<code>interrupts</code>中断号和标志是否正确、<code>clocks</code>是否引用了正确的时钟源且已启用、<code>gpios</code>引用是否准确。</li><li><strong>最常见问题：</strong> 地址、中断、时钟和GPIO的配置错误。</li><li><strong>查阅绑定文档：</strong> 再次强调，遇到问题时，<code>Documentation/devicetree/bindings/</code>目录下的官方绑定文档是解决问题的关键。它详细说明了每个属性的语义和期望值。</li></ul></li></ul></li></ul><h4 id="4-阶段四：高级配置与完善-优化"><a href="#4-阶段四：高级配置与完善-优化" class="headerlink" title="4. 阶段四：高级配置与完善 (优化)"></a>4. 阶段四：高级配置与完善 (优化)</h4><ul><li><strong>引脚复用 (Pinmux)：</strong> 根据SoC的pinctrl驱动和原理图，添加pinctrl节点及其子节点，定义不同的引脚复用组，并在设备节点中通过<code>pinctrl-names</code>和<code>pinctrl-0</code>等属性引用。这是确保引脚功能正确的关键。</li><li><strong>电源管理与时钟门控：</strong> 添加<code>power-domains</code>、<code>clocks</code>、<code>clock-names</code>等属性，配合内核的电源管理和时钟框架，实现设备的低功耗和性能调优。</li><li><strong>DMA配置：</strong> 为需要DMA（Direct Memory Access）的设备（如USB、Ethernet）添加<code>dmas</code>和<code>dma-names</code>属性，引用DMA控制器和通道。</li><li><strong>复杂总线：</strong> 对于I2C、SPI等总线，如果连接了多个从设备，需要在其控制器节点下添加子节点。</li><li><strong>错误处理：</strong> 如果某个设备无法正常工作，应先排除设备树配置问题，再考虑驱动或硬件问题。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">/dts-v1/;<br>/ &#123;                <span class="hljs-comment">// 定义板子整体的模型、兼容性</span><br>    compatible = <span class="hljs-string">&quot;xxx&quot;</span>;<br>    model = <span class="hljs-string">&quot;xxx board&quot;</span>;<br><br>    memory &#123; ... &#125;;<span class="hljs-comment">// 定义物理内存区域</span><br>    cpus &#123; ... &#125;;<span class="hljs-comment">// 定义所有 CPU 核的数量、拓扑、启动方式等</span><br>    chosen &#123; ... &#125;;     <span class="hljs-comment">// 内核启动参数、console、initrd 地址等</span><br><br>    soc &#123;        <span class="hljs-comment">// 芯片内部挂载的所有外设（UART、SPI 等）</span><br>        serial@xxxx &#123; ... &#125;;<br>        i2c@xxxx &#123; ... &#125;;<br>        spi@xxxx &#123; ... &#125;;<br>    &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><table><thead><tr><th>节点&#x2F;属性</th><th>用途</th></tr></thead><tbody><tr><td><code>compatible</code></td><td>驱动匹配关键：驱动中会通过这个字段绑定</td></tr><tr><td><code>reg</code></td><td>硬件寄存器地址范围（告诉驱动怎么访问）</td></tr><tr><td><code>interrupts</code></td><td>中断号、触发方式等（驱动用来注册 handler）</td></tr><tr><td><code>clocks</code></td><td>时钟源、速率（需要配合 clk framework 使用）</td></tr><tr><td><code>pinctrl-0</code></td><td>使用哪组 pinmux 设置</td></tr><tr><td><code>status = &quot;okay&quot;</code></td><td>是否启用设备</td></tr><tr><td><code>linux,phandle</code></td><td>内核内部处理引用的句柄</td></tr><tr><td><code>&amp;aliases</code></td><td>给节点起别名（影响路径）</td></tr><tr><td><code>reserved-memory</code></td><td>定义内核不能用的内存段（比如给 VPU、TPU）</td></tr></tbody></table><h1 id="3-platform-device-platform-driver-platform-bus"><a href="#3-platform-device-platform-driver-platform-bus" class="headerlink" title="3. platform_device &#x2F; platform_driver &#x2F; platform_bus"></a>3. platform_device &#x2F; platform_driver &#x2F; platform_bus</h1><ul><li>设备（platform_device）和驱动（platform_driver）都注册到了 platform_bus 上。</li><li>当它们都出现时，调用总线的 match() 方法：<ul><li>比较设备名 vs 驱动名（pdev-&gt;name &#x3D;&#x3D; pdrv-&gt;name）<ul><li>匹配成功 → 调用 driver.probe()，开始驱动设备。</li></ul></li></ul></li><li>每个设备或驱动都会挂到一条总线上，platform_device&#x2F;driver是挂到了虚拟的platform_bus上，当有驱动模块插入或者设备创建的时候，就会去调用bus-&gt;match，如果匹配就会调用到probe</li></ul><p><strong>LED 驱动的简化写法</strong></p><pre><code>    设备树片段：</code></pre><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-title class_">led@40000000</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">compatible</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;goko,led&quot;</span><span class="hljs-punctuation">;</span><br>        <span class="hljs-attr">reg</span> <span class="hljs-operator">=</span> <span class="hljs-params">&lt;<span class="hljs-number">0x40000000</span> <span class="hljs-number">0x1000</span>&gt;</span><span class="hljs-punctuation">;</span><br><span class="hljs-punctuation">&#125;;</span><br></code></pre></td></tr></table></figure><pre><code>    驱动代码：</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">led_probe</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> platform_device *pdev)</span><br>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">resource</span> *<span class="hljs-title">res</span> =</span> platform_get_resource(pdev, IORESOURCE_MEM, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">void</span> __iomem *base = devm_ioremap_resource(&amp;pdev-&gt;dev, res);<br>        <span class="hljs-comment">// 注册中断/初始化硬件...</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">of_device_id</span> <span class="hljs-title">led_of_match</span>[] =</span> &#123;<br>        &#123; .compatible = <span class="hljs-string">&quot;goko,led&quot;</span>, &#125;,<br>        &#123;&#125;,<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">platform_driver</span> <span class="hljs-title">led_driver</span> =</span> &#123;<br>        .probe = led_probe,<br>        .driver = &#123;<br>                .name = <span class="hljs-string">&quot;goko_led&quot;</span>,<br>                .of_match_table = led_of_match,<br>        &#125;,<br>&#125;;<br><br>module_platform_driver(led_driver);<br></code></pre></td></tr></table></figure><h1 id="4-中断处理流程-从硬件中断到ISR"><a href="#4-中断处理流程-从硬件中断到ISR" class="headerlink" title="4. 中断处理流程(从硬件中断到ISR)"></a>4. 中断处理流程(从硬件中断到ISR)</h1><ul><li>中断产生</li><li>响应中断<ul><li>保存当前上下文</li><li>调转到中断入口（中断向亮表）</li><li>进入trap流程，riscv是stvec</li></ul></li><li>GIC&#x2F;PLIC识别中断来源</li><li>linux调用handle_irq</li><li>最终调用驱动注册的irq</li></ul><p>结合RISC-V的架构特性（如<code>stvec</code>、<code>scause</code>、PLIC中断控制器）和Linux内核的通用中断子系统来描述。</p><p><strong>核心概念：</strong></p><ul><li><strong>中断 (Interrupt):</strong> 外部设备或定时器发出的异步信号，请求CPU的注意和处理。</li><li><strong>异常 (Exception):</strong> CPU执行指令时遇到的同步事件（如缺页、非法指令、除以零）。</li><li><strong>Trap:</strong> RISC-V中用于统称中断和异常的术语。CPU遇到Trap时会暂停当前执行，跳转到特定的处理入口。</li><li><strong>PLIC (Platform-Level Interrupt Controller):</strong> RISC-V系统中常见的外部中断控制器，负责接收来自各个设备的物理中断信号，进行优先级排序、屏蔽，并将最高优先级的中断信号送往CPU。</li><li><strong>ISR (Interrupt Service Routine):</strong> 驱动程序中注册的函数，用于处理特定硬件设备产生的中断。通常分为”上半部”（中断处理函数本身，要求快、原子）和”下半部”（延迟处理，如Tasklet、Workqueue）。</li></ul><p><strong>中断处理详细流程：</strong></p><ol><li><p><strong>硬件中断产生 (Hardware Interrupt Generation)</strong></p><ul><li>某个外部硬件设备（如网卡收到数据、磁盘完成读写、定时器到期）需要CPU处理，它会断言（拉高或改变状态）其连接到中断控制器的<strong>物理中断线</strong>。例如：网卡收到数据后，其内部控制器发出一个中断请求信号到连接它的PLIC引脚。</li></ul></li><li><p><strong>中断控制器 (PLIC) 接收并仲裁 (PLIC Receives and Arbitrates)</strong></p><ul><li>PLIC接收到来自一个或多个设备的物理中断信号。它会根据预设的优先级和使能状态，选择当前最高优先级的、已使能的中断。</li><li><strong>PLIC 动作:</strong><ul><li>接收来自设备的物理中断。</li><li>查找该中断源的优先级和使能状态（通过读写PLIC的寄存器配置）。</li><li>如果该中断已使能且优先级高于当前CPU正在处理的或PLCT声明（Claim）的优先级，PLIC会向连接的CPU核心发送一个中断信号（通常是断言CPU的中断输入线，对于Supervisor模式，是Supervisor External Interrupt，通过<code>scause</code>体现为某个特定的值）。</li><li>该信号最终会反映在CPU的<code>sip</code> (Supervisor Interrupt Pending) 寄存器的对应位上。对于外部中断，是<code>sip.SEIP</code>位。</li></ul></li></ul></li><li><p><strong>CPU检测到中断并响应 (CPU Detects and Responds to Interrupt)</strong></p><ul><li>CPU在执行完当前指令后，会检查中断是否发生以及是否被当前CPU模式（这里是Supervisor模式，S-mode）所屏蔽。</li><li><strong>检查条件:</strong><ul><li>全局中断使能：<code>sstatus</code>寄存器的<code>SIE</code>位必须为1。</li><li>中断委托：该中断源必须被委托给S模式处理（<code>sedeleg</code>寄存器中对应位为1）。PLIC外部中断通常是委托给S模式的。</li><li>中断挂起：<code>sip</code>寄存器中对应中断的挂起位必须为1 (<code>sip.SEIP</code>)。</li><li>优先级：如果RISC-V实现了中断优先级，挂起中断的优先级必须高于当前CPU的优先级阈值。</li></ul></li><li>如果满足以上条件，CPU会暂停当前程序执行。这是一个硬件自动完成的过程。</li></ul></li><li><p><strong>硬件保存部分上下文 (Hardware Saves Partial Context)</strong></p><ul><li><strong>描述:</strong> 在跳转到Trap处理入口之前，RISC-V CPU硬件会自动保存当前执行状态的关键信息，并将CPU模式切换到Supervisor模式（如果之前不是）。</li><li><strong>保存内容:</strong><ul><li><strong><code>sepc</code> (Supervisor Exception Program Counter):</strong> 保存发生中断时下一条待执行指令的地址。</li><li><strong><code>scause</code> (Supervisor Cause):</strong> 保存Trap发生的原因。对于S模式外部中断，<code>scause</code>的高位为1，低位部分指示是外部中断（一个特定的值，如8或9，取决于是否使用中断向量）。</li><li><strong><code>sstatus</code> (Supervisor Status):</strong> <code>sstatus</code>的部分位被修改：<ul><li>当前的<code>SIE</code> (Supervisor Interrupt Enable) 状态被保存到<code>sstatus.SPIE</code> (Supervisor Previous Interrupt Enable)。</li><li>当前的CPU模式（如果之前是U模式）被保存到<code>sstatus.SPP</code> (Supervisor Previous Privilege)。</li><li><code>SIE</code>位被清零，禁用中断，防止嵌套中断（直到软件重新使能）。</li><li>当前模式设置为S模式。</li></ul></li></ul></li><li><strong>相关概念:</strong> <code>sepc</code>, <code>scause</code>, <code>sstatus</code>, <code>sstatus.SPIE</code>, <code>sstatus.SPP</code>。</li></ul></li><li><p><strong>CPU跳转到Trap入口 (<code>stvec</code>) (CPU Jumps to Trap Entry (<code>stvec</code>))</strong></p><ul><li><strong>描述:</strong> CPU根据<code>stvec</code> (Supervisor Trap Vector) 寄存器的值来确定Trap处理程序的入口地址。</li><li><strong><code>stvec</code> 模式:</strong><ul><li><strong>Direct Mode (Mode &#x3D; 0):</strong> 所有Trap（包括所有中断和异常）都跳转到<code>stvec</code>指定的同一个地址。Linux通常配置为这种模式。</li><li><strong>Vectored Mode (Mode &#x3D; 1):</strong> 中断会根据<code>scause</code>中的中断号偏移到<code>stvec</code>基地址 + (中断号 * 4) 的位置（假设每个向量是4字节指令）。异常仍然跳转到<code>stvec</code>基地址。</li></ul></li><li><strong>CPU 动作:</strong> CPU加载<code>stvec</code>的值到PC寄存器，开始执行Trap处理程序的代码。</li><li><strong>相关概念:</strong> <code>stvec</code>, Direct Mode, Vectored Mode。</li></ul></li><li><p><strong>进入内核Trap入口处理程序 (Enter Kernel Trap Entry Handler)</strong></p><ul><li><strong>描述:</strong> 这是内核中的第一个代码段（通常是汇编语言）被执行的地方。它负责保存剩余的CPU上下文，并调用更高层的C语言中断处理函数。</li><li><strong>汇编处理程序动作 (Conceptual Assembly - e.g., <code>kernel_trap</code>):</strong><ul><li>保存所有通用寄存器（a0-a7, t0-t6, s0-s11等）到当前任务的内核栈中，形成一个完整的上下文结构（在Linux中通常是<code>struct pt_regs</code>）。</li><li>将<code>scause</code>和<code>sepc</code>等CSR寄存器的值保存到<code>pt_regs</code>结构中。</li><li>根据需要调整栈指针。</li><li>调用更高层的C语言Trap处理函数，例如 <code>handle_exception</code> 或 <code>handle_interrupt_common</code>，将<code>pt_regs</code>结构体的地址作为参数传递。</li></ul></li><li><strong>为什么需要汇编?</strong> C语言函数调用会使用寄存器和栈，汇编程序负责在调用C函数之前保存所有可能被C函数修改的寄存器，并在C函数返回后恢复它们。</li><li><strong>相关代码 (Conceptual):</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.globl kernel_trap<br>kernel_trap:<br>    # Save all general purpose registers onto the stack<br>    SAVE_ALL # Macro that pushes registers x1-x31<br><br>    # Save CSRs like scause, sepc, sstatus into the pt_regs structure on stack<br>    # ... logic to read CSRs and store into pt_regs ...<br><br>    # Load stack pointer into a0 (first arg for C function)<br>    mv a0, sp<br><br>    # Call the generic C handler<br>    call handle_exception # Or handle_interrupt_common<br><br>    # Restore all registers from the stack<br>    RESTORE_ALL # Macro that pops registers x1-x31<br><br>    # Restore scause, sepc, sstatus from pt_regs if needed (e.g. for exception return)<br><br>    # Return from trap<br>    sret<br></code></pre></td></tr></table></figure></li><li><strong>相关概念:</strong> <code>struct pt_regs</code>, 保存&#x2F;恢复寄存器宏 (<code>SAVE_ALL</code>, <code>RESTORE_ALL</code>), 内核栈。</li></ul></li><li><p><strong>高层C语言Trap处理 (High-Level C Trap Handling)</strong></p><ul><li><strong>描述:</strong> <code>handle_exception</code> (或类似函数) 是第一个被调用的C函数。它检查<code>scause</code>来确定Trap的类型（中断还是异常），以及具体的原因。</li><li><strong>处理逻辑:</strong><ul><li>读取<code>scause</code>寄存器的值。</li><li>检查<code>scause</code>的最高位：如果为1，表示是中断；如果为0，表示是异常。</li><li><strong>如果是中断:</strong><ul><li>进一步检查<code>scause</code>的低位，判断是哪种类型的中断（例如，S模式软件中断、S模式定时器中断、S模式外部中断）。</li><li>如果是S模式外部中断（通常通过PLIC到达），则调用外部中断的处理逻辑，例如 <code>handle_interrupt_common</code> 或体系结构相关的中断分发函数。</li></ul></li><li><strong>如果是异常:</strong><ul><li>根据<code>scause</code>的低位判断异常类型（如缺页、非法指令、访问错误等）。</li><li>调用相应的异常处理函数（如<code>do_page_fault</code>, <code>do_illegal_instruction</code>等）。</li></ul></li></ul></li><li><strong>相关函数 (Conceptual):</strong> <code>handle_exception</code>, <code>handle_interrupt_common</code>。</li></ul></li><li><p><strong>Linux通用中断分发 (Linux Generic Interrupt Dispatch)</strong></p><ul><li><strong>描述:</strong> 这是Linux中断子系统的核心部分。对于外部中断，这里需要与中断控制器(PLIC)交互，确定是哪个设备产生了中断，并将中断请求路由到正确的Linux IRQ描述符和处理函数。</li><li><strong>处理步骤:</strong><ul><li><strong>与PLIC交互 (Claim):</strong> 读取PLIC的Claim寄存器。PLIC返回当前CPU核心上最高优先级的、已使能的挂起外部中断源的ID。这是硬件设备的中断源ID。</li><li><strong>查找Linux IRQ号:</strong> 使用中断域 (<code>irq_domain</code>) 子系统，将PLIC返回的硬件中断源ID映射到Linux内核内部使用的虚拟IRQ号。这是Linux抽象设备中断的方式。</li><li><strong>查找 <code>irq_desc</code>:</strong> 使用Linux IRQ号作为索引，查找对应的 <code>struct irq_desc</code> 结构体。这个结构体包含中断的状态、统计信息、以及指向中断流处理函数(<code>handle_irq</code>)和注册的中断动作链表 (<code>irq_action</code>) 的指针。</li><li><strong>调用中断流处理函数:</strong> 调用 <code>irq_desc</code> 中指向的流处理函数（如 <code>handle_level_irq</code>, <code>handle_edge_irq</code>）。这些函数负责处理特定类型中断的低级细节，例如：<ul><li><strong>在此处与PLIC交互 (Completion):</strong> 在适当的时机（通常对于电平触发在调用ISR前，对于边缘触发在ISR后），向PLIC的Completion寄存器写入刚刚处理的PLIC源ID，告诉PLIC该中断已由当前CPU处理。这允许PLIC为同一源生成新的中断（如果是电平触发），或者清除挂起状态。</li><li>屏蔽&#x2F;解除屏蔽该IRQ线在PLIC中的中断。</li><li>更新中断统计信息。</li><li>调用下一层的动作处理函数。</li></ul></li><li><strong>调用动作处理函数:</strong> 流处理函数内部会调用 <code>handle_irq_event_percpu</code> 或类似函数。这个函数负责遍历挂在该IRQ描述符上的所有 <code>struct irq_action</code> 结构体。</li></ul></li><li><strong>相关概念&#x2F;函数:</strong> PLIC Claim&#x2F;Completion Registers, <code>irq_domain</code>, Linux IRQ Number, <code>struct irq_desc</code>, <code>handle_irq</code> (指针在 <code>irq_desc</code> 中), <code>handle_level_irq</code>, <code>handle_edge_irq</code>, <code>handle_irq_event_percpu</code>, <code>struct irq_action</code>.</li><li><strong>相关代码 (Conceptual):</strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Inside a function called by handle_interrupt_common for external interrupts</span><br>u32 plic_id = plic_claim(cpu); <span class="hljs-comment">// Read PLIC claim register</span><br><br><span class="hljs-keyword">if</span> (plic_id) &#123;<br>    <span class="hljs-comment">// Map PLIC ID to Linux IRQ number</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> irq = irq_find_mapping(irq_domain, plic_id);<br><br>    <span class="hljs-keyword">if</span> (irq) &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">irq_desc</span> *<span class="hljs-title">desc</span> =</span> irq_to_desc(irq);<br>        <span class="hljs-keyword">if</span> (desc &amp;&amp; desc-&gt;handle_irq) &#123;<br>            <span class="hljs-comment">// Call the flow handler (e.g., handle_level_irq)</span><br>            desc-&gt;handle_irq(irq, desc); <span class="hljs-comment">// This will eventually call the action handler</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// plic_complete(cpu, plic_id); // This is usually done *inside* the flow handler (e.g. handle_level_irq)</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>执行驱动注册的ISR (Execute Driver’s Registered ISR)</strong></p><ul><li><strong>描述:</strong> <code>handle_irq_event_percpu</code> 遍历 <code>irq_desc</code> 中的 <code>action</code> 链表，逐一调用驱动程序通过 <code>request_irq</code> 函数注册的中断处理函数（ISR）。</li><li><strong><code>request_irq</code> 函数:</strong> 驱动程序使用此函数向内核注册其中断处理函数。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Driver code example</span><br><span class="hljs-type">static</span> <span class="hljs-type">irqreturn_t</span> <span class="hljs-title function_">my_device_isr</span><span class="hljs-params">(<span class="hljs-type">int</span> irq, <span class="hljs-type">void</span> *data)</span><br>&#123;<br>    <span class="hljs-comment">// data is often a pointer to the device structure</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">my_device</span> *<span class="hljs-title">dev</span> =</span> (<span class="hljs-keyword">struct</span> my_device *)data;<br><br>    <span class="hljs-comment">// --- Top Half (ISR) ---</span><br>    <span class="hljs-comment">// Must be FAST and ATOMIC (cannot sleep, acquire mutexes, etc.)</span><br>    <span class="hljs-comment">// Acknowledge the device hardware (clear interrupt status bits on the device)</span><br>    <span class="hljs-comment">// Read necessary status/data from device (quickly)</span><br>    <span class="hljs-comment">// Schedule bottom half work if needed (tasklet_schedule, schedule_work)</span><br>    <span class="hljs-comment">// --- End Top Half ---</span><br><br>    <span class="hljs-comment">// Return status:</span><br>    <span class="hljs-comment">// IRQ_HANDLED: This handler processed the interrupt.</span><br>    <span class="hljs-comment">// IRQ_NONE: This handler did not recognize/handle the interrupt (e.g., shared interrupt line).</span><br>    <span class="hljs-keyword">return</span> IRQ_HANDLED;<br>&#125;<br><br><span class="hljs-comment">// In driver initialization code:</span><br><span class="hljs-type">int</span> ret = request_irq(device_irq_number, <span class="hljs-comment">// The Linux IRQ number for this device</span><br>                      my_device_isr,     <span class="hljs-comment">// Pointer to the ISR function</span><br>                      IRQF_SHARED,       <span class="hljs-comment">// Flags, e.g., allow sharing</span><br>                      <span class="hljs-string">&quot;my_device&quot;</span>,       <span class="hljs-comment">// Name for /proc/interrupts</span><br>                      my_device_struct_ptr); <span class="hljs-comment">// Data passed to the ISR</span><br><span class="hljs-keyword">if</span> (ret) &#123;<br>    <span class="hljs-comment">// Error handling</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong><code>irq_handler_t</code> 类型:</strong> 这是ISR函数的类型定义：<code>typedef irqreturn_t (*irq_handler_t)(int, void *);</code></li><li><strong>执行流程:</strong> <code>handle_irq_event_percpu</code> 会像这样调用注册的函数（简化）：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Inside handle_irq_event_percpu</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">irq_action</span> *<span class="hljs-title">action</span>;</span><br><span class="hljs-type">irqreturn_t</span> action_ret;<br><span class="hljs-type">irqreturn_t</span> overall_ret = IRQ_NONE;<br><br>list_for_each_entry(action, &amp;desc-&gt;action, <span class="hljs-built_in">list</span>) &#123;<br>    <span class="hljs-comment">// Call the driver&#x27;s ISR</span><br>    action_ret = action-&gt;handler(irq, action-&gt;dev_id);<br><br>    <span class="hljs-comment">// Update overall return status if handled</span><br>    <span class="hljs-keyword">if</span> (action_ret == IRQ_HANDLED)<br>        overall_ret = IRQ_HANDLED;<br><br>    <span class="hljs-comment">// Handle return values (e.g., logging if IRQ_NONE on non-shared IRQ)</span><br>&#125;<br><span class="hljs-comment">// The overall_ret is often returned up the call stack</span><br></code></pre></td></tr></table></figure></li><li><strong>相关概念&#x2F;函数:</strong> <code>request_irq</code>, <code>irq_handler_t</code>, <code>irqreturn_t</code> (<code>IRQ_HANDLED</code>, <code>IRQ_NONE</code>), <code>struct irq_action</code>, 中断共享 (<code>IRQF_SHARED</code>), 上半部 vs. 下半部。</li></ul></li><li><p><strong>中断返回 (Interrupt Return)</strong></p><ul><li><strong>描述:</strong> 驱动ISR执行完毕并返回后，控制权层层返回到最初的汇编Trap入口程序。</li><li><strong>汇编处理程序动作 (Conceptual Assembly - <code>kernel_trap</code> return path):</strong><ul><li><code>handle_exception</code> (或类似函数) 返回到汇编程序。</li><li>汇编程序从栈中恢复所有通用寄存器的值（之前 <code>SAVE_ALL</code> 保存的）。</li><li>根据需要恢复<code>sstatus</code>和<code>sepc</code>的值（例如，如果Trap是异常，可能需要调整<code>sepc</code>）。</li><li>执行 <code>sret</code> (Supervisor Return) 指令。</li></ul></li><li><strong>CPU 动作:</strong> <code>sret</code> 指令是RISC-V中从Trap返回的指令。它会自动：<ul><li>将 <code>sepc</code> 的值加载到PC寄存器。</li><li>将 <code>sstatus.SPIE</code> 的值复制到 <code>sstatus.SIE</code>（恢复中断使能状态）。</li><li>将 <code>sstatus.SPP</code> 的值复制到当前CPU模式（恢复到Trap发生前的模式，通常是U或S）。</li><li>清除 <code>sstatus.SPIE</code> 和 <code>sstatus.SPP</code>。</li></ul></li><li><strong>最终结果:</strong> CPU恢复到Trap发生之前的模式，并从<code>sepc</code>指向的指令处继续执行中断前的程序。</li><li><strong>相关概念&#x2F;指令:</strong> <code>sret</code>, 寄存器恢复 (<code>RESTORE_ALL</code>)。</li></ul></li></ol><p><strong>总结流程图示 (简化):</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">硬件设备 -&gt; PLIC -&gt; CPU (检查SIE, SEDELEG, SEIP)<br>     |                |<br>     v                v<br> (发出物理中断)   (响应中断)<br>                      |<br>                      v<br>               硬件保存上下文 (sepc, scause, sstatus)<br>                      |<br>                      v<br>               CPU读取 stvec<br>                      |<br>                      v<br>            跳转到内核 Trap 入口 (汇编)<br>                      |<br>                      v<br>         汇编保存完整上下文 (pt_regs)<br>                      |<br>                      v<br>          调用 C 语言 Trap 分发 (handle_exception)<br>                      |<br>                      v  (如果 scause 指示是外部中断)<br>          检查 scause, 调用外部中断处理 (handle_interrupt_common)<br>                      |<br>                      v<br>          读取 PLIC Claim -&gt; 获取 PLIC ID<br>                      |<br>                      v<br>          irq_domain 映射 PLIC ID -&gt; Linux IRQ 号<br>                      |<br>                      v<br>          查找 irq_desc -&gt; 获取 handle_irq (流处理函数)<br>                      |<br>                      v<br>          调用 流处理函数 (handle_level_irq/handle_edge_irq)<br>                      |    (流处理函数在适当时候写 PLIC Complete)<br>                      v<br>          调用 动作处理函数 (handle_irq_event_percpu)<br>                      |<br>                      v  (遍历 struct irq_action 链表)<br>         调用 驱动注册的 ISR (irq_handler_t function) &lt;------- request_irq 注册的函数<br>                      |<br>                      v<br>            ISR 返回 (IRQ_HANDLED/IRQ_NONE)<br>                      |<br>                      v<br>          动作处理函数返回<br>                      |<br>                      v<br>          流处理函数返回<br>                      |<br>                      v<br>          C 语言 Trap 分发返回<br>                      |<br>                      v<br>          汇编 Trap 入口程序恢复上下文 (RESTORE_ALL)<br>                      |<br>                      v<br>             执行 sret 指令<br>                      |<br>                      v<br>            CPU 返回到中断前的程序继续执行<br></code></pre></td></tr></table></figure><h1 id="5-内核空间和用户空间的通信方式"><a href="#5-内核空间和用户空间的通信方式" class="headerlink" title="5. 内核空间和用户空间的通信方式"></a>5. 内核空间和用户空间的通信方式</h1><h3 id="总结与对比："><a href="#总结与对比：" class="headerlink" title="总结与对比："></a>总结与对比：</h3><table><thead><tr><th align="left">特性&#x2F;通信方式</th><th align="left"><code>ioctl</code></th><th align="left"><code>procfs</code></th><th align="left"><code>sysfs</code></th><th align="left"><code>netlink</code></th></tr></thead><tbody><tr><td align="left"><strong>用途</strong></td><td align="left">复杂控制命令、设备特定操作</td><td align="left">文本形式的内核信息、调试</td><td align="left">属性管理、设备模型暴露、配置参数</td><td align="left">复杂、异步、双向通信、事件通知</td></tr><tr><td align="left"><strong>数据格式</strong></td><td align="left">任意结构体或原始数据</td><td align="left">文本字符串</td><td align="left">文本字符串 (单值属性)</td><td align="left">结构化二进制消息 (Netlink协议)</td></tr><tr><td align="left"><strong>通信方向</strong></td><td align="left">双向 (同步请求-响应)</td><td align="left">双向 (同步读写)</td><td align="left">双向 (同步读写)</td><td align="left">双向、异步、支持单播&#x2F;多播&#x2F;广播</td></tr><tr><td align="left"><strong>API</strong></td><td align="left">基于文件描述符和 <code>ioctl()</code></td><td align="left">基于文件 I&#x2F;O (<code>open</code>, <code>read</code>, <code>write</code>)</td><td align="left">基于文件 I&#x2F;O (<code>open</code>, <code>read</code>, <code>write</code>)</td><td align="left">基于套接字 (<code>socket</code>, <code>sendmsg</code>, <code>recvmsg</code>)</td></tr><tr><td align="left"><strong>复杂性</strong></td><td align="left">中等偏上 (需要手动拷贝)</td><td align="left">简单 (文本处理)</td><td align="left">中等 (Kobject&#x2F;Attribute 机制)</td><td align="left">较高 (套接字、消息解析)</td></tr><tr><td align="left"><strong>性能</strong></td><td align="left">较高 (直接拷贝数据)</td><td align="left">较低 (文本解析开销)</td><td align="left">中等 (文本解析开销)</td><td align="left">较高 (原生套接字、二进制消息)</td></tr><tr><td align="left"><strong>典型示例</strong></td><td align="left">显卡驱动模式设置，网卡MAC地址</td><td align="left"><code>/proc/cpuinfo</code>, <code>/proc/meminfo</code></td><td align="left"><code>/sys/class/gpio/gpiochipX/direction</code></td><td align="left"><code>ip</code> 命令配置网络，<code>udev</code> 监视事件</td></tr><tr><td align="left"><strong>RISC-V 特性</strong></td><td align="left">作为系统调用，API通用，底层ABI遵循RISC-V约定</td><td align="left">完全通用</td><td align="left">完全通用，与Linux设备模型紧密结合</td><td align="left">完全通用，作为网络栈组件</td></tr></tbody></table><h1 id="6-Linux-的内存管理机制"><a href="#6-Linux-的内存管理机制" class="headerlink" title="6. Linux 的内存管理机制"></a>6. Linux 的内存管理机制</h1><h1 id="7-驱动中的-probe-函数-调用流程是"><a href="#7-驱动中的-probe-函数-调用流程是" class="headerlink" title="7. 驱动中的 probe 函数, 调用流程是"></a>7. 驱动中的 probe 函数, 调用流程是</h1><p>name<br>of_match_table<br>acpi</p>]]></content:encoded>
      
      
      
      <category domain="https://GoKo-Son626.github.io/tags/interview/">interview</category>
      
      
      <comments>https://goko-son626.github.io/post/Troy-interview.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>start-kerneling</title>
      <link>https://goko-son626.github.io/post/start-kerneling.html</link>
      <guid>https://goko-son626.github.io/post/start-kerneling.html</guid>
      <pubDate>Mon, 19 May 2025 19:02:36 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;前言介绍….&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>前言介绍….</strong></em></li></ul><span id="more"></span>]]></content:encoded>
      
      
      
      <category domain="https://GoKo-Son626.github.io/tags/kernel-start/">kernel-start</category>
      
      
      <comments>https://goko-son626.github.io/post/start-kerneling.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>riscv-toolchains</title>
      <link>https://goko-son626.github.io/post/riscv-toolchains.html</link>
      <guid>https://goko-son626.github.io/post/riscv-toolchains.html</guid>
      <pubDate>Sun, 18 May 2025 08:30:56 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;riscv-toolchain介绍&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>riscv-toolchain介绍</strong></em></li></ul><span id="more"></span><p>GNU 工具链的<strong>三元组</strong>（triplet），格式是：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;目标架构&gt;-&lt;供应商&gt;-&lt;目标系统&gt;<br></code></pre></td></tr></table></figure><p>riscv64-unknown-elf-：<br>        适用于 riscv64 架构、面向嵌入式&#x2F;裸机平台（使用 newlib 标准库）的工具链。<br>        可从 riscv-collab&#x2F;riscv-gnu-toolchain 构建。<br>        不推荐通过包管理工具安装此编译链。发行版软件源中的此工具链常常缺少关键的 newlib 标准库。<br>riscv64-unknown-linux-gnu-：<br>        适用于 riscv64 架构、面向 linux-gnu 平台（使用 glibc 标准库）的工具链，可以与riscv64-linux-gnu- 相互替换。可从 riscv-collab&#x2F;riscv-gnu-toolchain 构建。<br>riscv64-linux-gnu-：<br>        适用于 riscv64 架构、面向 linux-gnu 平台（使用 glibc 标准库）的工具链。<br>        可通过包管理工具（如 Ubuntu 的 apt）安装。受限于发行版软件源限制，其编译器版本可能较老。</p>]]></content:encoded>
      
      
      
      <category domain="https://GoKo-Son626.github.io/tags/riscv-toolchain/">riscv-toolchain</category>
      
      
      <comments>https://goko-son626.github.io/post/riscv-toolchains.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Trace-use-3</title>
      <link>https://goko-son626.github.io/post/Trace-use-3.html</link>
      <guid>https://goko-son626.github.io/post/Trace-use-3.html</guid>
      <pubDate>Sat, 17 May 2025 14:25:22 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;快速构建 Trace 子系统“认知” 3&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>快速构建 Trace 子系统“认知” 3</strong></em></li></ul><span id="more"></span><p>2.6 之前</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">include/<br>    <span class="hljs-keyword">asm</span>-arm/<br>    <span class="hljs-keyword">asm</span>-i386/<br>    <span class="hljs-keyword">asm</span>-ppc/<br></code></pre></td></tr></table></figure><p> “It would end up something like the old include&#x2F;<br>2.6.24 起</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">asm</span>-* setup” <br>arch/arm/include/<span class="hljs-keyword">asm</span>/...<br>arch/x86/include/<span class="hljs-keyword">asm</span>/...<br></code></pre></td></tr></table></figure><p>XFS 文件系统的 trace 头就放在 fs&#x2F;xfs&#x2F;xfs_trace.h<br>DRM 的 trace 头就放在 drivers&#x2F;gpu&#x2F;drm&#x2F;drm_trace.h<br>架构相关的 trace 头就放在 arch&#x2F;mips&#x2F;include&#x2F;trace&#x2F;…</p><p>#define TRACE_EVENT(…)之后要展开为trace代码并编译进去。</p><p><strong>模块代码引用 silly-trace.h(drivers&#x2F;sillymod&#x2F;silly-trace.h)，而 silly-trace.h 引用了 define_trace.h（include&#x2F;trace&#x2F;define_trace.h）。</strong></p><p><strong>silly-trace.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">undef</span> TRACE_SYSTEM</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TRACE_SYSTEM sillymod</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> !defined(_TRACE_SILLYMOD_H) || defined(TRACE_HEADER_MULTI_READ)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _TRACE_SILLYMOD_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/tracepoint.h&gt;</span></span><br><br><span class="hljs-comment">// 定义你的 trace event</span><br>TRACE_EVENT(...);<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* _TRACE_SILLYMOD_H */</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;trace/define_trace.h&gt;</span>  <span class="hljs-comment">// 关键！用于生成实现代码</span></span><br></code></pre></td></tr></table></figure><p><strong>define_trace.h</strong><br>Linux 内核自带的通用头文件，它负责将你通过 TRACE_EVENT() 宏声明的事件，生成实际的 tracepoint 声明函数&#x2F;结构体&#x2F;探测函数等代码实现。</p>]]></content:encoded>
      
      
      
      <category domain="https://GoKo-Son626.github.io/tags/Trace/">Trace</category>
      
      
      <comments>https://goko-son626.github.io/post/Trace-use-3.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Trace-do-chenxiaosong-1</title>
      <link>https://goko-son626.github.io/post/Trace-do-chenxiaosong-1.html</link>
      <guid>https://goko-son626.github.io/post/Trace-do-chenxiaosong-1.html</guid>
      <pubDate>Sat, 17 May 2025 08:26:57 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;ftrace使用&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>ftrace使用</strong></em></li></ul><span id="more"></span><p><img src="/post/Trace-do-chenxiaosong-1/image.png" alt="alt text"></p><table><thead><tr><th>位置</th><th>作用</th><th>你在 RISC‑V trace 任务中主要用途</th><th></th></tr></thead><tbody><tr><td><strong><code>current_tracer</code></strong></td><td>读&#x2F;写当前激活的 tracer (<code>nop</code>&#x2F;<code>function_graph</code>&#x2F;<code>irqsoff</code>…)</td><td>切换 tracer，常用 <code>function_graph</code>、<code>nop</code></td><td></td></tr><tr><td><strong><code>tracing_on</code></strong></td><td>全局开关（0&#x2F;1）</td><td>一键暂停&#x2F;继续收集</td><td></td></tr><tr><td><strong><code>trace</code>, <code>trace_pipe</code></strong></td><td>输出缓冲区<br>• <code>trace</code>：静态快照<br>• <code>trace_pipe</code>：流式实时读取</td><td>消费跟踪结果：<br> `cat trace</td><td>less<code>&lt;br&gt; </code>cat trace_pipe &gt; out.log`</td></tr><tr><td><strong><code>available_tracers</code></strong></td><td>支持的 tracer 列表</td><td>选型时查看硬件是否支持 <code>function_graph</code> 等</td><td></td></tr><tr><td><strong><code>events/</code></strong></td><td>所有 tracepoint 目录树<br>每个事件都有 <code>enable</code>、<code>format</code></td><td>• 启&#x2F;停特定 tracepoint<br>• 查看字段布局，写 eBPF&#x2F;bpftrace 时要读 <code>format</code></td><td></td></tr><tr><td><strong><code>set_event</code></strong></td><td>批量开启事件，写 <code>subsys:event</code></td><td>比循环 echo 更快</td><td></td></tr><tr><td><strong><code>set_ftrace_filter</code>, <code>set_ftrace_notrace</code></strong></td><td>选择跟踪&#x2F;排除哪些函数</td><td>function&#x2F;function_graph 模式下做白&#x2F;黑名单</td><td></td></tr><tr><td><strong><code>available_filter_functions</code></strong></td><td>可被动&#x2F;静态跟踪的全部符号</td><td>搜函数地址做动态 FTRACE 打桩</td><td></td></tr><tr><td><strong><code>kprobe_events</code>, <code>uprobe_events</code></strong></td><td>动态插桩描述文件</td><td>向内核注册&#x2F;注销 kprobe、uprobe</td><td></td></tr><tr><td><strong><code>synthetic_events</code></strong></td><td>创建用户自定义事件</td><td>复杂场景用来把多事件关联聚合</td><td></td></tr><tr><td><strong><code>instances/</code></strong></td><td>支持创建多实例 buffer</td><td>需要隔离多组 trace 时使用</td><td></td></tr><tr><td><strong><code>trace_clock</code></strong></td><td>选择时间戳来源（local, global, mono）</td><td>跟多核&#x2F;跨系统比较时间戳时切换</td><td></td></tr><tr><td><strong><code>options/</code>, <code>trace_options</code></strong></td><td>各类细粒度选项（打印 pid、latency …）</td><td>开启 <code>funcgraph-proc</code>, <code>sym-offset</code> 等提高可读性</td><td></td></tr><tr><td><strong><code>buffer_size_kb</code>, <code>buffer_total_size_kb</code></strong></td><td>每‑CPU 或全局 ring‑buffer 大小</td><td>长时间采样前调大避免丢包</td><td></td></tr><tr><td><strong><code>per_cpu/</code></strong>, <code>cpumask</code></td><td>每 CPU 的 buffer&#x2F;开关</td><td>跟踪特定核或查看局部 stats</td><td></td></tr><tr><td><strong><code>osnoise/</code>, <code>hwlat_detector/</code></strong></td><td>专用延迟分析 tracer</td><td>若排查 IRQ&#x2F;Jitter 可用</td><td></td></tr><tr><td><strong><code>dynamic_events</code></strong></td><td>综合视图（kprobe&#x2F;uprobe&#x2F;synth 等）</td><td>快速列出现有动态事件</td><td></td></tr></tbody></table>]]></content:encoded>
      
      
      
      
      <comments>https://goko-son626.github.io/post/Trace-do-chenxiaosong-1.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Trace-use-2</title>
      <link>https://goko-son626.github.io/post/Trace-use-2.html</link>
      <guid>https://goko-son626.github.io/post/Trace-use-2.html</guid>
      <pubDate>Sat, 17 May 2025 02:27:26 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;快速构建 Trace 子系统“认知” 2&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>快速构建 Trace 子系统“认知” 2</strong></em></li></ul><span id="more"></span><h1 id="Using-the-TRACE-EVENT-macro（part-1）"><a href="#Using-the-TRACE-EVENT-macro（part-1）" class="headerlink" title="Using the TRACE_EVENT() macro（part 1）"></a>Using the <code>TRACE_EVENT()</code> macro（part 1）</h1><blockquote><p>在第一部分中，我们解释了在核心内核中创建跟踪点的过程。本文将继续介绍使用 DECLARE_EVENT_CLASS()宏来降低跟踪点占用空间的技巧。此外，本文还介绍了用于构建TP_STRUCT__entry字段的宏，并 解释了 TP_printk辅助函数。</p></blockquote><p>如果两个事件具有相同的TP_PROTO、TP_ARGS和TP_STRUCT__entry ，就应该有一种方法让这些事件共享它们使用的函数。这就是新宏DECLARE_EVENT_CLASS()（最初称为TRACE_EVENT_TEMPLATE()）和DEFINE_EVENT()的动机。</p><p>内核里很多跟踪事件（TRACE_EVENT()）结构几乎一模一样，只是名字不同而已。例如：sched_wakeup和sched_wakeup_new。<br>DECLARE_EVENT_CLASS()（声明一个模板）：它定义一套“通用模板”——参数、结构体布局、赋值逻辑、打印格式都写好，供多个事件共享。</p><p>例如：DECLARE_EVENT_CLASS(sched_wakeup_template, …)<br>可定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">DEFINE_EVENT(sched_wakeup_template, sched_wakeup,<br>TP_PROTO(<span class="hljs-keyword">struct</span> task_struct *p),<br>TP_ARGS(__perf_task(p)));<br><br>DEFINE_EVENT(sched_wakeup_template, sched_wakeup_new,<br>TP_PROTO(<span class="hljs-keyword">struct</span> task_struct *p),<br>TP_ARGS(__perf_task(p)));<br></code></pre></td></tr></table></figure><p>预处理器preprocessor：是 C 编译器在真正编译代码前，先干的一些“文本替换”活：<br>宏系统，就是指你用 #define 写的那些“模板规则”：<br>DECLARE_EVENT_CLASS(sched_wakeup_template,<br>TP_PROTO(struct task_struct *p),<br>TP_ARGS(p),<br>…<br>);</p><p>DEFINE_EVENT(sched_wakeup_template, sched_wakeup,<br>TP_PROTO(struct task_struct *p),  &#x2F;&#x2F; ← 这里<br>TP_ARGS(p));                      &#x2F;&#x2F; ← 这里<br>指向的两行，预处理宏就会重复写，传入参数</p><p><strong>TP_STRUCT__entry宏</strong><br>第一篇文章提到了__field和__array宏，它们用于创建存储在环形缓冲区中的事件的结构格式。__ field(type, item)声明了结构体中一个名为item的字段，其类型为 type （ 即type item;）。__ array(type, item, len)声明了一个名为item的静态数组， 其元素个数为 len （即type item[len];）。这两个宏最为常见，但还有其他宏允许将事件存储到环形缓冲区中，实现更复杂的操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 普通字段</span><br>__field(type, name)<br>__field_ext(type, name, filter_type)<br><br><span class="hljs-comment">// 动态数据字段</span><br>__string(name, src)                  <span class="hljs-comment">// 可变长字符串</span><br>__dynamic_array(type, name, len)    <span class="hljs-comment">// 任意动态数组</span><br><br><span class="hljs-comment">// 数据赋值</span><br>__assign_str(name, src)<br><span class="hljs-built_in">memcpy</span>(__get_dynamic_array(name), src, len)<br><br><span class="hljs-comment">// 打印输出</span><br>__get_str(name)<br>__get_dynamic_array(name)<br><br>__print_flags(val, delim, &#123;mask, name&#125;...)     <span class="hljs-comment">// 位掩码打印</span><br>__print_symbolic(val, &#123;value, name&#125;...)        <span class="hljs-comment">// 枚举值打印</span><br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs text">◆ 启用 / 关闭<br>  echo 1  &gt; events/&lt;sub&gt;/&lt;event&gt;/enable      # 开启单个<br>  echo 0  &gt; events/enable                    # 关闭所有<br>  echo e1 e2 e3 &gt; set_event                  # 批量开启 e1,e2,e3<br><br>◆ 跟踪输出<br>  cat trace                                  # 直接读<br>  trace-cmd record / report                  # 更灵活、支持保存文件<br>  perf record -e &lt;sub&gt;:&lt;event&gt;               # perf 也能收<br><br>◆ 事件头文件关键宏<br>  __field(type, name)                        # 固定字段<br>  __string(name, src) / __assign_str ...     # 动态字符串<br>  __dynamic_array(type, name, len)           # 任意可变数组<br>  __get_str(name) / __get_dynamic_array(name)# 访问可变数据<br>  __print_flags(val, delim, &#123;mask,&quot;name&quot;&#125;,…) # 位掩码友好打印<br>  __print_symbolic(val, &#123;value,&quot;name&quot;&#125;,…)    # 枚举值打印<br></code></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="https://GoKo-Son626.github.io/tags/Trace/">Trace</category>
      
      
      <comments>https://goko-son626.github.io/post/Trace-use-2.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Trace-structure</title>
      <link>https://goko-son626.github.io/post/Trace-use-1.html</link>
      <guid>https://goko-son626.github.io/post/Trace-use-1.html</guid>
      <pubDate>Fri, 16 May 2025 10:37:48 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;快速构建 Trace 子系统“认知” 1&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>快速构建 Trace 子系统“认知” 1</strong></em></li></ul><span id="more"></span><h1 id="Using-the-TRACE-EVENT-macro（part-1）"><a href="#Using-the-TRACE-EVENT-macro（part-1）" class="headerlink" title="Using the TRACE_EVENT() macro（part 1）"></a>Using the <code>TRACE_EVENT()</code> macro（part 1）</h1><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs txt">┌──────────────────────────────────────────────────────────────────┐<br>│                          🌍  用户空间工具层                      │<br>│  strace*  trace-cmd  perf  bpftrace  bpftool  kernelshark  …     │<br>│  · strace 仅靠 ptrace，不入内核 Trace 体系                       │<br>└───────────────┬──────────────────────────────────────────────────┘<br>                │ 调用 / 录制 / 加载<br>┌───────────────▼──────────────────────────────────────────────────┐<br>│                 🧩  统一 Trace 控制接口 (tracefs)               │<br>│  /sys/kernel/debug/tracing/*   (ftrace debugfs)                  │<br>│  tracefs APIs (kernel/trace/*.c)                                 │<br>└───────────────┬──────────────────────────────────────────────────┘<br>                │ 读写控制文件或 ioctl<br>┌───────────────▼──────────────────────────────────────────────────┐<br>│                🏗  内核 Trace 基础框架 (TRACE SUBSYS)           │<br>│  • ftrace core  —— function/function_graph/irqsoff/…            │<br>│  • trace events —— 事件注册表、filters、ring‑buffer             │<br>│  • hook dispatch —— 把数据写 ring buffer 或调用 eBPF            │<br>└───────────────┬──────────────────────────────────────────────────┘<br>                │ 调用 / 附着<br>┌───────────────▼──────────────────────────────────────────────────┐<br>│                 🔧  低层插桩钩子 / Instrumentation 点           │<br>│  ├─ tracepoints  (由 TRACE_EVENT / DEFINE_EVENT 生成)           │<br>│  ├─ kprobes      (动态插内核指令)                                │<br>│  ├─ uprobes      (动态插用户进程指令)                            │<br>│  └─ fentry/fexit (BPF_FENTRY, 比 kprobe 更轻量的 BPF 钩子)       │<br>└───────────────┬──────────────────────────────────────────────────┘<br>                │ attach<br>┌───────────────▼──────────────────────────────────────────────────┐<br>│                   ⚙️  eBPF 执行层 (BPF VM)                      │<br>│  • BPF 程序可挂 tracepoints / kprobe / fentry / perf events      │<br>│  • 运行后可把数据写 perf‑ring‑buffer / maps → 用户空间           │<br>└──────────────────────────────────────────────────────────────────┘<br></code></pre></td></tr></table></figure><p><strong>关键说明</strong></p><table><thead><tr><th>层</th><th>说明</th></tr></thead><tbody><tr><td><strong>用户空间工具层</strong></td><td>负责“控制&#x2F;采集&#x2F;解析”。<code>trace-cmd</code>, <code>perf</code>, <code>bpftrace</code> 都经由 tracefs 或 perf_event 系统调用与内核交互。<code>strace</code> 仅基于 <code>ptrace()</code>，并不依赖内核 Trace 框架。</td></tr><tr><td><strong>tracefs 控制接口</strong></td><td><code>/sys/kernel/debug/tracing</code> 暴露一堆文件，如 <code>current_tracer</code>, <code>events/*/enable</code>, 任何工具都可以直接 echo 或 ioctl；<code>trace-cmd</code> 就是批量操作这些文件。</td></tr><tr><td><strong>内核 Trace 基础框架</strong></td><td>把 ftrace（函数级）与 trace events（事件级）统一；决定如何写 ring buffer、如何做过滤；同层还包括 irqsoff、preemptoff、wakeup 等特定 tracer。</td></tr><tr><td><strong>低层插桩钩子</strong></td><td>真正“被内核代码调用或打补丁”的地方：<br>• <strong>tracepoints</strong> &#x3D; 静态宏 <code>TRACE_EVENT()</code> 生成的函数；<br>• <strong>kprobe&#x2F;uprobe</strong> &#x3D; 运行时在指令头插入 <code>int3</code> 等陷阱；<br>• <strong>fentry&#x2F;fexit</strong> &#x3D; BPF 直接在函数 prologue&#x2F;epilogue 附钩；这些钩子把采样数据交给上一层框架处理。</td></tr><tr><td><strong>eBPF 执行层</strong></td><td>属于内核，是一种运行在内核里的“虚拟机”。它不是进程，而是内核中的程序运行环境，支持加载、运行小程序（字节码）。这些小程序由用户态工具编译&#x2F;加载，比如：bpftrace -e ‘tracepoint:syscalls:sys_enter_open { printf(“open called\n”); }’      bpftool prog load prog.o &#x2F;sys&#x2F;fs&#x2F;bpf&#x2F;…     这些程序被“加载到内核内存中，并绑定到某个 hook 点（比如 tracepoint）上”。但可加载&#x2F;卸载字节码；可以挂到 tracepoint&#x2F;kprobe 等；执行逻辑后把结果写 ring buffer 或 BPF maps，用户空间工具再读。    <strong>eBPF 程序是用户空间编译 → 系统调用传给内核 → verifier 验证 → 挂到钩子点 → 运行 → 可以卸载</strong></td></tr></tbody></table><p>工具( trace-cmd &#x2F; perf &#x2F; bpftrace ) →<br>   操作 tracefs 接口 →<br>      驱动 ftrace + trace events 框架 →<br>         依托 tracepoint &#x2F; kprobe &#x2F; fentry 等钩子收数 →<br>            (可选) 交给 eBPF 做实时处理 →<br>               数据落到 ring buffer → 工具解析显示</p><p>钩子函数是一种机制：提供“挂钩”位置，回调函数是一个函数（你写的），函数挂到钩子上后钩子被触发可以调用函数<br><strong>钩子函数</strong>：“钩子函数”本质上就是一种 特定用途的回调函数。我们在内核里用“钩子”这个词，意思是：“我在这里留了一个钩子（hook point），你可以挂上自己的函数，当某个行为发生时，这个函数就会被调用。”<br><strong>回调函数</strong>：回调函数就是你提前定义好的函数指针，然后在某个时机由别人（系统、库、框架）调用它。你把 my_callback 注册进去；当“事件”触发时，系统调用你的my_callback。<br>ex:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">my_callback</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;callback called with value = %d\n&quot;</span>, value);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">trigger_event</span><span class="hljs-params">(<span class="hljs-type">void</span> (*cb)(<span class="hljs-type">int</span>))</span> &#123;<br>    cb(<span class="hljs-number">42</span>); <span class="hljs-comment">// 在“事件”发生时，调用你的回调函数</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    trigger_event(my_callback); <span class="hljs-comment">// 注册回调</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>trace marker</code> 是一种早期的内核跟踪手段：直接把 printf(“some event happened: %d”, value); 这样的格式化字符串写进了内核代码里，非常像是“调试信息”。但这做法污染了代码，看起来像是 debug 没删干净。</p><p>后来 Mathieu Desnoyers 设计了 tracepoints，做法是：</p><ul><li>在内核的某些逻辑点放一个函数调用，比如 trace_my_event(foo, bar);</li><li>这个函数不会直接打印任何信息，而是会去查有没有人注册了回调函数（也就是挂钩子）；</li><li>如果有人注册了，就调用注册者的回调函数，把参数 foo, bar 传进去。<br>就像我上面举的 trigger_event(cb) 的例子。<br>这样做有两个好处：</li><li>内核代码本身 不再关心调试或跟踪逻辑，只留了个钩子点；</li><li>回调函数可以接收类型明确的结构体指针，效率更高，不需要去解析格式化字符串了。</li><li>但是问题是：你每次想使用 tracepoint，就要写一堆 callback 函数，重复又繁琐。</li></ul><p><strong>为了解决“写回调太麻烦”的问题：TRACE_EVENT() 宏诞生：</strong><br>这个宏帮你自动生成：<br>        - tracepoint 的定义；<br>        - 对应的 callback 函数（钩子函数）；<br>        - 数据格式化的逻辑。<br>你只需要写一个宏描述，比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">TRACE_EVENT(my_event,<br>    TP_PROTO(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b),<br>    TP_ARGS(a, b),<br>    TP_STRUCT__entry(<br>        __field(<span class="hljs-type">int</span>, a)<br>        __field(<span class="hljs-type">int</span>, b)<br>    ),<br>    TP_fast_assign(<br>        __entry-&gt;a = a;<br>        __entry-&gt;b = b;<br>    ),<br>    TP_printk(<span class="hljs-string">&quot;a=%d b=%d&quot;</span>, __entry-&gt;a, __entry-&gt;b)<br>);<br></code></pre></td></tr></table></figure><p>然后一切都自动生成，Ftrace、perf、LTTng、SystemTap 都能用这套系统来进行跟踪。<br>TRACE_EVENT()宏的剖析<br><strong>自动化跟踪点有各种必须满足的要求：</strong></p><ul><li>它必须创建一个可以放置在内核代码中的跟踪点。</li><li>它必须创建一个可以挂接到该跟踪点的回调函数。</li><li>回调函数必须能够以最快的方式将传递给它的数据记录到跟踪器环形缓冲区中。</li><li>它必须创建一个函数，可以解析记录到环形缓冲区的数据并将其转换为跟踪器可以显示给用户的人类可读的格式。<br><strong>为了实现这一点，TRACE_EVENT()宏被分解为六个部分</strong>，它们与宏的参数相对应：<br>TRACE_EVENT（名称、协议、参数、结构、分配、打印）</li><li>name——要创建的跟踪点的名称。</li><li>原型- 跟踪点回调的原型</li><li>args - 与原型匹配的参数。</li><li>struct - 跟踪器可以使用（但不是必须）来存储传递到跟踪点的数据的结构。</li><li>分配——以类似 C 的方式将数据分配给结构。</li><li>print - 以人类可读的 ASCII 格式输出结构的方式。</li></ul><table><thead><tr><th>Tracepoint 名称</th><th>用途简介</th></tr></thead><tbody><tr><td><code>sched_switch</code></td><td>核心 tracepoint，任务切换时触发</td></tr><tr><td><code>sched_wakeup</code></td><td>有任务被唤醒（通常进入可运行队列）时触发</td></tr><tr><td><code>sched_wakeup_new</code></td><td>新创建任务唤醒时触发（区别于已有任务）</td></tr><tr><td><code>sched_migrate_task</code></td><td>任务在 CPU 之间迁移时触发</td></tr><tr><td><code>sched_kthread_stop</code> &#x2F; <code>_ret</code></td><td>内核线程停止相关</td></tr><tr><td><code>sched_kthread_work_*</code></td><td>内核线程 workqueue 调度过程</td></tr><tr><td><code>sched_process_fork</code></td><td>创建子进程时触发</td></tr><tr><td><code>sched_process_exec</code></td><td>exec 调用替换程序映像时触发</td></tr><tr><td><code>sched_process_exit</code></td><td>任务退出时触发</td></tr></tbody></table><p><strong>核心tracepoint</strong>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Tracepoint for task switches, performed by the scheduler:</span><br><span class="hljs-comment"> */</span><br>TRACE_EVENT(sched_switch,<br><br>TP_PROTO(<span class="hljs-type">bool</span> preempt,<br> <span class="hljs-keyword">struct</span> task_struct *prev,<br> <span class="hljs-keyword">struct</span> task_struct *next,<br> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> prev_state),<br><br>TP_ARGS(preempt, prev, next, prev_state),<br><br>TP_STRUCT__entry(<br>__array(<span class="hljs-type">char</span>,prev_comm,TASK_COMM_LEN)<br>__field(<span class="hljs-type">pid_t</span>,prev_pid)<br>__field(<span class="hljs-type">int</span>,prev_prio)<br>__field(<span class="hljs-type">long</span>,prev_state)<br>__array(<span class="hljs-type">char</span>,next_comm,TASK_COMM_LEN)<br>__field(<span class="hljs-type">pid_t</span>,next_pid)<br>__field(<span class="hljs-type">int</span>,next_prio)<br>),<br><br>TP_fast_assign(<br><span class="hljs-built_in">memcpy</span>(__entry-&gt;prev_comm, prev-&gt;comm, TASK_COMM_LEN);<br>__entry-&gt;prev_pid= prev-&gt;pid;<br>__entry-&gt;prev_prio= prev-&gt;prio;<br>__entry-&gt;prev_state= __trace_sched_switch_state(preempt, prev_state, prev);<br><span class="hljs-built_in">memcpy</span>(__entry-&gt;next_comm, next-&gt;comm, TASK_COMM_LEN);<br>__entry-&gt;next_pid= next-&gt;pid;<br>__entry-&gt;next_prio= next-&gt;prio;<br><span class="hljs-comment">/* XXX SCHED_DEADLINE */</span><br>),<br><br>TP_printk(<span class="hljs-string">&quot;prev_comm=%s prev_pid=%d prev_prio=%d prev_state=%s%s ==&gt; next_comm=%s next_pid=%d next_prio=%d&quot;</span>,<br>__entry-&gt;prev_comm, __entry-&gt;prev_pid, __entry-&gt;prev_prio,<br><br>(__entry-&gt;prev_state &amp; (TASK_REPORT_MAX - <span class="hljs-number">1</span>)) ?<br>  __print_flags(__entry-&gt;prev_state &amp; (TASK_REPORT_MAX - <span class="hljs-number">1</span>), <span class="hljs-string">&quot;|&quot;</span>,<br>&#123; TASK_INTERRUPTIBLE, <span class="hljs-string">&quot;S&quot;</span> &#125;,<br>&#123; TASK_UNINTERRUPTIBLE, <span class="hljs-string">&quot;D&quot;</span> &#125;,<br>&#123; __TASK_STOPPED, <span class="hljs-string">&quot;T&quot;</span> &#125;,<br>&#123; __TASK_TRACED, <span class="hljs-string">&quot;t&quot;</span> &#125;,<br>&#123; EXIT_DEAD, <span class="hljs-string">&quot;X&quot;</span> &#125;,<br>&#123; EXIT_ZOMBIE, <span class="hljs-string">&quot;Z&quot;</span> &#125;,<br>&#123; TASK_PARKED, <span class="hljs-string">&quot;P&quot;</span> &#125;,<br>&#123; TASK_DEAD, <span class="hljs-string">&quot;I&quot;</span> &#125;) :<br>  <span class="hljs-string">&quot;R&quot;</span>,<br><br>__entry-&gt;prev_state &amp; TASK_REPORT_MAX ? <span class="hljs-string">&quot;+&quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>__entry-&gt;next_comm, __entry-&gt;next_pid, __entry-&gt;next_prio)<br>);<br></code></pre></td></tr></table></figure><p>除第一个参数外，所有参数都封装在另一个宏中（TP_PROTO、TP_ARGS、TP_STRUCT__entry、 TP_fast_assign和TP_printk ）。这些宏在处理过程中提供了更多控制，并且允许在TRACE_EVENT()宏中使用逗号。<br>第<strong>一</strong>个参数是名称:<br>第<strong>二</strong>个参数是原型: 它既是添加到内核代码的 tracepoint 的原型，也是回调函数的原型。tracepoint 调用回调函数，就像回调函数在 tracepoint 的位置被调用一样。<br>第<strong>三</strong>个参数是原型使用的参数:这看起来可能有点奇怪，但这不仅是TRACE_EVENT() 宏所必需的，也是底层 tracepoint 基础架构所必需的。tracepoint 代码在激活时会调用回调函数（一个 tracepoint 可能被分配多个回调函数）。创建 tracepoint 的宏必须能够访问原型和参数。下面展示了 tracepoint 宏实现此目的所需的步骤：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> TRACE_POINT(name, proto, args) \</span><br><span class="hljs-meta">void trace_##name(proto)            \</span><br><span class="hljs-meta">&#123;                                   \</span><br><span class="hljs-meta">        <span class="hljs-keyword">if</span> (trace_##name##_active)  \</span><br><span class="hljs-meta">                callback(args);     \</span><br><span class="hljs-meta">&#125;</span><br></code></pre></td></tr></table></figure><p>第<strong>四</strong>个参数是结构: 这个结构 决定了每次 tracepoint 被触发时要记录什么内容到 trace buffer（跟踪缓冲区）中。定义 trace buffer 结构体字段; <em>就是告诉内核 ring buffer 要有哪几个字段、每个字段占多大</em><br>第<strong>五</strong>个参数是任务: TP_fast_assign() 的主要作用就是将事件采样时的数据，写入到 tracepoint 对应的环形缓冲区中，其填充的对象就是 TP_STRUCT__entry 中定义的结构体字段。 __entry 是指向 TP_STRUCT__entry 中定义结构的指针<br>第<strong>六</strong>个参数是打印: 定义 ftrace &#x2F; trace-cmd &#x2F; perf 等工具在输出 trace 事件时的格式字符串，相当于 printf 格式。</p><p><strong>eBPF</strong>（Extended Berkeley Packet Filter） 是 Linux 内核中的一个强大机制，它允许你在内核空间中安全、受控地运行小程序，实现诸如：</p><ul><li>性能分析（比如替代 perf 工具）</li><li>系统调用跟踪（比如替代 strace）</li><li>网络包过滤&#x2F;监控（替代 iptables, tcpdump 等）</li><li>安全监控、沙箱</li></ul><p>它最牛的地方在于：<br><strong>无需改内核代码、无需加载内核模块，就可以“在内核里运行代码”。</strong></p><p>eBPF 程序：</p><ul><li>是写在用户空间的程序（用 C 写，或者用更高级语言生成）</li><li>编译成 eBPF 字节码（像汇编一样）</li><li>加载到内核中</li><li>在某些钩子点（比如 tracepoint、kprobe、syscall）运行</li></ul><p>eBPF 可以挂载到 tracepoint 上：</p><ul><li>监听调度器行为（比如哪个进程切了谁）</li><li>拿到 sched_switch 提供的各种数据字段（prev_pid, next_pid, prev_state, …）</li><li>再把这些信息统计、上报、过滤、可视化</li></ul><p>在 TP_STRUCT__entry(…) 中定义了 tracepoint 产生的数据结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  <span class="hljs-type">char</span> prev_comm[TASK_COMM_LEN];<br>  <span class="hljs-type">pid_t</span> prev_pid;<br>  <span class="hljs-type">int</span> prev_prio;<br>  <span class="hljs-type">long</span> prev_state;<br>  <span class="hljs-type">char</span> next_comm[TASK_COMM_LEN];<br>  <span class="hljs-type">pid_t</span> next_pid;<br>  <span class="hljs-type">int</span> next_prio;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这些就是 eBPF 程序“能看到、能读取”的字段。<br><strong>因为：</strong></p><ul><li>内核会把这些字段以结构体形式写入 ring buffer（跟踪缓冲区）</li><li>eBPF 程序附加上去之后，会被传一个 ctx（上下文指针）</li><li>程序通过读取 ctx 中的字段来做分析处理</li></ul><p>strace 是 纯用户态的工具，它基于 Linux 提供的 ptrace() 系统调用，通过 “截获进程的系统调用入口和返回” 实现功能。它并不知道 tracepoint 的存在，也不使用它。</p><p><strong>什么叫“动态注入 eBPF 所需字段布局”？</strong><br>意思就是：</p><ul><li>你不需要在写内核代码时就把 eBPF 写进去</li><li>内核只需要在 tracepoint 里用 TRACE_EVENT 正确定义了字段布局</li><li>eBPF 程序在运行时 attach 到该 tracepoint，就能动态读取这些字段</li><li>这就是“动态注入”：<ul><li>不改内核</li><li>不重启系统</li><li>eBPF 程序运行时 attach</li><li>按 tracepoint 给出的字段布局访问数据</li></ul></li></ul><table><thead><tr><th>内容</th><th>意义</th></tr></thead><tbody><tr><td><code>TRACE_EVENT()</code></td><td>定义一个 tracepoint 的结构体格式、打印格式</td></tr><tr><td><code>/sys/kernel/debug/tracing/events/*/format</code></td><td>描述 tracepoint 的字段结构和 printf 格式，供工具解析使用</td></tr><tr><td><code>define_trace.h</code></td><td>把 <code>TRACE_EVENT</code> 宏展开为函数定义，必须放在 #endif 外面。</td></tr><tr><td><code>CREATE_TRACE_POINTS</code></td><td>告诉编译器在这个 C 文件中生成函数定义，只能有一个文件这样写</td></tr><tr><td>tracepoint 的使用</td><td>只需调用 <code>trace_xxx()</code> 函数就能在内核中记录事件</td></tr></tbody></table>]]></content:encoded>
      
      
      
      <category domain="https://GoKo-Son626.github.io/tags/Trace/">Trace</category>
      
      
      <comments>https://goko-son626.github.io/post/Trace-use-1.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>qspinlock</title>
      <link>https://goko-son626.github.io/post/qspinlock.html</link>
      <guid>https://goko-son626.github.io/post/qspinlock.html</guid>
      <pubDate>Sat, 03 May 2025 01:25:24 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;qspinlock is a hybrid spinlock combining the fairness of ticket locks with the scalability of MCS locks: it uses only 4 bytes under low contention, falls back to an MCS queue under heavy load, and optimizes the second contender with a pending bit. It improves fairness and scalability but should not be enabled on RISC-V platforms lacking Ziccrse or Zabha.&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>qspinlock is a hybrid spinlock combining the fairness of ticket locks with the scalability of MCS locks: it uses only 4 bytes under low contention, falls back to an MCS queue under heavy load, and optimizes the second contender with a pending bit. It improves fairness and scalability but should not be enabled on RISC-V platforms lacking Ziccrse or Zabha.</strong></em></li></ul><span id="more"></span><h4 id="1-传统spinlock："><a href="#1-传统spinlock：" class="headerlink" title="1. 传统spinlock："></a>1. 传统spinlock：</h4><ul><li>多个等待的 CPU 核心中，谁先获得锁并无保证，存在公平性问题，同时缓存一致性开销大（如MESI），CPU核心越大，cache需求越厉害，缺乏可扩展性</li></ul><p><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/spinlock/image-8.png" alt="alt text"></p><h4 id="2-Ticket-spinlock"><a href="#2-Ticket-spinlock" class="headerlink" title="2. Ticket spinlock"></a>2. Ticket spinlock</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> TICKET_NEXT16</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>u32 lock;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">raw_tickets</span> &#123;</span><br><span class="hljs-comment">/* little endian */</span><br>u16 owner;<br>u16 next;<br>&#125; tickets;<br>&#125;;<br>&#125; <span class="hljs-type">arch_spinlock_t</span>;<br><br>my_ticket = atomic_fetch_inc(&amp;lock-&gt;tickets.next);<br><br> <span class="hljs-keyword">while</span> (lock-&gt;tickets.owner != my_ticket)<br>    cpu_relax();<br></code></pre></td></tr></table></figure><ul><li>解决了公平问题，防止某些 CPU 永远得不到锁，但所有核都轮询同一个owner变量，read cache line成热点，限制扩展性</li></ul><h4 id="3-MCS-lock"><a href="#3-MCS-lock" class="headerlink" title="3. MCS lock"></a>3. MCS lock</h4><ul><li>本质上是一种基于链表结构的自旋锁，每个CPU有一个对应的节点(锁的副本)，基于各自不同的副本变量进行等待，锁本身是共享的，但队列节点是线程自己维护的，每个CPU只需要查询自己对应的本地cache line，仅在这个变量发生变化的时候，才需要读取内存和刷新这条cache line, 不像 classic&#x2F;ticket对共享变量进行spin</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_spinlock</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_spinlock</span> *<span class="hljs-title">next</span>;</span><br><span class="hljs-type">int</span> locked; <span class="hljs-comment">/* 1 if lock acquired */</span><br><span class="hljs-type">int</span> count;  <span class="hljs-comment">/* nesting count, see qspinlock.c */</span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">mcs_spin_lock</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mcs_spinlock **lock, <span class="hljs-keyword">struct</span> mcs_spinlock *node)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_spinlock</span> *<span class="hljs-title">prev</span>;</span><br><br><span class="hljs-comment">/* Init node */</span><br>node-&gt;locked = <span class="hljs-number">0</span>;<br>node-&gt;next   = <span class="hljs-literal">NULL</span>;<br><br>prev = xchg(lock, node);<br><span class="hljs-keyword">if</span> (likely(prev == <span class="hljs-literal">NULL</span>)) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>WRITE_ONCE(prev-&gt;next, node);<br><br><span class="hljs-comment">/* Wait until the lock holder passes the lock down. */</span><br>arch_mcs_spin_lock_contended(&amp;node-&gt;locked);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>每个 CPU 线程创建的node 是独立的，每个线程都有自己的 node 实例。但是结构体中多了一个指针使结构体变大了，导致了“内存开销问题”：MCS 锁把竞争带来的 cache-line 抖动降低了，但牺牲了一些内存和部分结构管理的成本。</li></ul><h4 id="4-qspinlock"><a href="#4-qspinlock" class="headerlink" title="4. qspinlock"></a>4. qspinlock</h4><p><strong>include&#x2F;asm-generic&#x2F;qspinlock_types.h:</strong> 锁数据结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">qspinlock</span> &#123;</span><br>        <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>                <span class="hljs-type">atomic_t</span> val;<br><br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                 * By using the whole 2nd least significant byte for the</span><br><span class="hljs-comment">                 * pending bit, we can allow better optimization of the lock</span><br><span class="hljs-comment">                 * acquisition for the pending bit holder.</span><br><span class="hljs-comment">                 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __LITTLE_ENDIAN</span><br>                <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>                        u8      locked;<br>                        u8      pending;<br>                &#125;;<br>                <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>                        u16     locked_pending;<br>                        u16     tail;<br>                &#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>                <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>                        u16     tail;<br>                        u16     locked_pending;<br>                &#125;;<br>                <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>                        u8      reserved[<span class="hljs-number">2</span>];<br>                        u8      pending;<br>                        u8      locked;<br>                &#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        &#125;;<br>&#125; <span class="hljs-type">arch_spinlock_t</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Initializier</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __ARCH_SPIN_LOCK_UNLOCKED       &#123; &#123; .val = ATOMIC_INIT(0) &#125; &#125;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Bitfields in the atomic value:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * When NR_CPUS &lt; 16K</span><br><span class="hljs-comment"> *  0- 7: locked byte</span><br><span class="hljs-comment"> *     8: pending</span><br><span class="hljs-comment"> *  9-15: not used</span><br><span class="hljs-comment"> * 16-17: tail index</span><br><span class="hljs-comment"> * 18-31: tail cpu (+1)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * When NR_CPUS &gt; = 16K</span><br><span class="hljs-comment"> *  0- 7: locked byte</span><br><span class="hljs-comment"> *     8: pending</span><br><span class="hljs-comment"> *  9-10: tail index</span><br><span class="hljs-comment"> * 11-31: tail cpu (+1)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Q_SET_MASK(type)       (((1U &lt;&lt; _Q_ ## type ## _BITS) - 1)\</span><br><span class="hljs-meta">                                      &lt;&lt; _Q_ ## type ## _OFFSET)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Q_LOCKED_OFFSET        0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Q_LOCKED_BITS          8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Q_LOCKED_MASK          _Q_SET_MASK(LOCKED)</span><br></code></pre></td></tr></table></figure><p><strong>When NR_CPUS &lt; 16K：</strong><br><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/spinlock/image-7.png" alt="alt text"></p><ul><li><code>locked</code>：用来表示这个锁是否被人持有（0：无，1：有）</li><li><code>pending</code>：可以理解为最优先持锁位，即当unlock之后只有这个位的CPU最先持锁，也有1和0</li><li><code>tail</code>：有idx+CPU构成，用来标识等待队列的最后一个节点。</li><li><code>tail_idx</code>：就是index，它作为mcs_nodes数组的下标使用</li><li><code>tail_CPU</code>：用来表示CPU的编号+1，+1因为规定tail为0的时候表示等待队列中没有成员</li></ul><p><strong>kernel&#x2F;locking&#x2F;mcs_spinlock.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_spinlock</span> &#123;</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_spinlock</span> *<span class="hljs-title">next</span>;</span><br>        <span class="hljs-type">int</span> locked; <span class="hljs-comment">/* 1 if lock acquired */</span><br>        <span class="hljs-type">int</span> count;  <span class="hljs-comment">/* nesting count, see qspinlock.c */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><code>locked = 1</code>:只是说锁传到了当前加节点，但是当前节点还需要主动申请锁(qspinlock -&gt; locked &#x3D; 1)<br><code>count</code>：针对四种上下文用于追踪当前用了第几个 node（即 idx），最大为4,不够用时就fallback不排队直接自旋</p><p><strong>kernel&#x2F;locking&#x2F;qspinlock.c:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_NODES       4</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">qnode</span> &#123;</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_spinlock</span> <span class="hljs-title">mcs</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_PARAVIRT_SPINLOCKS</span><br>        <span class="hljs-type">long</span> reserved[<span class="hljs-number">2</span>];<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Per-CPU queue node structures; we can never have more than 4 nested</span><br><span class="hljs-comment"> * contexts: task, softirq, hardirq, nmi.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Exactly fits one 64-byte cacheline on a 64-bit architecture.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * PV doubles the storage and uses the second cacheline for PV state.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-title function_">DEFINE_PER_CPU_ALIGNED</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> qnode, qnodes[MAX_NODES])</span>;<br></code></pre></td></tr></table></figure><ul><li>一个 CPU 上可能嵌套多个锁, <code>qnodes</code>针对四种上下文情况下，例：进程上下文中发生中断后再次获取锁</li><li>PER_CPU的优点是快，可防止抢锁时再mallock或临时分配导致延迟，成本等问题</li></ul><p><strong>申请锁：</strong></p><ol><li>快速申请<br><strong>include&#x2F;asm-generic&#x2F;qspinlock.h</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * queued_spin_lock - acquire a queued spinlock</span><br><span class="hljs-comment"> * @lock: Pointer to queued spinlock structure</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">void</span> <span class="hljs-title function_">queued_spin_lock</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> qspinlock *lock)</span><br>&#123;<br><span class="hljs-type">int</span> val = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (likely(atomic_try_cmpxchg_acquire(&amp;lock-&gt;val, &amp;val, _Q_LOCKED_VAL)))<br><span class="hljs-keyword">return</span>;<br><br>queued_spin_lock_slowpath(lock, val);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/spinlock/image-9.png" alt="alt text"></p><ol start="2"><li>中速申请</li></ol><ul><li>快速申请失败，queue中为空时，设置锁的pending位</li><li>再次检测（检查中间是否有其它cpu进入）</li><li>一直循环检测locked位</li><li>当locked位为0时，清除pending位获得锁</li></ul><p><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/spinlock/image-11.png" alt="alt text"></p><ol start="3"><li>慢速申请</li></ol><p><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/spinlock/image-12.png" alt="alt text"></p><table><thead><tr><th>申请</th><th>操作</th></tr></thead><tbody><tr><td>快速申请</td><td>这个锁当前没有人持有，直接通过cmpxchg()设置locked域即可获取了锁</td></tr><tr><td>中速申请</td><td>锁已经被人持有，但是MCS链表没有其他人，有且仅有一个人在等待这个锁。设置pending域，表示是第一顺位继承者，自旋等待lock-&gt; locked清0，即锁持有者释放锁</td></tr><tr><td>慢速申请</td><td>进入到queue中自旋等待，若为队列头（队列中没有等待的cpu），说明它已排到最前，可以开始尝试获取锁；否则，它会自旋等待前一个节点释放锁，并通知它可以尝试获取锁了</td></tr></tbody></table><p><strong>end:</strong></p><ul><li><p>如果只有1个或2个CPU试图获取锁，那么只需要一个4字节的qspinlock就可以了，其所占内存的大小和ticket spinlock一样。当有3个以上的CPU试图获取锁，则需要(N-2)个MCS node</p></li><li><p>qspinlock中加入”pending”位域的意义，如果是两个CPU试图获取锁，那么第二个CPU只需要简单地设置”pending”为1，而不用创建一个MCS node</p></li><li><p>试图加锁的CPU数目超过3个，使用ticket spinlock机制就会造成多个CPU的cache line刷新的问题，而qspinlock可以利用MCS node队列来解决这个问题</p></li><li><p>在多核争用严重场景下，qspinlock 让等待者在本地内存区域自旋，减少了锁的缓存抖动和对总线的竞争消耗</p></li><li><p>RISCV_QUEUED_SPINLOCKS 只应在平台具有 Zabha 或 Ziccrse 时启用，不支持的情况不要选用</p></li><li><p>优先级反转问题，queue会保证了FIFO提高了公平性，但它无法感知任务的优先级，可能因为排在队列前方的低优先级任务未释放锁而发生等待，从而导致 优先级反转</p></li></ul>]]></content:encoded>
      
      
      
      <category domain="https://GoKo-Son626.github.io/tags/riscv/">riscv</category>
      
      
      <comments>https://goko-son626.github.io/post/qspinlock.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo博客搭建</title>
      <link>https://goko-son626.github.io/post/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html</link>
      <guid>https://goko-son626.github.io/post/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html</guid>
      <pubDate>Thu, 01 May 2025 05:25:09 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;使用hexo和GitHub Pagtes部署一个自己的博客&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>使用hexo和GitHub Pagtes部署一个自己的博客</strong></em></li></ul><span id="more"></span><h3 id="1-安装并初始化Hexo"><a href="#1-安装并初始化Hexo" class="headerlink" title="1. 安装并初始化Hexo"></a>1. 安装并初始化Hexo</h3><ul><li><ol><li>安装 Hexo CLI</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><ul><li><ol start="2"><li>初始化博客项目目录</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mkdir my-blog &amp;&amp; cd my-blog<br>hexo init<br>npm install<br></code></pre></td></tr></table></figure><ul><li><ol start="3"><li>本地预览</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo server<br></code></pre></td></tr></table></figure><ul><li>启动本地服务：在浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 查看效果</li></ul><h3 id="2-配置-GitHub-Pages-部署"><a href="#2-配置-GitHub-Pages-部署" class="headerlink" title="2.  配置 GitHub Pages 部署"></a>2.  配置 GitHub Pages 部署</h3><ul><li><ol><li>创建GitHub仓库</li></ol><ul><li>创建一个仓库，名字叫 你的GitHub用户名.github.io</li><li>比如你是 goko，就叫 goko.github.io</li></ul></li><li><ol start="2"><li>安装部署插件</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><ul><li><ol start="3"><li>修改 _config.yml（根目录下）添加部署配置：</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">deploy:<br>  type: git<br>  # repo建议使用SSH, SSH免密<br>  repo: https://github.com/你的GitHub用户名/你的GitHub用户名.github.io.git<br>  branch: main  # 或者 master，看你的默认分支<br></code></pre></td></tr></table></figure><ul><li><ol start="4"><li>生成并部署博客</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></td></tr></table></figure><h3 id="3-域名-com-绑定"><a href="#3-域名-com-绑定" class="headerlink" title="3. 域名(.com)绑定"></a>3. 域名(<xxxx>.com)绑定</xxxx></h3><ul><li><ol><li>添加域名(在my-blog下)</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo &quot;&lt;xxxx&gt;.com&quot; &gt; source/CNAME<br># 或者可以：echo &quot;www.&lt;xxxx&gt;.com&quot; &gt; source/CNAME<br># 只能添加一个，而且两个需要添加不同的域名解析（如下）<br></code></pre></td></tr></table></figure><ul><li><ol start="2"><li>重新部署</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><ul><li><ol start="3"><li>设置 DNS 解析指向 GitHub Pages</li></ol></li></ul><p><strong>A. 使用裸域名（apex 域名）goku72.com</strong></p><table><thead><tr><th>记录类型</th><th>主机记录</th><th>记录值</th><th>说明</th></tr></thead><tbody><tr><td>A</td><td>@</td><td>185.199.108.153</td><td>GitHub Pages IP</td></tr><tr><td>A</td><td>@</td><td>185.199.109.153</td><td>GitHub Pages IP</td></tr><tr><td>A</td><td>@</td><td>185.199.110.153</td><td>GitHub Pages IP</td></tr><tr><td>A</td><td>@</td><td>185.199.111.153</td><td>GitHub Pages IP</td></tr></tbody></table><p>example aliyun:</p><ol><li>选择业务需求: 将网站域名解析到服务器IPv4地址</li><li>选择网站域名(主机记录): <xxxx>.com（对应设置“@”主机记录）</xxxx></li><li>填写 IP（记录值）：</li></ol><ul><li>在输入框里粘贴以下四行（每一行一个 IP）：</li><li><pre><code>  &gt; 185.199.109.153  &gt; 185.199.108.153  &gt; 185.199.110.153  &gt; 185.199.111.153</code></pre></li></ul><hr><p><strong>B. 使用 <a href="http://www.goku72.com/">www.goku72.com</a> 作为主域名</strong></p><table><thead><tr><th>记录类型</th><th>主机记录</th><th>记录值</th><th>说明</th></tr></thead><tbody><tr><td>CNAME</td><td>www</td><td>&lt;github用户名&gt;.github.io.</td><td>指向你的 GitHub 用户页仓库</td></tr></tbody></table><p>example aliyun:</p><ol><li>选择业务需求: 将网站域名解析到另外的目标域名</li><li>选择网站域名(主机记录): www.<xxxx>.com（对应设置“www”主机记录）</xxxx></li><li>填写 IP（记录值）：&lt;github用户名&gt;.github.io. (最有有一个符号”.”)</li></ol><h3 id="4-设置主题"><a href="#4-设置主题" class="headerlink" title="4. 设置主题"></a>4. 设置主题</h3><ul><li>cd my-blog&#x2F;themes</li><li>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> butterfly</li><li>修改_config.yml: <ul><li>theme: butterfly</li></ul></li><li>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</li></ul><p><strong>更多主题</strong>：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p><strong>注：</strong></p><ul><li>如果AB两个方式都添加了，只需要在 Hexo 项目的 source&#x2F;CNAME 文件中写 www.<xxxx>.com，GitHub Pages 就会自动把 goku72.com 重定向过去，无需额外设置！</xxxx></li><li>后续换域名只需要：阿里云重新解析 + 修改 source&#x2F;CNAME + 重新部署 Hexo，就能完成域名迁移。</li><li>有些主题可能需要下载插件</li></ul>]]></content:encoded>
      
      
      
      <category domain="https://GoKo-Son626.github.io/tags/hexo/">hexo</category>
      
      
      <comments>https://goko-son626.github.io/post/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>xv6-riscv_ch4</title>
      <link>https://goko-son626.github.io/post/xv6-riscv-ch4.html</link>
      <guid>https://goko-son626.github.io/post/xv6-riscv-ch4.html</guid>
      <pubDate>Wed, 12 Feb 2025 13:59:10 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;How traps and system calls work on RISC-V. It introduces the trap mechanism, how user programs invoke system calls, how the kernel handles those traps, and how arguments are passed. It also covers kernel-mode traps, page faults, and real-world implications like protection and isolation.&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>How traps and system calls work on RISC-V. It introduces the trap mechanism, how user programs invoke system calls, how the kernel handles those traps, and how arguments are passed. It also covers kernel-mode traps, page faults, and real-world implications like protection and isolation.</strong></em></li></ul><span id="more"></span><h2 id="ch4-Traps-and-system-calls"><a href="#ch4-Traps-and-system-calls" class="headerlink" title="ch4: Traps and system calls"></a><strong>ch4: Traps and system calls</strong></h2><ul><li><p>There are three kinds of event which cause the CPU to set aside ordinary execution of instructions and force a transfer of control to special code that handles the event. and we uses <code>trap</code> as a generic term for these situations.</p><ul><li>One situation is a <code>systemcall</code>, when a user program executes the ecall instruction to ask the kernel to do something for it. </li><li>Another situation is an <code>exception</code>: an instruction (user or kernel) does something illegal, such as divide by zero or use an invalid virtual address. </li><li>The third situation is a <code>device interrupt</code>, when a device signals that it needs attention, for example when the disk hardware finishes a read or write request.</li></ul></li><li><p>Xv6 handles all traps in the kernel; traps are not delivered to user code. Handling traps in the kernel is natural for system calls. It makes sense for interrupts since isolation demands that only the kernel be allowed to use devices, and because the kernel is a convenient mechanism with which to share devices among multiple processes. It also makes sense for exceptions since xv6 responds to all exceptions from user space by killing the offending program.</p></li><li><p>Xv6 trap handling proceeds in four stages: </p><ul><li>hardware actions taken by the RISC-V CPU,</li><li>some assembly instructions that prepare the way for kernel C code</li><li>a C function that decides what to do with the trap</li><li>and the system call or device-driver service routine.</li></ul><p>While commonality among the three trap types suggests that a kernel could handle all traps with a single code path, it turns out to be convenient to have separate code for two distinct cases: traps from user space, and traps from kernel space. Kernel code (assembler or C) that processes a trap is often called a handler; the first handler instructions are usually written in assembler (rather than C) and are sometimes called a vector.</p></li></ul><h3 id="4-1-RISC-V-trap-machinery机制"><a href="#4-1-RISC-V-trap-machinery机制" class="headerlink" title="4.1 RISC-V trap machinery机制"></a>4.1 RISC-V trap machinery机制</h3><ul><li><p>Each RISC-V CPU has a set of control registers that the kernel writes to tell the CPU how to handle traps, and that the kernel can read to find out about a trap that has occurred. The RISC-V documents contain the full story [3]. riscv.h (kernel&#x2F;riscv.h:1) contains definitions that xv6 uses. Here’s an outline of the most important registers:</p><ul><li><code>stvec</code>: The kernel writes the address of its trap handler here; the RISC-V jumps to the address in stvec to handle a trap.</li><li><code>sepc</code>: When a trap occurs, RISC-V saves the program counter here (since the pc is then overwritten with the value in stvec). The sret (return from trap) instruction copies sepc to the pc. The kernel can write sepc to control where sret goes.</li><li><code>scause</code>: RISC-V puts a number here that describes the reason for the trap.</li><li><code>sscratch</code>: The trap handler code uses sscratch to help it avoid overwriting user registers before saving them.</li><li><code>sstatus</code>: The SIE bit in sstatus controls whether device interrupts are enabled. If the kernel clears SIE, the RISC-V will defer device interrupts until the kernel sets SIE. The SPP bit indicates whether a trap came from user mode or supervisor mode, and controls to what mode sret returns.</li></ul><p>The above registers relate to traps handled in supervisor mode, and they cannot be read or written in user mode. Each CPU on a multi-core chip has its own set of these registers, and more than one CPU may be handling a trap at any given time.</p></li><li><p>When it needs to force a trap, the RISC-V hardware does the following for all trap types:</p><ol><li>If the trap is a device interrupt, and the sstatus SIE bit is clear, don’t do any of the following.</li><li>Disable interrupts by clearing the SIE bit in sstatus.</li><li>Copy the pc to sepc.</li><li>Save the current mode (user or supervisor) in the SPP bit in sstatus.</li><li>Set scause to reflect the trap’s cause.</li><li>Set the mode to supervisor.</li><li>Copy stvec to the pc.</li><li>Start executing at the new pc.</li></ol><p>Note that the CPU doesn’t switch to the kernel page table, doesn’t switch to a stack in the kernel, and doesn’t save any registers other than the pc. Kernel software must perform these tasks. One reason that the CPU does minimal work during a traps is to provide flexibility to software; for example, some operating systems omit a page table switch in some situations to increase trap performance.<br>It’s worth thinking about whether any of the steps listed above could be omitted, perhaps in search of faster traps. Though there are situations in which a simpler sequence can work, many of the steps would be dangerous to omit in general. For example, suppose that the CPU didn’t switch program counters. Then a trap from user space could switch to supervisor mode while still running user instructions. Those user instructions could break user&#x2F;kernel isolation, for example by modifying the satp register to point to a page table that allowed accessing all of physical memory. It is thus important that the CPU switch to a kernel-specified instruction address, namely <code>stvec</code>.</p></li></ul><h3 id="4-2-Traps-from-user-space"><a href="#4-2-Traps-from-user-space" class="headerlink" title="4.2 Traps from user space"></a>4.2 Traps from user space</h3><p>Xv6 handles traps differently depending on whether the trap occurs while executing in the kernel<br>or in user code. Here is the story for traps from user code; Section 4.5 describes traps from kernel<br>code.<br>A trap may occur while executing in user space if the user program makes a system call (ecall<br>instruction), or does something illegal, or if a device interrupts. The high-level path of a trap from<br>user space is uservec (kernel&#x2F;trampoline.S:22), then usertrap (kernel&#x2F;trap.c:37); and when re-<br>turning, usertrapret (kernel&#x2F;trap.c:90) and then userret (kernel&#x2F;trampoline.S:101).<br>A major constraint on the design of xv6’s trap handling is the fact that the RISC-V hardware<br>does not switch page tables when it forces a trap. This means that the trap handler address in<br>stvec must have a valid mapping in the user page table, since that’s the page table in force when<br>the trap handling code starts executing. Furthermore, xv6’s trap handling code needs to switch to<br>the kernel page table; in order to be able to continue executing after that switch, the kernel page<br>table must also have a mapping for the handler pointed to by stvec.<br>Xv6 satisfies these requirements using a trampoline page. The trampoline page contains uservec,<br>the xv6 trap handling code that stvec points to. The trampoline page is mapped in every process’s<br>page table at address TRAMPOLINE, which is at the top of the virtual address space so that it will be<br>above memory that programs use for themselves. The trampoline page is also mapped at address<br>TRAMPOLINE in the kernel page table. See Figure 2.3 and Figure 3.3. Because the trampoline<br>page is mapped in the user page table, traps can start executing there in supervisor mode. Because<br>the trampoline page is mapped at the same address in the kernel address space, the trap handler<br>can continue to execute after it switches to the kernel page table.<br>The code for the uservec trap handler is in trampoline.S (kernel&#x2F;trampoline.S:22). When<br>uservec starts, all 32 registers contain values owned by the interrupted user code. These 32<br>values need to be saved somewhere in memory, so that later on the kernel can restore them before<br>returning to user space. Storing to memory requires use of a register to hold the address, but at this<br>point there are no general-purpose registers available! Luckily RISC-V provides a helping hand in<br>the form of the sscratch register. The csrw instruction at the start of uservec saves a0 in<br>sscratch. Now uservec has one register (a0) to play with.<br>uservec’s next task is to save the 32 user registers. The kernel allocates, for each process, a<br>page of memory for a trapframe structure that (among other things) has space to save the 32<br>user registers (kernel&#x2F;proc.h:43). Because satp still refers to the user page table, uservec needs<br>the trapframe to be mapped in the user address space. Xv6 maps each process’s trapframe at virtual<br>address TRAPFRAME in that process’s user page table; TRAPFRAME is just below TRAMPOLINE.<br>The process’s p-&gt;trapframe also points to the trapframe, though at its physical address so the<br>kernel can use it through the kernel page table.<br>Thus uservec loads address TRAPFRAME into a0 and saves all the user registers there,<br>including the user’s a0, read back from sscratch.<br>The trapframe contains the address of the current process’s kernel stack, the current CPU’s<br>hartid, the address of the usertrap function, and the address of the kernel page table. uservec<br>retrieves these values, switches satp to the kernel page table, and jumps to usertrap.<br>The job of usertrap is to determine the cause of the trap, process it, and return (kernel&#x2F;-<br>trap.c:37). It first changes stvec so that a trap while in the kernel will be handled by kernelvec<br>rather than uservec. It saves the sepc register (the saved user program counter), because<br>usertrap might call yield to switch to another process’s kernel thread, and that process might<br>return to user space, in the process of which it will modify sepc. If the trap is a system call,<br>usertrap calls syscall to handle it; if a device interrupt, devintr; otherwise it’s an ex-<br>ception, and the kernel kills the faulting process. The system call path adds four to the saved user<br>program counter because RISC-V, in the case of a system call, leaves the program pointer pointing<br>to the ecall instruction but user code needs to resume executing at the subsequent instruction.<br>On the way out, usertrap checks if the process has been killed or should yield the CPU (if this<br>trap is a timer interrupt).<br>The first step in returning to user space is the call to usertrapret (kernel&#x2F;trap.c:90). This<br>function sets up the RISC-V control registers to prepare for a future trap from user space: setting<br>stvec to uservec and preparing the trapframe fields that uservec relies on. usertrapret<br>sets sepc to the previously saved user program counter. At the end, usertrapret calls userret<br>on the trampoline page that is mapped in both user and kernel page tables; the reason is that as-<br>sembly code in userret will switch page tables.<br>usertrapret’s call to userret passes a pointer to the process’s user page table in a0<br>(kernel&#x2F;trampoline.S:101). userret switches satp to the process’s user page table. Recall that the<br>user page table maps both the trampoline page and TRAPFRAME, but nothing else from the kernel.<br>The trampoline page mapping at the same virtual address in user and kernel page tables allows<br>userret to keep executing after changing satp. From this point on, the only data userret<br>can use is the register contents and the content of the trapframe. userret loads the TRAPFRAME<br>address into a0, restores saved user registers from the trapframe via a0, restores the saved user<br>a0, and executes sret to return to user space.</p><h3 id="4-3-Code-Calling-system-calls"><a href="#4-3-Code-Calling-system-calls" class="headerlink" title="4.3 Code: Calling system calls"></a>4.3 Code: Calling system calls</h3><p>Chapter 2 ended with initcode.S invoking the exec system call (user&#x2F;initcode.S:11). Let’s look<br>at how the user call makes its way to the exec system call’s implementation in the kernel.<br>initcode.S places the arguments for exec in registers a0 and a1, and puts the system call<br>number in a7. System call numbers match the entries in the syscalls array, a table of function<br>pointers (kernel&#x2F;syscall.c:107). The ecall instruction traps into the kernel and causes uservec,<br>usertrap, and then syscall to execute, as we saw above.<br>syscall (kernel&#x2F;syscall.c:132) retrieves the system call number from the saved a7 in the trapframe<br>and uses it to index into syscalls. For the first system call, a7 contains SYS_exec (ker-<br>nel&#x2F;syscall.h:8), resulting in a call to the system call implementation function sys_exec.<br>When sys_exec returns, syscall records its return value in p-&gt;trapframe-&gt;a0. This will<br>cause the original user-space call to exec() to return that value, since the C calling convention<br>on RISC-V places return values in a0. System calls conventionally return negative numbers to<br>indicate errors, and zero or positive numbers for success. If the system call number is invalid,<br>syscall prints an error and returns −1.</p><h3 id="4-4-Code-System-call-arguments"><a href="#4-4-Code-System-call-arguments" class="headerlink" title="4.4 Code: System call arguments"></a>4.4 Code: System call arguments</h3><ul><li>System call implementations in the kernel need to find the arguments passed by user code. Because<br>user code calls system call wrapper functions, the arguments are initially where the RISC-V C<br>calling convention places them: in registers. The kernel trap code saves user registers to the current<br>process’s trap frame, where kernel code can find them. The kernel functions argint, argaddr,<br>and argfd retrieve the n ’th system call argument from the trap frame as an integer, pointer, or a file<br>descriptor. They all call argraw to retrieve the appropriate saved user register (kernel&#x2F;syscall.c:34).<br>Some system calls pass pointers as arguments, and the kernel must use those pointers to read<br>or write user memory. The exec system call, for example, passes the kernel an array of pointers<br>referring to string arguments in user space. These pointers pose two challenges. First, the user pro-<br>gram may be buggy or malicious, and may pass the kernel an invalid pointer or a pointer intended<br>to trick the kernel into accessing kernel memory instead of user memory. Second, the xv6 kernel<br>page table mappings are not the same as the user page table mappings, so the kernel cannot use<br>ordinary instructions to load or store from user-supplied addresses.<br>The kernel implements functions that safely transfer data to and from user-supplied addresses.<br>fetchstr is an example (kernel&#x2F;syscall.c:25). File system calls such as exec use fetchstr to<br>retrieve string file-name arguments from user space. fetchstr calls copyinstr to do the hard<br>work.<br>copyinstr (kernel&#x2F;vm.c:415) copies up to max bytes to dst from virtual address srcva in<br>the user page table pagetable. Since pagetable is not the current page table, copyinstr<br>uses walkaddr (which calls walk) to look up srcva in pagetable, yielding physical address<br>pa0. The kernel’s page table maps all of physical RAM at virtual addresses that are equal to the<br>RAM’s physical address. This allows copyinstr to directly copy string bytes from pa0 to dst.<br>walkaddr (kernel&#x2F;vm.c:109) checks that the user-supplied virtual address is part of the process’s user address space, so programs cannot trick the kernel into reading other memory. A similar<br>function, copyout, copies data from the kernel to a user-supplied address.</li></ul><h3 id="4-5-Traps-from-kernel-space"><a href="#4-5-Traps-from-kernel-space" class="headerlink" title="4.5 Traps from kernel space"></a>4.5 Traps from kernel space</h3><p>Xv6 handles traps from kernel code in a different way than traps from user code. When entering<br>the kernel, usertrap points stvec to the assembly code at kernelvec (kernel&#x2F;kernelvec.S:12).<br>Since kernelvec only executes if xv6 was already in the kernel, kernelvec can rely on<br>satp being set to the kernel page table, and on the stack pointer referring to a valid kernel stack.<br>kernelvec pushes all 32 registers onto the stack, from which it will later restore them so that<br>the interrupted kernel code can resume without disturbance.<br>kernelvec saves the registers on the stack of the interrupted kernel thread, which makes<br>sense because the register values belong to that thread. This is particularly important if the trap<br>causes a switch to a different thread – in that case the trap will actually return from the stack of the<br>new thread, leaving the interrupted thread’s saved registers safely on its stack.<br>kernelvec jumps to kerneltrap (kernel&#x2F;trap.c:135) after saving registers. kerneltrap<br>is prepared for two types of traps: device interrupts and exceptions. It calls devintr (kernel&#x2F;-<br>trap.c:185) to check for and handle the former. If the trap isn’t a device interrupt, it must be an<br>exception, and that is always a fatal error if it occurs in the xv6 kernel; the kernel calls panic and<br>stops executing.<br>If kerneltrap was called due to a timer interrupt, and a process’s kernel thread is running<br>(as opposed to a scheduler thread), kerneltrap calls yield to give other threads a chance to<br>run. At some point one of those threads will yield, and let our thread and its kerneltrap resume<br>again. Chapter 7 explains what happens in yield.<br>When kerneltrap’s work is done, it needs to return to whatever code was interrupted<br>by the trap. Because a yield may have disturbed sepc and the previous mode in sstatus,<br>kerneltrap saves them when it starts. It now restores those control registers and returns to<br>kernelvec (kernel&#x2F;kernelvec.S:38). kernelvec pops the saved registers from the stack and ex-<br>ecutes sret, which copies sepc to pc and resumes the interrupted kernel code.<br>It’s worth thinking through how the trap return happens if kerneltrap called yield due to<br>a timer interrupt.<br>Xv6 sets a CPU’s stvec to kernelvec when that CPU enters the kernel from user space;<br>you can see this in usertrap (kernel&#x2F;trap.c:29). There’s a window of time when the kernel has<br>started executing but stvec is still set to uservec, and it’s crucial that no device interrupt occur<br>during that window. Luckily the RISC-V always disables interrupts when</p><h3 id="4-6-Page-fault-exceptions"><a href="#4-6-Page-fault-exceptions" class="headerlink" title="4.6 Page-fault exceptions"></a>4.6 Page-fault exceptions</h3><h3 id="4-7-Real-world"><a href="#4-7-Real-world" class="headerlink" title="4.7 Real world"></a>4.7 Real world</h3><h3 id="4-8-Exercises"><a href="#4-8-Exercises" class="headerlink" title="4.8 Exercises"></a>4.8 Exercises</h3>]]></content:encoded>
      
      
      
      <category domain="https://GoKo-Son626.github.io/tags/xv6-riscv/">xv6-riscv</category>
      
      
      <comments>https://goko-son626.github.io/post/xv6-riscv-ch4.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>xv6-riscv_ch3</title>
      <link>https://goko-son626.github.io/post/xv6-riscv-ch3.html</link>
      <guid>https://goko-son626.github.io/post/xv6-riscv-ch3.html</guid>
      <pubDate>Mon, 10 Feb 2025 01:25:24 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;This chapter covers the fundamental concepts of paging hardware, memory allocation, and process address space management, including practical code implementations like creating address spaces, physical memory allocation, and process management functions such as &lt;code&gt;sbrk&lt;/code&gt; and &lt;code&gt;exec&lt;/code&gt;.&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>This chapter covers the fundamental concepts of paging hardware, memory allocation, and process address space management, including practical code implementations like creating address spaces, physical memory allocation, and process management functions such as <code>sbrk</code> and <code>exec</code>.</strong></em></li></ul><span id="more"></span><h2 id="ch3-Page-tables"><a href="#ch3-Page-tables" class="headerlink" title="ch3: Page tables"></a><strong>ch3: Page tables</strong></h2><ul><li>Page tables are the most popular mechanism through which the operating system provides each process with its own private address space and memory.</li><li>Xv6 performs a few tricks: mapping the same memory (a trampoline page) in several address spaces, and guarding kernel and user stacks with an unmapped page. The rest of this chapter explains the page tables that the RISC-V hardware provides and how xv6 uses them.</li></ul><h3 id="3-1-Paging-hardware"><a href="#3-1-Paging-hardware" class="headerlink" title="3.1 Paging hardware"></a>3.1 Paging hardware</h3><ul><li>As a reminder, RISC-V instructions (both user and kernel) manipulate virtual addresses. The machine’s RAM, or physical memory, is indexed with physical addresses. The RISC-V page table hardware connects these two kinds of addresses, by mapping each virtual address to a physical address.</li><li>Xv6 runs on Sv39 RISC-V, which means that only the bottom 39 bits of a 64-bit virtual address are used; the top 25 bits are not used. In this Sv39 configuration, a RISC-V page table is logically an array of 227 (134,217,728) page table entries (PTEs). Each PTE contains a 44-bit physical page number (PPN) and some flags. The paging hardware translates a virtual address by using the top 27 bits of the 39 bits to index into the page table to find a PTE, and making a 56-bit physical address whose top 44 bits come from the PPN in the PTE and whose bottom 12 bits are copied from the original virtual address. Figure 3.1 shows this process with a logical view of the page table as a simple array of PTEs (see Figure 3.2 for a fuller story). A page table gives the operating system control over virtual-to-physical address translations at the granularity of aligned chunks of 4096 (212 ) bytes. Such a chunk is called a page.<br><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/xv6-riscv-ch3/image.png" alt="alt text"></li><li>In Sv39 RISC-V, the top 25 bits of a virtual address are not used for translation. The physical<br>address also has room for growth: there is room in the PTE format for the physical page number<br>to grow by another 10 bits. The designers of RISC-V chose these numbers based on technology<br>predictions. 239 bytes is 512 GB, which should be enough address space for applications running on RISC-V computers. 256 is enough physical memory space for the near future to fit many I&#x2F;O<br>devices and RAM chips. If more is needed, the RISC-V designers have defined Sv48 with 48-bit<br>virtual addresses [3].</li><li>As Figure 3.2 shows, a RISC-V CPU translates a virtual address into a physical in three steps.<br>A page table is stored in physical memory as a three-level tree. The root of the tree is a 4096-byte<br>page-table page that contains 512 PTEs, which contain the physical addresses for page-table pages<br>in the next level of the tree. Each of those pages contains 512 PTEs for the final level in the tree.<br>The paging hardware uses the top 9 bits of the 27 bits to select a PTE in the root page-table page,<br>the middle 9 bits to select a PTE in a page-table page in the next level of the tree, and the bottom<br>9 bits to select the final PTE. (In Sv48 RISC-V a page table has four levels, and bits 39 through 47<br>of a virtual address index into the top-level.)<br>If any of the three PTEs required to translate an address is not present, the paging hardware<br>raises a page-fault exception, leaving it up to the kernel to handle the exception (see Chapter 4).<br>The three-level structure of Figure 3.2 allows a memory-efficient way of recording PTEs, com-<br>pared to the single-level design of Figure 3.1. In the common case in which large ranges of virtual<br>addresses have no mappings, the three-level structure can omit entire page directories. For exam-<br>ple, if an application uses only a few pages starting at address zero, then the entries 1 through 511<br>of the top-level page directory are invalid, and the kernel doesn’t have to allocate pages those for<br>511 intermediate page directories. Furthermore, the kernel also doesn’t have to allocate pages for<br>the bottom-level page directories for those 511 intermediate page directories. So, in this example,<br>the three-level design saves 511 pages for intermediate page directories and 511 × 512 pages for<br>bottom-level page directories.<br>Although a CPU walks the three-level structure in hardware as part of executing a load or store<br>instruction, a potential downside of three levels is that the CPU must load three PTEs from memory<br>to perform the translation of the virtual address in the load&#x2F;store instruction to a physical address.<br>To avoid the cost of loading PTEs from physical memory, a RISC-V CPU caches page table entries<br>in a Translation Look-aside Buffer (TLB).<br><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/xv6-riscv-ch3/image-1.png" alt="alt text"><br>allowed to be used. PTE_V indicates whether the PTE is present: if it is not set, a reference to the<br>page causes an exception (i.e., is not allowed). PTE_R controls whether instructions are allowed<br>to read to the page. PTE_W controls whether instructions are allowed to write to the page. PTE_X<br>controls whether the CPU may interpret the content of the page as instructions and execute them.<br>PTE_U controls whether instructions in user mode are allowed to access the page; if PTE_U is not<br>set, the PTE can be used only in supervisor mode. Figure 3.2 shows how it all works. The flags and<br>all other page hardware-related structures are defined in (kernel&#x2F;riscv.h)</li><li>To tell a CPU to use a page table, the kernel must write the physical address of the root page-<br>table page into the satp register. A CPU will translate all addresses generated by subsequent<br>instructions using the page table pointed to by its own satp. Each CPU has its own satp so that<br>different CPUs can run different processes, each with a private address space described by its own<br>page table.</li><li><strong>notice</strong>:A few notes about terms used in this book. Physical memory refers to storage cells in RAM.<br>A byte of physical memory has an address, called a physical address. Instructions that dereference<br>addresses (such as loads, stores, jumps, and function calls) use only virtual addresses, which the<br>paging hardware translates to physical addresses, and then sends to the RAM hardware to read or<br>write storage. An address space is the set of virtual addresses that are valid in a given page table; each xv6 process has a separate user address space, and the xv6 kernel has its own address space as<br>well. User memory refers to a process’s user address space plus the physical memory that the page<br>table allows the process to access. Virtual memory refers to the ideas and techniques associated<br>with managing page tables and using them to achieve goals such as isolation.<br><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/xv6-riscv-ch3/image-2.png" alt="alt text"></li></ul><h3 id="3-2-Kernel-address-space"><a href="#3-2-Kernel-address-space" class="headerlink" title="3.2 Kernel address space"></a>3.2 Kernel address space</h3><ul><li>Xv6 maintains one page table per process, describing each process’s user address space, plus a sin-<br>gle page table that describes the kernel’s address space. The kernel configures the layout of its ad-<br>dress space to give itself access to physical memory and various hardware resources at predictable virtual addresses. Figure 3.3 shows how this layout maps kernel virtual addresses to physical addresses. The file (kernel&#x2F;memlayout.h) declares the constants for xv6’s kernel memory layout.</li><li>The kernel gets at RAM and memory-mapped device registers using “direct mapping;” that<br>is, mapping the resources at virtual addresses that are equal to the physical address. For example,<br>the kernel itself is located at KERNBASE&#x3D;0x80000000 in both the virtual address space and in<br>physical memory. Direct mapping simplifies kernel code that reads or writes physical memory.</li><li>There are a couple of kernel virtual addresses that aren’t direct-mapped:<ul><li>The trampoline page. It is mapped at the top of the virtual address space; user page tables have this same mapping. Chapter 4 discusses the role of the trampoline page, but we see here an interesting use case of page tables; a physical page (holding the trampoline code) is mapped twice in the virtual address space of the kernel: once at top of the virtual address space and once with a direct mapping.</li><li>The kernel stack pages. Each process has its own kernel stack, which is mapped high so that below it xv6 can leave an unmapped guard page. The guard page’s PTE is invalid (i.e., PTE_V is not set), so that if the kernel overflows a kernel stack, it will likely cause an exception and the kernel will panic. Without a guard page an overflowing stack would overwrite other kernel memory, resulting in incorrect operation. A panic crash is preferable.</li></ul></li></ul><h3 id="3-3-Code-creating-an-address-space"><a href="#3-3-Code-creating-an-address-space" class="headerlink" title="3.3 Code: creating an address space"></a>3.3 Code: creating an address space</h3><ul><li>Most of the xv6 code for manipulating address spaces and page tables resides in vm.c (kernel&#x2F;vm.c:1). The central data structure is pagetable_t, which is really a pointer to a RISC-V root page-table page; a pagetable_t may be either the kernel page table, or one of the per-process page tables. The central functions are walk, which finds the PTE for a virtual address,and mappages, which installs PTEs for new mappings. Functions starting with kvm manipulate the kernel page table; functions starting with uvm manipulate a user page table; other functions are used for both. copyout and copyin copy data to and from user virtual addresses provided as system call arguments; they are in vm.c because they need to explicitly translate those addresses in order to find the corresponding physical memory.</li><li>Early in the boot sequence, main calls kvminit (kernel&#x2F;vm.c:54) to create the kernel’s page ta-<br>ble using kvmmake (kernel&#x2F;vm.c:20). This call occurs before xv6 has enabled paging on the RISC-V,<br>so addresses refer directly to physical memory. kvmmake first allocates a page of physical mem-<br>ory to hold the root page-table page. Then it calls kvmmap to install the translations that the kernel<br>needs. The translations include the kernel’s instructions and data, physical memory up to PHYSTOP,<br>and memory ranges which are actually devices. proc_mapstacks (kernel&#x2F;proc.c:33) allocates a<br>kernel stack for each process. It calls kvmmap to map each stack at the virtual address generated<br>by KSTACK, which leaves room for the invalid stack-guard pages.</li><li><code>kvmmap</code> (kernel&#x2F;vm.c:132) calls mappages (kernel&#x2F;vm.c:144), which installs mappings into a<br>page table for a range of virtual addresses to a corresponding range of physical addresses. It does<br>this separately for each virtual address in the range, at page intervals. For each virtual address to<br>be mapped, mappages calls walk to find the address of the PTE for that address. It then initializes<br>the PTE to hold the relevant physical page number, the desired permissions (PTE_W, PTE_X, and&#x2F;or<br>PTE_R), and PTE_V to mark the PTE as valid (kernel&#x2F;vm.c:165).</li><li><code>walk</code> (kernel&#x2F;vm.c:86) mimics the RISC-V paging hardware as it looks up the PTE for a virtual<br>address (see Figure 3.2). walk descends the page table one level at a time, using each level’s 9<br>bits of virtual address to index into the relevant page directory page. At each level it finds either<br>the PTE of the next level’s page directory page, or the PTE of final page (kernel&#x2F;vm.c:92). If a PTE<br>in a first or second level page directory page isn’t valid, then the required directory page hasn’t<br>yet been allocated; if the alloc argument is set, walk allocates a new page-table page and puts<br>its physical address in the PTE. It returns the address of the PTE in the lowest layer in the tree<br>(kernel&#x2F;vm.c:102).</li><li>main calls kvminithart (kernel&#x2F;vm.c:62) to install the kernel page table. It writes the physical<br>address of the root page-table page into the register satp. After this the CPU will translate ad-<br>dresses using the kernel page table. Since the kernel uses a direct mapping, the now virtual address<br>of the next instruction will map to the right physical memory address.</li><li>Each RISC-V CPU caches page table entries in a Translation Look-aside Buffer (TLB), and<br>when xv6 changes a page table, it must tell the CPU to invalidate corresponding cached TLB<br>entries. If it didn’t, then at some point later the TLB might use an old cached mapping, point-<br>ing to a physical page that in the meantime has been allocated to another process, and as a re-<br>sult, a process might be able to scribble on some other process’s memory. The RISC-V has an instruction sfence.vma that flushes the current CPU’s TLB. Xv6 executes sfence.vma in<br>kvminithart after reloading the satp register, and in the trampoline code that switches to a<br>user page table before returning to user space (kernel&#x2F;trampoline.S:89).<br>It is also necessary to issue sfence.vma before changing satp, in order to wait for comple-<br>tion of all outstanding loads and stores. This wait ensures that preceding updates to the page table<br>have completed, and ensures that preceding loads and stores use the old page table, not the new<br>one.<br>To avoid flushing the complete TLB, RISC-V CPUs may support address space identifiers<br>(ASIDs) [3]. The kernel can then flush just the TLB entries for a particular address space. Xv6<br>does not use this feature.</li></ul><h3 id="3-4-Physical-memory-allocation"><a href="#3-4-Physical-memory-allocation" class="headerlink" title="3.4 Physical memory allocation"></a>3.4 Physical memory allocation</h3><ul><li>The kernel must allocate and free physical memory at run-time for page tables, user memory,<br>kernel stacks, and pipe buffers.</li><li>Xv6 uses the physical memory between the end of the kernel and PHYSTOP for run-time alloca-<br>tion. It allocates and frees whole 4096-byte pages at a time. It keeps track of which pages are free<br>by threading a linked list through the pages themselves. Allocation consists of removing a page<br>from the linked list; freeing consists of adding the freed page to the list.</li></ul><h3 id="3-5-Code-Physical-memory-allocator"><a href="#3-5-Code-Physical-memory-allocator" class="headerlink" title="3.5 Code: Physical memory allocator"></a>3.5 Code: Physical memory allocator</h3><ul><li>The allocator resides in kalloc.c (kernel&#x2F;kalloc.c:1). The allocator’s data structure is a free list<br>of physical memory pages that are available for allocation. Each free page’s list element is a<br>struct run (kernel&#x2F;kalloc.c:17). Where does the allocator get the memory to hold that data struc-<br>ture? It store each free page’s run structure in the free page itself, since there’s nothing else stored<br>there. The free list is protected by a spin lock (kernel&#x2F;kalloc.c:21-24). The list and the lock are<br>wrapped in a struct to make clear that the lock protects the fields in the struct. For now, ignore the<br>lock and the calls to acquire and release; Chapter 6 will examine locking in detail.<br>The function main calls kinit to initialize the allocator (kernel&#x2F;kalloc.c:27). kinit initializes<br>the free list to hold every page between the end of the kernel and PHYSTOP. Xv6 ought to de-<br>termine how much physical memory is available by parsing configuration information provided<br>by the hardware. Instead xv6 assumes that the machine has 128 megabytes of RAM. kinit calls<br>freerange to add memory to the free list via per-page calls to kfree. A PTE can only refer to<br>a physical address that is aligned on a 4096-byte boundary (is a multiple of 4096), so freerange<br>uses PGROUNDUP to ensure that it frees only aligned physical addresses. The allocator starts with<br>no memory; these calls to kfree give it some to manage.<br>The allocator sometimes treats addresses as integers in order to perform arithmetic on them<br>(e.g., traversing all pages in freerange), and sometimes uses addresses as pointers to read and<br>write memory (e.g., manipulating the run structure stored in each page); this dual use of addresses<br>is the main reason that the allocator code is full of C type casts.<br>The function kfree (kernel&#x2F;kalloc.c:47) begins by setting every byte in the memory being freed<br>to the value 1. This will cause code that uses memory after freeing it (uses “dangling references”)<br>to read garbage instead of the old valid contents; hopefully that will cause such code to break faster.<br>Then kfree prepends the page to the free list: it casts pa to a pointer to struct run, records the<br>old start of the free list in r-&gt;next, and sets the free list equal to r. kalloc removes and returns<br>the first element in the free list.</li></ul><h3 id="3-6-Process-address-space"><a href="#3-6-Process-address-space" class="headerlink" title="3.6 Process address space"></a>3.6 Process address space</h3><p><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/xv6-riscv-ch3/image-3.png" alt="alt text"></p><ul><li>Each process has its own page table, and when xv6 switches between processes, it also changes<br>page tables. Figure 3.4 shows a process’s address space in more detail than Figure 2.3. A process’s<br>user memory starts at virtual address zero and can grow up to MAXVA (kernel&#x2F;riscv.h:375), allowing<br>a process to address in principle 256 Gigabytes of memory.<br>A process’s address space consists of pages that contain the text of the program (which xv6<br>maps with the permissions PTE_R, PTE_X, and PTE_U), pages that contain the pre-initialized data<br>of the program, a page for the stack, and pages for the heap. Xv6 maps the data, stack, and heap<br>with the permissions PTE_R, PTE_W, and PTE_U.<br>Using permissions within a user address space is a common technique to harden a user process.<br>If the text were mapped with PTE_W, then a process could accidentally modify its own program;<br>for example, a programming error may cause the program to write to a null pointer, modifying<br>instructions at address 0, and then continue running, perhaps creating more havoc. To detect such<br>errors immediately, xv6 maps the text without PTE_W; if a program accidentally attempts to store<br>to address 0, the hardware will refuse to execute the store and raises a page fault (see Section 4.6).<br>The kernel then kills the process and prints out an informative message so that the developer can<br>track down the problem.<br>Similarly, by mapping data without PTE_X, a user program cannot accidentally jump to an<br>address in the program’s data and start executing at that address.<br>In the real world, hardening a process by setting permissions carefully also aids in defending<br>against security attacks. An adversary may feed carefully-constructed input to a program (e.g., a<br>Web server) that triggers a bug in the program in the hope of turning that bug into an exploit [14].<br>Setting permissions carefully and other techniques, such as randomizing of the layout of the user<br>address space, make such attacks harder.<br>The stack is a single page, and is shown with the initial contents as created by exec. Strings<br>containing the command-line arguments, as well as an array of pointers to them, are at the very<br>top of the stack. Just under that are values that allow a program to start at main as if the function<br>main(argc, argv) had just been called.<br>To detect a user stack overflowing the allocated stack memory, xv6 places an inaccessible guard<br>page right below the stack by clearing the PTE_U flag. If the user stack overflows and the process<br>tries to use an address below the stack, the hardware will generate a page-fault exception because<br>the guard page is inaccessible to a program running in user mode. A real-world operating system<br>might instead automatically allocate more memory for the user stack when it overflows.<br>When a process asks xv6 for more user memory, xv6 grows the process’s heap. Xv6 first uses kalloc to allocate physical pages. It then adds PTEs to the process’s page table that point to the<br>new physical pages. Xv6 sets the PTE_W, PTE_R, PTE_U, and PTE_V flags in these PTEs. Most<br>processes do not use the entire user address space; xv6 leaves PTE_V clear in unused PTEs.<br>We see here a few nice examples of use of page tables. First, different processes’ page tables<br>translate user addresses to different pages of physical memory, so that each process has private user<br>memory. Second, each process sees its memory as having contiguous virtual addresses starting at<br>zero, while the process’s physical memory can be non-contiguous. Third, the kernel maps a page<br>with trampoline code at the top of the user address space (without PTE_U), thus a single page of<br>physical memory shows up in all address spaces, but can be used only by the kernel.</li></ul><h3 id="3-7-Code-sbrk"><a href="#3-7-Code-sbrk" class="headerlink" title="3.7 Code: sbrk"></a>3.7 Code: sbrk</h3><ul><li>sbrk is the system call for a process to shrink or grow its memory. The system call is implemented<br>by the function growproc (kernel&#x2F;proc.c:260). growproc calls uvmalloc or uvmdealloc, de-<br>pending on whether n is positive or negative. uvmalloc (kernel&#x2F;vm.c:233) allocates physical mem-<br>ory with kalloc, zeros the allocated memory, and adds PTEs to the user page table with mappages.<br>uvmdealloc calls uvmunmap (kernel&#x2F;vm.c:178), which uses walk to find PTEs and kfree to<br>free the physical memory they refer to.<br>Xv6 uses a process’s page table not just to tell the hardware how to map user virtual addresses, but also as the only record of which physical memory pages are allocated to that process. That is the reason why freeing user memory (in uvmunmap) requires examination of the user page table.</li></ul><h3 id="3-8-Code-exec"><a href="#3-8-Code-exec" class="headerlink" title="3.8 Code: exec"></a>3.8 Code: exec</h3><ul><li>A binary is typically the output of the compiler and linker, and holds<br>machine instructions and program data. <code>exec</code> (kernel&#x2F;exec.c:23) opens the named binary path using<br>namei (kernel&#x2F;exec.c:36), which is explained in Chapter 8. Then, it reads the ELF header. Xv6<br>binaries are formatted in the widely-used ELF format, defined in (kernel&#x2F;elf.h). An ELF binary<br>consists of an ELF header, struct elfhdr (kernel&#x2F;elf.h:6), followed by a sequence of program<br>section headers, struct proghdr (kernel&#x2F;elf.h:25). Each progvhdr describes a section of the<br>application that must be loaded into memory; xv6 programs have two program section headers:<br>one for instructions and one for data.<br>The first step is a quick check that the file probably contains an ELF binary. An ELF binary<br>starts with the four-byte “magic number” 0x7F, ‘E’, ‘L’, ‘F’, or ELF_MAGIC (kernel&#x2F;elf.h:3). If<br>the ELF header has the right magic number, exec assumes that the binary is well-formed.<br>exec allocates a new page table with no user mappings with proc_pagetable (kernel&#x2F;exec.c:49),<br>allocates memory for each ELF segment with uvmalloc (kernel&#x2F;exec.c:65), and loads each segment<br>into memory with loadseg (kernel&#x2F;exec.c:10). loadseg uses walkaddr to find the physical ad-<br>dress of the allocated memory at which to write each page of the ELF segment, and readi to read<br>from the file.</li></ul><p>The program section header for &#x2F;init, the first user program created with exec, looks like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># objdump -p user/_init<br># 告诉操作系统如何将文件的各个段（segment）加载到内存中去执行<br>user/_init:     file format elf64-little<br>Program Header:<br>0x70000003 off  0x0000000000006bb0 vaddr 0x0000000000000000<br>                                        paddr 0x0000000000000000 align 2**0<br>        filesz 0x000000000000004a memsz 0x0000000000000000 flags r--<br>LOAD off        0x0000000000001000 vaddr 0x0000000000000000<br>                                        paddr 0x0000000000000000 align 2**12<br>        filesz 0x0000000000001000 memsz 0x0000000000001000 flags r-x<br>LOAD off        0x0000000000002000 vaddr 0x0000000000001000<br>                                        paddr 0x0000000000001000 align 2**12<br>        filesz 0x0000000000000010 memsz 0x0000000000000030 flags rw-<br>STACK off       0x0000000000000000 vaddr 0x0000000000000000<br>                                        paddr 0x0000000000000000 align 2**4<br>        filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-<br></code></pre></td></tr></table></figure><p>The output of <code>objdump -p</code> shows the <strong>Program Header Table</strong> of an ELF (Executable and Linkable Format) file. This is a crucial part of the ELF file, telling the operating system how to load each segment into memory for execution.</p><p>🌟 Explanation of ELF Program Header fields — each segment corresponds to the following fields:</p><table><thead><tr><th>Field</th><th>Meaning</th></tr></thead><tbody><tr><td><code>off</code></td><td>Byte offset of the segment in the file, counted from the beginning.</td></tr><tr><td><code>vaddr</code></td><td>Virtual address of the segment in memory.</td></tr><tr><td><code>paddr</code></td><td>Physical address — usually ignored by modern OSes.</td></tr><tr><td><code>align</code></td><td>Alignment requirement; the segment must be aligned to this (often a page size).</td></tr><tr><td><code>filesz</code></td><td>Size of the segment in the file (in bytes). <code>loadseg</code> reads this many bytes.</td></tr><tr><td><code>memsz</code></td><td>Total size the segment occupies in memory after loading (may be larger than in the file, e.g., for bss).</td></tr><tr><td><code>flags</code></td><td>Permission flags: <code>r</code> (read), <code>w</code> (write), <code>x</code> (execute).</td></tr><tr><td><code>type</code></td><td>Segment type (e.g., <code>LOAD</code>, <code>STACK</code>, <code>NOTE</code>, <code>DYNAMIC</code>, etc.).</td></tr><tr><td><code>align</code></td><td>Memory alignment requirement.</td></tr></tbody></table><h4 id="4-Program-Headers-Segments"><a href="#4-Program-Headers-Segments" class="headerlink" title="4 Program Headers (Segments):"></a>4 Program Headers (Segments):</h4><p><strong>1. First Segment: Type <code>0x70000003</code> (non-standard)</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">0x70000003 off 0x0000000000006bb0 vaddr 0x0000000000000000<br>                                        paddr 0x0000000000000000 align 2**0<br>        filesz 0x000000000000004a memsz 0x0000000000000000 flags r--<br></code></pre></td></tr></table></figure><ul><li><code>type=0x70000003</code> is processor-specific and non-standard — generally ignored by developers.</li><li><code>off=0x6bb0</code> — the offset within the file.</li><li><code>filesz=0x4a</code> — 74 bytes of data.</li><li><code>memsz=0x0</code> — although there is data in the file, nothing is loaded into memory (e.g., debug info, notes).</li><li>This is typically metadata, not code or data.</li></ul><p><strong>2. Second Segment: The actual code segment (text segment)</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">LOAD off 0x0000000000001000 vaddr 0x0000000000000000<br>                                paddr 0x0000000000000000 align 2**12<br>        filesz 0x0000000000001000 memsz 0x0000000000001000 flags r-x<br></code></pre></td></tr></table></figure><ul><li>Type: <code>LOAD</code> — to be loaded into memory.</li><li><code>off=0x1000</code> — loading starts from offset 0x1000 in the file.</li><li><code>vaddr=0x0</code> — to be loaded at virtual address <code>0x0</code> (important).</li><li><code>filesz = memsz = 0x1000</code> — both file and memory size are 4KB.</li><li><code>flags=r-x</code> — readable and executable. Indicates this is the code segment.</li></ul><p>🔑 <strong>This segment contains program instructions (text segment), and exec&#x2F;loadseg will load it into memory at 0x0.</strong></p><p><strong>3. Third Segment: Data segment</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">LOAD off 0x0000000000002000 vaddr 0x0000000000001000<br>                                paddr 0x0000000000001000 align 2**12<br>        filesz 0x0000000000000010 memsz 0x0000000000000030 flags rw-<br></code></pre></td></tr></table></figure><ul><li>Type: <code>LOAD</code> — also needs to be loaded.</li><li>File offset: 0x2000</li><li>Virtual address: 0x1000</li><li><code>filesz = 0x10</code>, <code>memsz = 0x30</code> — 16 bytes from file, the rest is BSS (needs to be zero-initialized).</li><li><code>flags = rw-</code> — read&#x2F;write permission, indicates this is a data segment.</li></ul><p>🔑 This segment holds global variables — part comes from the file, the rest is zeroed out by <code>memset</code> or page initialization.</p><p><strong>4. Fourth Segment: Stack segment</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">STACK off 0x0000000000000000 vaddr 0x0000000000000000<br>                                paddr 0x0000000000000000 align 2**4<br>        filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-<br></code></pre></td></tr></table></figure><ul><li>Type: <code>STACK</code> — indicates a stack segment.</li><li>Usually has no actual content; the stack is manually allocated by the kernel (not loaded from ELF).</li><li>This is just a marker indicating that the ELF expects a stack.</li></ul><p><strong>🔧 Main points in how <code>exec</code> loads ELF in xv6</strong></p><ol><li><p><strong>ELF segment loading</strong></p><ul><li>Each segment (like <code>.text</code>, <code>.data</code>) specifies a <code>vaddr</code> (virtual address).</li><li>The kernel reads <code>filesz</code> bytes from the file offset and loads them into memory at <code>vaddr</code>.</li><li>If <code>memsz &gt; filesz</code>, the remaining space (like <code>.bss</code>) must be zero-initialized.</li></ul></li><li><p><strong>User stack initialization</strong></p><ul><li>One page of memory is allocated for the user stack; the top stores the argument strings.</li><li>A “guard page” is placed below the stack and made inaccessible.</li><li>Arguments are passed to <code>main()</code> via <code>a0</code> (argc) and <code>a1</code> (argv).</li></ul></li><li><p><strong>Security checks</strong></p><ul><li>A malicious ELF file could attempt to set dangerous <code>vaddr</code> values or trigger integer overflows.</li><li>xv6 performs checks, such as preventing <code>vaddr + memsz</code> overflows.</li><li>On RISC-V, xv6 uses <strong>separate page tables</strong> for user and kernel space to prevent interference.</li></ul></li></ol><p><strong>ELF loading steps (in <code>exec</code>)</strong></p><ol><li><p>The kernel reads the ELF header and locates the Program Headers.</p></li><li><p>For each <code>LOAD</code>-type segment:</p><ul><li>It calls <code>uvmalloc</code> to allocate memory from <code>vaddr</code> to <code>vaddr + memsz</code>.</li><li>It uses <code>loadseg</code> to read <code>filesz</code> bytes from the file into that memory.</li><li>If <code>memsz &gt; filesz</code>, the remaining bytes are cleared to zero.</li></ul></li><li><p>Finally, it creates the user stack, sets up the trap frame and arguments, and jumps to user mode for execution.</p></li></ol><h3 id="3-9-Real-world"><a href="#3-9-Real-world" class="headerlink" title="3.9 Real world"></a>3.9 Real world</h3><ul><li>Xv6 is simplified by the kernel’s use of a direct map between virtual and physical addresses, and<br>by its assumption that there is physical RAM at address 0x80000000, where the kernel expects to<br>be loaded. This works with QEMU, but on real hardware it turns out to be a bad idea; real hardware<br>places RAM and devices at unpredictable physical addresses, so that (for example) there might be<br>no RAM at 0x80000000, where xv6 expect to be able to store the kernel. More serious kernel<br>designs exploit the page table to turn arbitrary hardware physical memory layouts into predictable<br>kernel virtual address layouts.</li><li>RISC-V supports protection at the level of physical addresses, but xv6 doesn’t use that feature.</li><li>On machines with lots of memory it might make sense to use RISC-V’s support for “super<br>pages.” Small pages make sense when physical memory is small, to allow allocation and page-out<br>to disk with fine granularity. For example, if a program uses only 8 kilobytes of memory, giving<br>it a whole 4-megabyte super-page of physical memory is wasteful. Larger pages make sense on<br>machines with lots of RAM, and may reduce overhead for page-table manipulation.</li><li>The xv6 kernel’s lack of a malloc-like allocator that can provide memory for small objects<br>prevents the kernel from using sophisticated data structures that would require dynamic allocation.<br>A more elaborate kernel would likely allocate many different sizes of small blocks, rather than (as<br>in xv6) just 4096-byte blocks; a real kernel allocator would need to handle small allocations as<br>well as large ones.</li></ul>]]></content:encoded>
      
      
      
      <category domain="https://GoKo-Son626.github.io/tags/xv6-riscv/">xv6-riscv</category>
      
      
      <comments>https://goko-son626.github.io/post/xv6-riscv-ch3.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>xv6-riscv-ch2</title>
      <link>https://goko-son626.github.io/post/xv6-riscv-ch2.html</link>
      <guid>https://goko-son626.github.io/post/xv6-riscv-ch2.html</guid>
      <pubDate>Wed, 05 Feb 2025 04:27:56 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;This chapter2 explains how the OS is structured internally to manage hardware resources, run processes, and enforce protection.&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>This chapter2 explains how the OS is structured internally to manage hardware resources, run processes, and enforce protection.</strong></em></li></ul><span id="more"></span><h2 id="ch2-Operating-system-organization"><a href="#ch2-Operating-system-organization" class="headerlink" title="ch2: Operating system organization"></a><strong>ch2: Operating system organization</strong></h2><ul><li>A key requirement for an operating system is to support several activities at once.</li><li>an operating system must fulfill three requirements: multiplexing, isolation, and<br>interaction.</li><li>Xv6 runs on a multi-core1 RISC-V microprocessor, and much of its low-level functionality<br>(for example, its process implementation) is specific to RISC-V. RISC-V is a 64-bit CPU, and xv6<br>is written in “LP64” C, which means long (L) and pointers (P) in the C programming language<br>are 64 bits, but an int is 32 bits.</li><li><a href="https://lf-riscv.atlassian.net/wiki/x/kYD2">RISCV Technical Specifications</a></li></ul><h3 id="2-1-Abstracting-physical-resources"><a href="#2-1-Abstracting-physical-resources" class="headerlink" title="2.1 Abstracting physical resources"></a>2.1 Abstracting physical resources</h3><ul><li>The Unix interface is not the only way to abstract<br>resources, but it has proved to be a good one.</li></ul><h3 id="2-2-User-mode-supervisor-mode-and-system-calls"><a href="#2-2-User-mode-supervisor-mode-and-system-calls" class="headerlink" title="2.2 User mode, supervisor mode, and system calls"></a>2.2 User mode, supervisor mode, and system calls</h3><ul><li>CPUs provide hardware support for strong isolation. For example, RISC-V has three modes in<br>which the CPU can execute instructions: machine mode, supervisor mode, and user mode. Instruc-<br>tions executing in machine mode have full privilege; a CPU starts in machine mode. Machine mode<br>is mostly intended for setting up the computer during boot. Xv6 executes a few lines in machine<br>mode and then changes to supervisor mode.</li><li>In supervisor mode the CPU is allowed to execute privileged instructions: for example, en-<br>abling and disabling interrupts, reading and writing the register that holds the address of a page<br>table, etc.</li><li>An application can execute only user-mode instructions (e.g., adding<br>numbers, etc.) and is said to be running in user space, while the software in supervisor mode can<br>also execute privileged instructions and is said to be running in kernel space. The software running<br>in kernel space (or in supervisor mode) is called the kernel.</li><li>CPUs provide a<br>special instruction that switches the CPU from user mode to supervisor mode and enters the kernel<br>at an entry point specified by the kernel. (RISC-V provides the ecall instruction for this purpose.)<br>Once the CPU has switched to supervisor mode, the kernel can then validate the arguments of the<br>system call (e.g., check if the address passed to the system call is part of the application’s memory),<br>decide whether the application is allowed to perform the requested operation (e.g., check if the<br>application is allowed to write the specified file), and then deny it or execute it. It is important that<br>the kernel control the entry point for transitions to supervisor mode; if the application could decide<br>the kernel entry point, a malicious application could, for example, enter the kernel at a point where<br>the validation of arguments is skipped.</li></ul><h3 id="2-3-Kernel-organization"><a href="#2-3-Kernel-organization" class="headerlink" title="2.3 Kernel organization"></a>2.3 Kernel organization</h3><ul><li>A key design question is what part of the operating system should run in supervisor mode. One<br>possibility is that the entire operating system resides in the kernel, so that the implementations of<br>all system calls run in supervisor mode. This organization is called a <strong>monolithic kernel</strong>.</li><li>A downside of the monolithic organization is that the interactions among different parts of<br>the operating system are often complex (as we will see in the rest of this text), and therefore it is easy for an operating system developer to make a mistake. In a monolithic kernel, a mistake is<br>fatal, because an error in supervisor mode will often cause the kernel to fail. If the kernel fails,<br>the computer stops working, and thus all applications fail too. The computer must reboot to start<br>again.</li><li>To reduce the risk of mistakes in the kernel, OS designers can minimize the amount of operating<br>system code that runs in supervisor mode, and execute the bulk of the operating system in user<br>mode. This kernel organization is called a <strong>microkernel</strong>.</li><li>Figure 2.1 illustrates this microkernel design. In the figure, the file system runs as a user-level<br>process. OS services running as processes are called servers. To allow applications to interact with<br>the file server, the kernel provides an <strong>inter-process communication mechanism</strong> to send messages<br>from one user-mode process to another.<br><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/xv6-riscv-ch2/image.png" alt="alt text"></li><li>Xv6 is implemented as a monolithic kernel, like most Unix operating systems. Thus, the xv6<br>kernel interface corresponds to the operating system interface, and the kernel implements the com-<br>plete operating system. Since xv6 doesn’t provide many services, its kernel is smaller than some<br>microkernels, but conceptually xv6 is monolithic.</li></ul><h3 id="2-4-Code-xv6-organization"><a href="#2-4-Code-xv6-organization" class="headerlink" title="2.4 Code: xv6 organization"></a>2.4 Code: xv6 organization</h3><ul><li><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/xv6-riscv-ch2/image-1.png" alt="alt text"></li><li>The xv6 kernel source is in the kernel&#x2F; sub-directory. The source is divided into files, following<br>a rough notion of modularity; Figure 2.2 lists the files.The inter-module interfaces are defined in defs.h (kernel&#x2F;defs.h).</li></ul><h3 id="2-5-Process-overview"><a href="#2-5-Process-overview" class="headerlink" title="2.5 Process overview"></a>2.5 Process overview</h3><ul><li>The unit of isolation in xv6 (as in other Unix operating systems) is a process. The process ab-<br>straction prevents one process from wrecking or spying on another process’s memory, CPU, file<br>descriptors, etc. It also prevents a process from wrecking the kernel itself, so that a process can’t<br>subvert the kernel’s isolation mechanisms.</li><li>To help enforce isolation, the process abstraction provides the illusion to a program that it has<br>its own private machine. A process provides a program with what appears to be a private memory<br>system, or address space, which other processes cannot read or write. A process also provides the<br>program with what appears to be its own CPU to execute the program’s instructions.</li><li>Xv6 uses page tables (which are implemented by hardware) to give each process its own ad-<br>dress space. The RISC-V page table translates (or “maps”) a virtual address (the address that an<br>RISC-V instruction manipulates) to a physical address (an address that the CPU sends to main<br>memory).</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">|  9 bits | 9 bits | 9 bits |     12 bits     |<br>|  VPN[2] | VPN[1] | VPN[0] | Page Offset     |<br>|--------  页表索引 --------| 页内偏移 |<br><br>example:<br>虚拟地址：0x0000004001234567<br>              ↓<br>VPN[2] = 0x01  → level-2 页表（根）中偏移 8，得到 PTE1 → 指向 0x2000_0000<br>VPN[1] = 0x01  → level-1 页表中偏移 8，得到 PTE2 → 指向 0x3000_0000<br>VPN[0] = 0x46  → level-0 页表中偏移 0x230，得到 PTE3 → 页帧 0x4000<br>offset  = 0x4567<br><br>→ 最终物理地址 = 0x4000_0000 + 0x4567 = **0x4000_4567**<br></code></pre></td></tr></table></figure><ul><li>Xv6 maintains a separate page table for each process that defines that process’s address space.<br>As illustrated in Figure 2.3, an address space includes the process’s user memory starting at virtual<br>address zero.<br><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/xv6-riscv-ch2/image-2.png" alt="alt text"><ul><li>Instructions come first, followed by global variables, then the stack, and finally a “heap” area (for malloc) that the process can expand as needed.</li><li>There are a number of factors that limit the maximum size of a  process’s address space: pointers on the RISC-V are 64 bits wide; the hardware uses only the low 39 bits when looking up virtual addresses in page tables; and xv6 uses only 38 of those 39 bits. Thus, the maximum address is 238 − 1 &#x3D; 0x3fffffffff, which is MAXVA (kernel&#x2F;riscv.h:378).</li><li>At the top of the address space xv6 places a trampoline page (4096 bytes) and a trapframe page. Xv6 uses these two pages to transition into the kernel and back; the trampoline page contains the code to transition in and out of the kernel, and the trapframe is where the kernel saves the process’s user registers, as Chapter 4 explains.</li></ul></li><li>The xv6 kernel maintains many pieces of state for each process, which it gathers into a struct proc (kernel&#x2F;proc.h:85). A process’s most important pieces of kernel state are its page table, its kernel<br>stack, and its run state. We’ll use the notation p-&gt;xxx to refer to elements of the proc structure; for example, p-&gt;pagetable is a pointer to the process’s page table.</li><li>Each process has a thread of control (or thread for short) that holds the state needed to ex-<br>ecute the process.might be executing on a CPU, or suspended (not<br>executing, but capable of resuming executing in the future).</li><li>Each process has two stacks:<ul><li><strong>user stack</strong>: When the process is executing user instructions,only its user stack is in use, and its kernel stack is empty.</li><li><strong>kernel stack</strong>: When the process enters the kernel (for a system call or interrupt), the kernel code executes on the process’s kernel stack;   while a process is in the kernel, its user stack still contains saved data, but isn’t actively used.</li><li>A process’s thread alternates between actively using its user stack and its kernel stack.   The kernel stack is separate (and protected from user code) so that the kernel can execute even if a process has wrecked its user stack.</li></ul></li><li>A process can make a system call by executing the RISC-V <code>ecall</code> instruction. This instruction raises the hardware privilege level and changes the program counter to a kernel-defined entry point. The code at the entry point switches to the process’s kernel stack and executes the kernel instructions that implement the system call. When the system call completes, the kernel switches back to the user stack and returns to user space by calling the <code>sret</code> instruction, which lowers the hardware privilege level and resumes executing user instructions just after the system call instruction. A process’s thread can “block” in the kernel to wait for I&#x2F;O, and resume where it left off when the I&#x2F;O has finished.</li><li><code>p-&gt;state</code> indicates whether the process is allocated, ready to run, currently running on a CPU, waiting for I&#x2F;O, or exiting.</li><li><code>p-&gt;pagetable</code> holds the process’s page table, in the format that the RISC-V hardware ex- pects. Xv6 causes the paging hardware to use a process’s p-&gt;pagetable when executing that process in user space. A process’s page table also serve</li><li><em><strong>In summary</strong>, a process bundles two design ideas: an address space to give a process the illusion of its own memory, and a thread to give the process the illusion of its own CPU. In xv6, a process consists of one address space and one thread. In real operating systems a process may have more than one thread to take advantage of multiple CPUs.</em></li></ul><h3 id="2-6-Code-starting-xv6-the-first-process-and-system-call"><a href="#2-6-Code-starting-xv6-the-first-process-and-system-call" class="headerlink" title="2.6 Code: starting xv6, the first process and system call"></a>2.6 Code: starting xv6, the first process and system call</h3><p>To make xv6 more concrete, we’ll outline how the kernel starts and runs the first process.The subsequent chapters will describe the mechanisms that show up in this overview in more detail.</p><p>When the RISC-V computer powers on, it initializes itself and runs a boot loader which is stored in read-only memory.<br>The boot loader loads the xv6 kernel into memory.Then, in machine mode, the CPU executes xv6 starting at <code>_entry</code> (<code>kernel/entry.S:7</code>).The RISC-V starts with paging hardware disabled: virtual addresses map directly to physical addresses.</p><p>The loader loads the xv6 kernel into memory at physical address <code>0x80000000</code>.<br>The reason it places the kernel at <code>0x80000000</code> rather than <code>0x0</code> is because the address range <code>0x0:0x80000000</code> contains I&#x2F;O devices.</p><p>The instructions at <code>_entry</code> set up a stack so that xv6 can run C code.<br>Xv6 declares space for an initial stack, <code>stack0</code>, in the file <code>start.c</code> (<code>kernel/start.c:11</code>).The code at <code>_entry</code> loads the stack pointer register <code>sp</code> with the address <code>stack0 + 4096</code>, the top of the stack, because the stack on RISC-V grows down.Now that the kernel has a stack, <code>_entry</code> calls into C code at <code>start</code> (<code>kernel/start.c:15</code>).</p><p>The function <code>start</code> performs some configuration that is only allowed in machine mode, and then switches to supervisor mode.<br>To enter supervisor mode, RISC-V provides the instruction <code>mret</code>.This instruction is most often used to return from a previous call from supervisor mode to machine mode.<code>start</code> isn’t returning from such a call, but sets things up as if it were:</p><ul><li>it sets the previous privilege mode to supervisor in the register <code>mstatus</code>,</li><li>it sets the return address to <code>main</code> by writing <code>main</code>’s address into the register <code>mepc</code>,</li><li>disables virtual address translation in supervisor mode by writing 0 into the page-table register <code>satp</code>,</li><li>and delegates all interrupts and exceptions to supervisor mode.</li></ul><p>Before jumping into supervisor mode, <code>start</code> performs one more task:<br>it programs the clock chip to generate timer interrupts.With this housekeeping out of the way, <code>start</code> “returns” to supervisor mode by calling <code>mret</code>.<br>This causes the program counter to change to <code>main</code> (<code>kernel/main.c:11</code>), the address previously stored in <code>mepc</code>.</p><p>After <code>main</code> (<code>kernel/main.c:11</code>) initializes several devices and subsystems, it creates the first process by calling <code>userinit</code> (<code>kernel/proc.c:233</code>).The first process executes a small program written in RISC-V assembly, which makes the first system call in xv6.<code>initcode.S</code> (<code>user/initcode.S:3</code>) loads the number for the <code>exec</code> system call, <code>SYS_EXEC</code> (<code>kernel/syscall.h:8</code>), into register <code>a7</code>,and then calls <code>ecall</code> to re-enter the kernel.</p><p>The kernel uses the number in register <code>a7</code> in <code>syscall</code> (<code>kernel/syscall.c:132</code>) to call the desired system call.<br>The system call table (<code>kernel/syscall.c:107</code>) maps <code>SYS_EXEC</code> to the function <code>sys_exec</code>, which the kernel invokes.As we saw in Chapter 1, <code>exec</code> replaces the memory and registers of the current process with a new program (in this case, <code>/init</code>).</p><p>Once the kernel has completed <code>exec</code>, it returns to user space in the <code>/init</code> process.<code>init</code> (<code>user/init.c:15</code>) creates a new console device file if needed and then opens it as file descriptors 0, 1, and 2. Then it starts a shell on the console. The system is up.</p><h3 id="2-7-Security-Model"><a href="#2-7-Security-Model" class="headerlink" title="2.7 Security Model"></a>2.7 Security Model</h3><ul><li><p>The operating system must assume that a process’s <strong>user-level code</strong> will do its best to wreck the kernel or other processes.User code may try to dereference pointers outside its allowed address space; it may attempt to execute any RISC-V instructions, even those not intended for user code; it may try to read and write any RISC-V control register; it may try to directly access device hardware; and it may pass clever values to system calls in an attempt to trick the kernel into crashing or doing something stupid. The kernel’s goal is to restrict each user process so that all it can do is:</p><ul><li>read&#x2F;write&#x2F;execute its own user memory,</li><li>use the 32 general-purpose RISC-V registers,</li><li>and affect the kernel and other processes <strong>only</strong> in the ways that system calls are intended to allow.</li></ul></li><li><p>The expectations for the <strong>kernel’s own code</strong> are quite different.Kernel code is assumed to be written by well-meaning and careful programmers.Kernel code is expected to be bug-free, and certainly to contain nothing malicious.This assumption affects how we analyze kernel code.For example, there are many internal kernel functions (e.g., the spin locks) that would cause serious problems if kernel code used them incorrectly.When examining any specific piece of kernel code, we’ll want to convince ourselves that it behaves correctly.We assume, however, that kernel code in general is correctly written, and follows all the rules about use of the kernel’s own functions and data structures. At the hardware level, the RISC-V CPU, RAM, disk, etc. are assumed to operate as advertised in the documentation, with no hardware bugs.</p></li></ul><h3 id="2-8-Real-world"><a href="#2-8-Real-world" class="headerlink" title="2.8 Real world"></a>2.8 Real world</h3><p>Most operating systems have adopted the process concept, and most processes look similar to xv6’s. Modern operating systems, however, support several threads within a process, to allow a single process to exploit multiple CPUs. Supporting multiple threads in a process involves quite a bit of machinery that xv6 doesn’t have, often including interface changes (e.g., Linux’s clone, a variant of fork), to control which aspects of a process threads share.</p>]]></content:encoded>
      
      
      
      <category domain="https://GoKo-Son626.github.io/tags/xv6-riscv/">xv6-riscv</category>
      
      
      <comments>https://goko-son626.github.io/post/xv6-riscv-ch2.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>xv6-riscv-ch1</title>
      <link>https://goko-son626.github.io/post/xv6-riscv-ch1.html</link>
      <guid>https://goko-son626.github.io/post/xv6-riscv-ch1.html</guid>
      <pubDate>Wed, 05 Feb 2025 02:00:04 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;This chapter-1 introduces the basic Unix process, file, and I&amp;#x2F;O abstractions that applications use to interact with the OS.&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>This chapter-1 introduces the basic Unix process, file, and I&#x2F;O abstractions that applications use to interact with the OS.</strong></em></li></ul><span id="more"></span><h2 id="ch1-Operating-system-interfaces"><a href="#ch1-Operating-system-interfaces" class="headerlink" title="ch1: Operating system interfaces"></a><strong>ch1: Operating system interfaces</strong></h2><ul><li><p>As Figure 1.1 shows, xv6 takes the traditional form of a kernel, a special program that provides<br>services to running programs. Each running program, called a process, has memory containing<br>instructions, data, and a stack. The instructions implement the program’s computation. The data<br>are the variables on which the computation acts. The stack organizes the program’s procedure calls.<br>A given computer typically has many processes but only a single kernel.<br><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/xv6-riscv-ch1/image.png" alt="alt text"></p></li><li><p>When a user program invokes a sys-<br>tem call, the hardware raises the privilege level and starts executing a pre-arranged function in the<br>kernel.<br>The collection of system calls that a kernel provides is the interface that user programs see. The<br>xv6 kernel provides a subset of the services and system calls that Unix kernels traditionally offer.<br>Figure 1.2 lists all of xv6’s system calls.<br><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/xv6-riscv-ch1/image-1.png" alt="alt text"></p></li><li><p>The shell is an ordinary program that reads commands from the user and executes them. The<br>fact that the shell is a user program, and not part of the kernel, illustrates the power of the system<br>call interface: there is nothing special about the shell. It also means that the shell is easy to replace;<br>as a result, modern Unix systems have a variety of shells to choose from, each with its own user<br>interface and scripting features. The xv6 shell is a simple implementation of the essence of the<br>Unix Bourne shell. Its implementation can be found at (user&#x2F;sh.c:1).<br><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/xv6-riscv-ch1/image-2.png" alt="alt text"><br>The xv6 shell uses the exec calls of blew to run programs on behalf of users. The main structure of<br>the shell is simple; see main (user&#x2F;sh.c:146). The main loop reads a line of input from the user with<br>getcmd. Then it calls fork, which creates a copy of the shell process. The parent calls wait,<br>while the child runs the command. For example, if the user had typed “echo hello” to the shell,<br>runcmd would have been called with “echo hello” as the argument. runcmd (user&#x2F;sh.c:55) runs<br>the actual command. For “echo hello”, it would call exec (user&#x2F;sh.c:79). If exec succeeds then<br>the child will execute instructions from echo instead of runcmd. At some point echo will call<br>exit, which will cause the parent to return from wait in main (user&#x2F;sh.c:146).</p></li></ul><h3 id="1-1-Processes-and-memory"><a href="#1-1-Processes-and-memory" class="headerlink" title="1.1 Processes and memory"></a>1.1 Processes and memory</h3><ul><li>An xv6 process consists of user-space memory (instructions, data, and stack) and per-process state<br>private to the kernel. Xv6 time-shares processes: it transparently switches the available CPUs<br>among the set of processes waiting to execute. When a process is not executing, xv6 saves the<br>process’s CPU registers, restoring them when it next runs the process. The kernel associates a<br>process identifier, or PID, with each process.</li><li>the following program fragment written in the C programming lan-<br>guage</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> pid = fork();<br><span class="hljs-keyword">if</span>(pid &gt; <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;parent: child=%d\n&quot;</span>, pid);<br>pid = wait((<span class="hljs-type">int</span> *) <span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child %d is done\n&quot;</span>, pid);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child: exiting\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fork error\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>In the example, the output lines<br>parent: child&#x3D;1234<br>child: exiting<br>might come out in either order (or even intermixed), depending on whether the parent or child gets<br>to its printf call first. After the child exits, the parent’s wait returns, causing the parent to print<br>parent: child 1234 is done<br>Although the child has the same memory contents as the parent initially, the parent and child are<br>executing with separate memory and separate registers: changing a variable in one does not affect<br>the other. For example, when the return value of wait is stored into pid in the parent process, it<br>doesn’t change the variable pid in the child. The value of pid in the child will still be zero.</p><ul><li>The exec system call replaces the calling process’s memory with a new memory image loaded<br>from a file stored in the file system. The file must have a particular format, which specifies which<br>part of the file holds instructions, which part is data, at which instruction to start, etc. Xv6 uses the<br>ELF format, which Chapter 3 discusses in more detail. Usually the file is the result of compiling<br>a program’s source code. When exec succeeds, it does not return to the calling program; instead,<br>the instructions loaded from the file start executing at the entry point declared in the ELF header.<br>exec takes two arguments: the name of the file containing the executable and an array of string<br>arguments. For example</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *argv[<span class="hljs-number">3</span>];<br>argv[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;echo&quot;</span>;<br>argv[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;hello&quot;</span>;<br>argv[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>exec(<span class="hljs-string">&quot;/bin/echo&quot;</span>, argv);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;exec error\n&quot;</span>);<br></code></pre></td></tr></table></figure><p>This fragment replaces the calling program with an instance of the program &#x2F;bin&#x2F;echo running<br>with the argument list echo hello. Most programs ignore the first element of the argument array,<br>which is conventionally the name of the program.</p><ul><li>why fork and exec are not combined in a single call<br>we will see later that<br>the shell exploits the separation in its implementation of I&#x2F;O redirection.<br>Xv6 allocates most user-space memory implicitly: fork allocates the memory required for the<br>child’s copy of the parent’s memory, and exec allocates enough memory to hold the executable<br>file. A process that needs more memory at run-time (perhaps for malloc) can call sbrk(n) to<br>grow its data memory by n zero bytes; sbrk returns the location of the new memory.</li></ul><h3 id="1-2-I-O-and-File-descriptors"><a href="#1-2-I-O-and-File-descriptors" class="headerlink" title="1.2 I&#x2F;O and File descriptors"></a>1.2 I&#x2F;O and File descriptors</h3><ul><li>A file descriptor is a small integer representing a kernel-managed object that a process may read<br>from or write to. A process may obtain a file descriptor by opening a file, directory, or device,<br>or by creating a pipe, or by duplicating an existing descriptor. For simplicity we’ll often refer<br>to the object a file descriptor refers to as a “file”; the file descriptor interface abstracts away the<br>differences between files, pipes, and devices, making them all look like streams of bytes. We’ll<br>refer to input and output as I&#x2F;O.</li><li>Internally, the xv6 kernel uses the file descriptor as an index into a per-process table, so that<br>every process has a private space of file descriptors starting at zero. By convention, a process reads<br>from file descriptor 0 (standard input), writes output to file descriptor 1 (standard output), and<br>writes error messages to file descriptor 2 (standard error). As we will see, the shell exploits the<br>convention to implement I&#x2F;O redirection and pipelines. The shell ensures that it always has three<br>file descriptors open (user&#x2F;sh.c:152), which are by default file descriptors for the console.</li><li>The following program fragment (which forms the essence of the program cat) copies data<br>from its standard input to its standard output. If an error occurs, it writes a message to the standard<br>error.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> buf[<span class="hljs-number">512</span>];<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">for</span>(;;)&#123;<br>n = read(<span class="hljs-number">0</span>, buf, <span class="hljs-keyword">sizeof</span> buf);<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;read error\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(write(<span class="hljs-number">1</span>, buf, n) != n)&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;write error\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>The important thing to note in the code fragment is that cat doesn’t know whether it is reading<br>from a file, console, or a pipe. Similarly cat doesn’t know whether it is printing to a console, a<br>file, or whatever. The use of file descriptors and the convention that file descriptor 0 is input and<br>file descriptor 1 is output allows a simple implementation of cat.</p><ul><li>The close system call releases a file descriptor, making it free for reuse by a future open,<br>pipe, or dup system call (see below). A newly allocated file descriptor is always the lowest-<br>numbered unused descriptor of the current process.</li><li>File descriptors and fork interact to make I&#x2F;O redirection easy to implement.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *argv[<span class="hljs-number">2</span>];<br>argv[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;cat&quot;</span>;<br>argv[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(fork() == <span class="hljs-number">0</span>) &#123;<br>close(<span class="hljs-number">0</span>);<br>open(<span class="hljs-string">&quot;input.txt&quot;</span>, O_RDONLY);<br>exec(<span class="hljs-string">&quot;cat&quot;</span>, argv);<br>&#125;<br></code></pre></td></tr></table></figure><p>After the child closes file descriptor 0, open is guaranteed to use that file descriptor for the newly<br>opened input.txt: 0 will be the smallest available file descriptor. cat then executes with file<br>descriptor 0 (standard input) referring to input.txt. The parent process’s file descriptors are not<br>changed by this sequence</p><ul><li>Two file descriptors share an offset if they were derived from the same original file descriptor<br>by a sequence of fork and dup calls. Otherwise file descriptors do not share offsets, even if they<br>resulted from open calls for the same file.</li><li>dup allows shells to implement commands like this: <code>ls existing-file non-existing-file &gt; tmp1 2&gt;&amp;1</code>. The 2&gt;&amp;1 tells the shell to give the command a file descriptor 2 that is a duplicate of descriptor 1. Both the name of the existing file and the error message for the non-existing file will show up in the file tmp1. The xv6 shell doesn’t support I&#x2F;O redirection for the error file descriptor, but now you know how to implement it.</li></ul><h3 id="1-3-Pipes"><a href="#1-3-Pipes" class="headerlink" title="1.3 Pipes"></a>1.3 Pipes</h3><ul><li>A pipe is a small kernel buffer exposed to processes as a pair of file descriptors, one for reading<br>and one for writing. Writing data to one end of the pipe makes that data available for reading from<br>the other end of the pipe. Pipes provide a way for processes to communicate.</li><li>The following example code runs the program wc with standard input connected to the read<br>end of a pipe.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> p[<span class="hljs-number">2</span>];<br><span class="hljs-type">char</span> *argv[<span class="hljs-number">2</span>];<br>argv[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;wc&quot;</span>;<br>argv[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>pipe(p);<br><span class="hljs-keyword">if</span>(fork() == <span class="hljs-number">0</span>) &#123;<br>close(<span class="hljs-number">0</span>);<br>dup(p[<span class="hljs-number">0</span>]);<br>close(p[<span class="hljs-number">0</span>]);<br>close(p[<span class="hljs-number">1</span>]);<br>exec(<span class="hljs-string">&quot;/bin/wc&quot;</span>, argv);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>close(p[<span class="hljs-number">0</span>]);<br>write(p[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;hello world\n&quot;</span>, <span class="hljs-number">12</span>);<br>close(p[<span class="hljs-number">1</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">          pipe<br>  [p[1]] -------&gt; [p[0]]<br>   (write)         (read)<br><br>parent:<br>   write(p[1], ...)<br><br>child:<br>   dup(p[0]) -&gt; fd 0<br>   exec(&quot;wc&quot;) -&gt; wc reads from stdin (=read of pipe)<br></code></pre></td></tr></table></figure><p>The fact that read blocks until it is impossible for new data to arrive<br>is one reason that it’s important for the child to close the write end of the pipe before executing<br>wc above: if one of wc ’s file descriptors referred to the write end of the pipe and <strong>not close</strong>, wc would never see<br>end-of-file.</p><ul><li>The xv6 shell implements pipelines such as grep fork sh.c | wc -l in a manner similar<br>to the above code (user&#x2F;sh.c:101). The child process creates a pipe to connect the left end of the<br>pipeline with the right end. Then it calls fork and runcmd for the left end of the pipeline and<br>fork and runcmd for the right end, and waits for both to finish. The right end of the pipeline<br>may be a command that itself includes a pipe (e.g., a | b | c), which itself forks two new child<br>processes (one for b and one for c). Thus, the shell may create a tree of processes. The leaves<br>16of this tree are commands and the interior nodes are processes that wait until the left and right<br>children complete.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">   sh<br>  /  \<br>a     sh<br>     /  \<br>   b     c<br></code></pre></td></tr></table></figure><ul><li><code>echo hello world &gt;/tmp/xyz; wc &lt;/tmp/xyz</code><br>Pipes have at least three advantages over temporary files in this situation. <ul><li>First, pipes automatically clean themselves up; with the file redirection, a shell would have to be careful to remove &#x2F;tmp&#x2F;xyz when done. </li><li>Second, pipes can pass arbitrarily long streams of data, while file redirection requires enough free space on disk to store all the data. </li><li>Third, pipes allow for parallel execution of pipeline stages, while the file approach requires the first program to finish before the second starts.</li></ul></li></ul><h3 id="1-4-File-system"><a href="#1-4-File-system" class="headerlink" title="1.4 File system"></a>1.4 File system</h3><ul><li>The xv6 file system provides data files, which contain uninterpreted byte arrays, and directories,<br>which contain named references to data files and other directories.</li><li>There are system calls to create new files and directories: mkdir creates a new directory, open<br>with the O_CREATE flag creates a new data file, and mknod creates a new device file. This example<br>illustrates all three:</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">mkdir(<span class="hljs-string">&quot;/dir&quot;</span>);<br>fd = open(<span class="hljs-string">&quot;/dir/file&quot;</span>, O_CREATE|O_WRONLY);<br>close(fd);<br>mknod(<span class="hljs-string">&quot;/console&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>mknod creates a special file that refers to a device. Associated with a device file are the major and<br>minor device numbers (the two arguments to mknod), which uniquely identify a kernel device.<br>When a process later opens a device file, the kernel diverts read and write system calls to the<br>kernel device implementation instead of passing them to the file system.</p><ul><li>A file’s name is distinct from the file itself; the same underlying file, called an inode, can have<br>multiple names, called links. Each link consists of an entry in a directory; the entry contains a file<br>name and a reference to an inode. An inode holds metadata about a file, including its type (file or<br>directory or device), its length, the location of the file’s content on disk, and the number of links to<br>a file.</li><li>The fstat system call retrieves information from the inode that a file descriptor refers to. It<br>fills in a struct stat, defined in stat.h (kernel&#x2F;stat.h) as:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#define T_DIR           1// Directory<br>#define T_FILE          2// File<br>#define T_DEVICE        3// Device<br><br>struct stat &#123;<br>        int dev;        // File system’s disk device<br>        uint ino;       // Inode number<br>        short type;     // Type of file<br>        short nlink;    // Number of links to file<br>        uint64 size;    // Size of file in bytes<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>The link system call creates another file system name referring to the same inode as an exist-<br>ing file. This fragment creates a new file named both a and b.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">open(<span class="hljs-string">&quot;a&quot;</span>, O_CREATE|O_WRONLY);<br>link(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<br></code></pre></td></tr></table></figure><p>Reading from or writing to a is the same as reading from or writing to b. Each inode is identified<br>by a unique inode number. After the code sequence above, it is possible to determine that a and b<br>refer to the same underlying contents by inspecting the result of fstat: both will return the same<br>inode number (ino), and the nlink count will be set to 2.<br>The unlink system call removes a name from the file</p><ul><li>The unlink system call removes a name from the file system. The file’s inode and the disk<br>space holding its content are only freed when the file’s link count is zero and no file descriptors<br>refer to it. Thus adding</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">unlink(<span class="hljs-string">&quot;a&quot;</span>);<br></code></pre></td></tr></table></figure><p>to the last code sequence leaves the inode and file content accessible as b. Furthermore,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">fd = open(<span class="hljs-string">&quot;/tmp/xyz&quot;</span>, O_CREATE|O_RDWR);<br>unlink(<span class="hljs-string">&quot;/tmp/xyz&quot;</span>);<br></code></pre></td></tr></table></figure><p>is an idiomatic way to create a temporary inode with no name that will be cleaned up when the<br>process closes fd or exits.</p><ul><li>Unix provides file utilities callable from the shell as user-level programs, for example mkdir,<br>ln, and rm. This design allows anyone to extend the command-line interface by adding new user-<br>level programs. In hindsight this plan seems obvious, but other systems designed at the time of<br>Unix often built such commands into the shell (and built the shell into the kernel).<br>One exception is cd, which is built into the shell (user&#x2F;sh.c:161). cd must change the current<br>working directory of the shell itself. If cd were run as a regular command, then the shell would<br>18fork a child process, the child process would run cd, and cd would change the child ’s working<br>directory. The parent’s (i.e., the shell’s) working directory would not change.</li></ul><h3 id="1-5-Real-world"><a href="#1-5-Real-world" class="headerlink" title="1.5 Real world"></a>1.5 Real world</h3><ul><li>the shell was the <strong>first so-called “scripting language.”</strong> The Unix system call interface persists today in<br>systems like BSD, Linux, and macOS.</li><li>The Unix system call interface has been standardized through the Portable Operating System<br>Interface (POSIX) standard. Xv6 is not POSIX compliant: it is missing many system calls (in-<br>cluding basic ones such as lseek), and many of the system calls it does provide differ from the<br>standard. Our main goals for xv6 are simplicity and clarity while providing a simple UNIX-like<br>system-call interface. Several people have extended xv6 with a few more system calls and a sim-<br>ple C library in order to run basic Unix programs. Modern kernels, however, provide many more<br>system calls, and many more kinds of kernel services, than xv6. For example, they support net-<br>working, windowing systems, user-level threads, drivers for many devices, and so on. Modern<br>kernels evolve continuously and rapidly, and offer many features beyond POSIX.</li><li>Xv6 does not provide a notion of users or of protecting one user from another; in Unix terms,<br>all xv6 processes run as root.</li></ul><h3 id="comments："><a href="#comments：" class="headerlink" title="comments："></a>comments：</h3><ul><li>Linux tries to adhere to POSIX (glibc provides most of the POSIX interfaces), but has its own extensions (e.g., epoll).</li><li>Programmers who write POSIX interfaces can compile and run them on macOS, BSD, and Linux (as long as they don’t use platform-specific extensions).</li><li>Think of the xv6 system call interface as a “subset implementation of POSIX.”</li><li></li></ul><p><a href="https://pubs.opengroup.org/onlinepubs/9699919799/"><strong>POSIX文档</strong></a></p>]]></content:encoded>
      
      
      
      <category domain="https://GoKo-Son626.github.io/tags/xv6-riscv/">xv6-riscv</category>
      
      
      <comments>https://goko-son626.github.io/post/xv6-riscv-ch1.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>xv6-riscv_struct</title>
      <link>https://goko-son626.github.io/post/xv6-riscv-struct.html</link>
      <guid>https://goko-son626.github.io/post/xv6-riscv-struct.html</guid>
      <pubDate>Tue, 04 Feb 2025 16:17:48 GMT</pubDate>
      
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;File structure of &lt;code&gt;xv6-riscv&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p><em><strong>File structure of <code>xv6-riscv</code></strong></em></p><span id="more"></span><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs zsh">.<br>├── kernel<br>│   ├── bio.c<br>│   ├── buf.h<br>│   ├── console.c<br>│   ├── defs.h<br>│   ├── elf.h<br>│   ├── entry.S<br>│   ├── exec.c<br>│   ├── fcntl.h<br>│   ├── file.c<br>│   ├── file.h<br>│   ├── fs.c<br>│   ├── fs.h<br>│   ├── kalloc.c<br>│   ├── kernel.ld<br>│   ├── kernelvec.S<br>│   ├── log.c<br>│   ├── main.c<br>│   ├── memlayout.h<br>│   ├── param.h<br>│   ├── pipe.c<br>│   ├── plic.c<br>│   ├── printf.c<br>│   ├── proc.c<br>│   ├── proc.h<br>│   ├── riscv.h<br>│   ├── sleeplock.c<br>│   ├── sleeplock.h<br>│   ├── spinlock.c<br>│   ├── spinlock.h<br>│   ├── start.c<br>│   ├── stat.h<br>│   ├── string.c<br>│   ├── swtch.S<br>│   ├── syscall.c<br>│   ├── syscall.h<br>│   ├── sysfile.c<br>│   ├── sysproc.c<br>│   ├── trampoline.S<br>│   ├── trap.c<br>│   ├── types.h<br>│   ├── uart.c<br>│   ├── virtio_disk.c<br>│   ├── virtio.h<br>│   └── vm.c<br>├── LICENSE<br>├── Makefile<br>├── mkfs<br>│   └── mkfs.c<br>├── README<br>└── user<br>    ├── cat.c<br>    ├── echo.c<br>    ├── forktest.c<br>    ├── grep.c<br>    ├── grind.c<br>    ├── init.c<br>    ├── initcode.S<br>    ├── kill.c<br>    ├── ln.c<br>    ├── ls.c<br>    ├── mkdir.c<br>    ├── printf.c<br>    ├── rm.c<br>    ├── sh.c<br>    ├── stressfs.c<br>    ├── ulib.c<br>    ├── umalloc.c<br>    ├── user.h<br>    ├── user.ld<br>    ├── usertests.c<br>    ├── usys.pl<br>    ├── wc.c<br>    └── zombie.c<br></code></pre></td></tr></table></figure><h2 id="逐文件详细解读它们的作用、重要性："><a href="#逐文件详细解读它们的作用、重要性：" class="headerlink" title="逐文件详细解读它们的作用、重要性："></a>逐文件详细解读它们的作用、重要性：</h2><hr><h3 id="🧠-整体结构"><a href="#🧠-整体结构" class="headerlink" title="🧠 整体结构"></a>🧠 整体结构</h3><table><thead><tr><th>目录&#x2F;文件</th><th>作用</th><th>建议重点关注</th></tr></thead><tbody><tr><td><code>kernel/</code></td><td>xv6 核心实现，内核源码</td><td>✅ 必看</td></tr><tr><td><code>user/</code></td><td>用户态程序、测试程序、库</td><td>✅ 推荐</td></tr><tr><td><code>mkfs/</code></td><td>构建文件系统镜像工具</td><td>❗可选</td></tr><tr><td>顶层构建文件</td><td><code>Makefile</code>, <code>README</code>, <code>LICENSE</code> 等</td><td>🧩 熟悉结构用</td></tr></tbody></table><hr><h2 id="📁-kernel-—-xv6-的心脏（重点模块）"><a href="#📁-kernel-—-xv6-的心脏（重点模块）" class="headerlink" title="📁 kernel&#x2F; — xv6 的心脏（重点模块）"></a>📁 kernel&#x2F; — xv6 的心脏（重点模块）</h2><p>xv6 主要模块可分为：</p><ul><li><strong>内核启动与内存管理</strong>：<code>entry.S</code>、<code>start.c</code>、<code>vm.c</code>、<code>kalloc.c</code></li><li><strong>中断、异常、系统调用</strong>：<code>trap.c</code>、<code>syscall.c</code>、<code>kernelvec.S</code>、<code>trampoline.S</code></li><li><strong>进程调度与管理</strong>：<code>proc.c</code>、<code>swtch.S</code></li><li><strong>文件系统与文件接口</strong>：<code>fs.c</code>、<code>file.c</code>、<code>bio.c</code>、<code>log.c</code></li><li><strong>设备驱动</strong>：<code>uart.c</code>、<code>console.c</code>、<code>virtio_disk.c</code>、<code>plic.c</code></li><li><strong>内核工具代码</strong>：<code>spinlock.c</code>、<code>sleeplock.c</code>、<code>printf.c</code>、<code>string.c</code></li></ul><hr><h3 id="🧾-文件级详细解释（按子系统分类）"><a href="#🧾-文件级详细解释（按子系统分类）" class="headerlink" title="🧾 文件级详细解释（按子系统分类）"></a>🧾 文件级详细解释（按子系统分类）</h3><hr><h5 id="🟩-一、内核启动与内存管理"><a href="#🟩-一、内核启动与内存管理" class="headerlink" title="🟩 一、内核启动与内存管理"></a>🟩 一、内核启动与内存管理</h5><table><thead><tr><th>文件</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>entry.S</code></td><td>核心启动汇编入口</td><td>设置页表、跳转到 <code>start()</code></td></tr><tr><td><code>start.c</code></td><td>C 语言入口</td><td><code>main()</code> 前做环境初始化（页表、trapframe）</td></tr><tr><td><code>main.c</code></td><td>内核主函数</td><td>启动内核模块，如 <code>userinit()</code></td></tr><tr><td><code>kernel.ld</code></td><td>内核链接脚本</td><td>指定内核段地址、符号导出顺序</td></tr><tr><td><code>vm.c</code></td><td>虚拟内存系统</td><td>页表分配、拷贝、映射（基于 Sv39）</td></tr><tr><td><code>kalloc.c</code></td><td>物理页分配器</td><td>管理空闲页链表，用于 <code>allocuvm</code></td></tr><tr><td><code>memlayout.h</code></td><td>内存布局宏</td><td>定义 KERNBASE、PHYSTOP 等常量</td></tr></tbody></table><p>📌 建议从 <code>entry.S → start.c → main.c → userinit()</code> 跑一遍流程。</p><hr><h5 id="🟦-二、进程管理与调度"><a href="#🟦-二、进程管理与调度" class="headerlink" title="🟦 二、进程管理与调度"></a>🟦 二、进程管理与调度</h5><table><thead><tr><th>文件</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>proc.c</code></td><td>管理进程表、fork&#x2F;wait</td><td><code>scheduler()</code> 是调度器核心</td></tr><tr><td><code>proc.h</code></td><td>进程结构体定义</td><td>结构体 <code>struct proc</code> 包含页表、状态、trapframe</td></tr><tr><td><code>swtch.S</code></td><td>上下文切换汇编</td><td>保存&#x2F;恢复寄存器，调度必用</td></tr><tr><td><code>trap.c</code></td><td>trap&#x2F;中断入口</td><td>用户 → 内核的总入口；异常调度、syscall 都走它</td></tr><tr><td><code>sysproc.c</code></td><td>与进程相关的系统调用</td><td><code>sys_exit</code>、<code>sys_fork</code>、<code>sys_wait</code></td></tr></tbody></table><p>📌 强烈建议：给 <code>fork()</code>、<code>scheduler()</code>、<code>yield()</code> 加打印观察运行。</p><hr><h5 id="🟨-三、系统调用机制"><a href="#🟨-三、系统调用机制" class="headerlink" title="🟨 三、系统调用机制"></a>🟨 三、系统调用机制</h5><table><thead><tr><th>文件</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>syscall.c</code></td><td>syscall 分发器</td><td>根据 syscall num 分发到 <code>sys_*</code></td></tr><tr><td><code>syscall.h</code></td><td>syscall 编号</td><td>用 <code>#define SYS_write 1</code> 等映射</td></tr><tr><td><code>sysfile.c</code></td><td>文件相关 syscall</td><td><code>open/close/read/write</code> 的内核实现</td></tr><tr><td><code>usys.pl</code> → <code>usys.S</code></td><td>用户态 syscall 包装</td><td>生成用户代码 <code>mov a7, id; ecall</code></td></tr></tbody></table><p>📌 syscall 流程 &#x3D; 用户态 <code>ecall</code> → trap → syscall.c → sys_*()</p><hr><h5 id="🟧-四、文件系统与-I-O-接口"><a href="#🟧-四、文件系统与-I-O-接口" class="headerlink" title="🟧 四、文件系统与 I&#x2F;O 接口"></a>🟧 四、文件系统与 I&#x2F;O 接口</h5><table><thead><tr><th>文件</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>fs.c</code></td><td>inode 层</td><td><code>ialloc</code>, <code>readi</code>, <code>writei</code>，文件核心结构</td></tr><tr><td><code>fs.h</code></td><td>inode 定义</td><td><code>struct inode</code>，块地址信息等</td></tr><tr><td><code>file.c</code></td><td>文件描述符层</td><td><code>struct file</code>，管理 open&#x2F;close 等</td></tr><tr><td><code>file.h</code></td><td>文件描述符定义</td><td>支持 pipe&#x2F;dev&#x2F;inode 等类型</td></tr><tr><td><code>bio.c</code></td><td>缓存块读写</td><td>实现 block 级读写缓存</td></tr><tr><td><code>log.c</code></td><td>日志机制</td><td>crash-safe 写操作事务（write-ahead logging）</td></tr><tr><td><code>pipe.c</code></td><td>管道实现</td><td>内存中双向 FIFO</td></tr><tr><td><code>fcntl.h</code>, <code>stat.h</code></td><td>POSIX 相关头文件</td><td>用于 <code>open</code> flag、<code>stat</code> 结构体</td></tr></tbody></table><p>📌 建议调试 <code>fs.c</code> 的 <code>namei()</code>、<code>dirlookup()</code>，看路径如何被解析。</p><hr><h5 id="🟥-五、设备驱动与中断控制"><a href="#🟥-五、设备驱动与中断控制" class="headerlink" title="🟥 五、设备驱动与中断控制"></a>🟥 五、设备驱动与中断控制</h5><table><thead><tr><th>文件</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>uart.c</code></td><td>串口驱动</td><td>初始化串口，写入字符给终端</td></tr><tr><td><code>console.c</code></td><td>控制台 I&#x2F;O</td><td>与 UART 配合实现 shell 输入输出</td></tr><tr><td><code>plic.c</code></td><td>中断控制器</td><td>Platform-Level Interrupt Controller</td></tr><tr><td><code>virtio_disk.c</code></td><td>虚拟磁盘驱动</td><td>QEMU 虚拟磁盘硬件访问层</td></tr><tr><td><code>virtio.h</code></td><td>virtio 设备定义</td><td>配套数据结构</td></tr></tbody></table><p>📌 <code>virtio_disk.c</code> 调试方法：观察 <code>virtio_rw()</code> 实现的读写逻辑。</p><hr><h5 id="🟫-六、工具类-内核库函数"><a href="#🟫-六、工具类-内核库函数" class="headerlink" title="🟫 六、工具类 &#x2F; 内核库函数"></a>🟫 六、工具类 &#x2F; 内核库函数</h5><table><thead><tr><th>文件</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>defs.h</code></td><td>内核函数声明</td><td><code>extern</code> 所有模块函数，供全局使用</td></tr><tr><td><code>riscv.h</code></td><td>RISC-V CSR 宏、寄存器定义</td><td>包含 <code>rdtime</code>, <code>csrr</code>, <code>sstatus</code> 等</td></tr><tr><td><code>spinlock.c/.h</code></td><td>自旋锁实现</td><td>核心互斥机制，需关中断</td></tr><tr><td><code>sleeplock.c/.h</code></td><td>睡眠锁实现</td><td>用于文件系统，sleep&#x2F;wakeup 管理</td></tr><tr><td><code>string.c</code></td><td>libc 实现</td><td><code>memcpy</code>, <code>strlen</code> 等内核自带函数</td></tr><tr><td><code>printf.c</code></td><td>内核级 printf</td><td>用于调试打印，无缓冲版</td></tr><tr><td><code>param.h</code></td><td>系统参数宏</td><td>定义 <code>NPROC</code>, <code>MAXPATH</code> 等全局参数</td></tr><tr><td><code>types.h</code></td><td>常用类型定义</td><td><code>uchar</code>, <code>uint</code>, <code>sint</code> 等简写</td></tr></tbody></table><p>📌 常用 grep 命令：<code>grep -rn &quot;spin_lock&quot; kernel/</code> 追踪并发点</p><hr><h3 id="📁-user-—-用户态程序与测试"><a href="#📁-user-—-用户态程序与测试" class="headerlink" title="📁 user&#x2F; — 用户态程序与测试"></a>📁 user&#x2F; — 用户态程序与测试</h3><table><thead><tr><th>文件</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>*.c</code></td><td>命令程序</td><td>shell 命令如 <code>ls</code>, <code>cat</code>, <code>echo</code>, <code>sh</code> 等</td></tr><tr><td><code>init.c</code></td><td>首个用户进程</td><td><code>userinit()</code> 启动的程序，运行 <code>/init</code></td></tr><tr><td><code>initcode.S</code></td><td>最原始的用户态代码</td><td>由 <code>userinit()</code> 载入的程序（汇编）</td></tr><tr><td><code>ulib.c</code></td><td>libc 函数</td><td>用户态的 <code>malloc</code>, <code>printf</code> 等</td></tr><tr><td><code>umalloc.c</code></td><td>malloc 实现</td><td>用户态堆分配</td></tr><tr><td><code>usertests.c</code></td><td>用户态测试集</td><td>测试 syscall、进程、文件功能</td></tr><tr><td><code>user.ld</code></td><td>用户态链接脚本</td><td>控制用户程序的段分布</td></tr><tr><td><code>user.h</code></td><td>函数声明</td><td>供用户程序引用 <code>printf</code>, <code>fork</code> 等接口</td></tr></tbody></table><p>📌 强烈推荐你从 <code>init.c</code> 开始 debug，第一个用户进程的运行关键路径！</p><hr><h3 id="📁-mkfs-—-构建文件系统镜像工具"><a href="#📁-mkfs-—-构建文件系统镜像工具" class="headerlink" title="📁 mkfs&#x2F; — 构建文件系统镜像工具"></a>📁 mkfs&#x2F; — 构建文件系统镜像工具</h3><table><thead><tr><th>文件</th><th>说明</th></tr></thead><tbody><tr><td><code>mkfs.c</code></td><td>构建 xv6 文件系统镜像（user&#x2F;init 等文件压入）</td></tr></tbody></table><p>📌 不看也无妨，用于 <code>make</code> 阶段构建 <code>fs.img</code></p><hr><h3 id="📄-顶层文件"><a href="#📄-顶层文件" class="headerlink" title="📄 顶层文件"></a>📄 顶层文件</h3><table><thead><tr><th>文件</th><th>说明</th></tr></thead><tbody><tr><td><code>Makefile</code></td><td>编译入口，构建 <code>kernel</code>, <code>fs.img</code>, <code>qemu</code> 等</td></tr><tr><td><code>README</code></td><td>简要说明文档，讲解如何使用</td></tr><tr><td><code>LICENSE</code></td><td>授权条款（MIT）</td></tr></tbody></table><hr><h3 id="✅-总结"><a href="#✅-总结" class="headerlink" title="✅ 总结"></a>✅ 总结</h3><ul><li>用 <strong>模块化思维</strong> 分阶段学，比如 “先把 trap 理清楚”，再看 syscall。</li><li>推荐搭配如下工具：<ul><li>tmux</li><li>zsh</li><li>grep…</li></ul></li></ul>]]></content:encoded>
      
      
      
      <category domain="https://GoKo-Son626.github.io/tags/xv6-riscv/">xv6-riscv</category>
      
      
      <comments>https://goko-son626.github.io/post/xv6-riscv-struct.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
