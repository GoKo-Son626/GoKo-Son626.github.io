<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GoKo&#39;s blog</title>
    <link>https://GoKo-Son626.github.io/</link>
    
    <atom:link href="https://goko-son626.github.io/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sun, 10 Aug 2025 18:53:30 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>bpftrace on k1</title>
      <link>https://goko-son626.github.io/post/bpftrace-on-k1.html</link>
      <guid>https://goko-son626.github.io/post/bpftrace-on-k1.html</guid>
      <pubDate>Sun, 10 Aug 2025 18:36:11 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Config bpftrace on spacemit-k1 and user it&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>Config bpftrace on spacemit-k1 and user it</strong></em></li></ul><span id="more"></span><h3 id="bpftrace"><a href="#bpftrace" class="headerlink" title="bpftrace"></a>bpftrace</h3><h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> bpftrace -e <span class="hljs-string">&#x27;BEGIN &#123; printf(&quot;Hello, World! I have conquered eBPF on RISC-V!\n&quot;); &#125;&#x27;</span><br><span class="hljs-comment"># 追踪所有打开文件的操作</span><br><span class="hljs-built_in">sudo</span> bpftrace -e <span class="hljs-string">&#x27;tracepoint:syscalls:sys_enter_openat &#123; printf(&quot;PID %d opening: %s\n&quot;, pid, str(args-&gt;filename)); &#125;&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/bpftrace-on-k1/image-0.png" alt="test bpftrace on k1"></p>]]></content:encoded>
      
      
      <category domain="https://GoKo-Son626.github.io/categories/kernel/">kernel</category>
      
      <category domain="https://GoKo-Son626.github.io/categories/kernel/ebpf/">ebpf</category>
      
      
      <category domain="https://GoKo-Son626.github.io/tags/bpftrace/">bpftrace</category>
      
      <category domain="https://GoKo-Son626.github.io/tags/ebpf/">ebpf</category>
      
      
      <comments>https://goko-son626.github.io/post/bpftrace-on-k1.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ebpf</title>
      <link>https://goko-son626.github.io/post/ebpf-and-use-it.html</link>
      <guid>https://goko-son626.github.io/post/ebpf-and-use-it.html</guid>
      <pubDate>Sun, 04 May 2025 15:42:34 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;了解ebpf并在riscv平台上使用ebpf&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>了解ebpf并在riscv平台上使用ebpf</strong></em></li></ul><span id="more"></span><h3 id="ebpf"><a href="#ebpf" class="headerlink" title="ebpf"></a>ebpf</h3><ul><li><strong>eBPF</strong>（extened Berkeley Packet Filter）是一种内核技术，它允许开发人员在不修改内核代码的情况下运行特定的功能。eBPF 的概念源自于 Berkeley Packet Filter（BPF），后者是由贝尔实验室开发的一种网络过滤器，可以捕获和过滤网络数据包。</li></ul><h3 id="用途和优势"><a href="#用途和优势" class="headerlink" title="用途和优势"></a>用途和优势</h3><ul><li><p>网络监控：eBPF 可以用于捕获网络数据包，并执行特定的逻辑来分析网络流量。例如，可以使用 eBPF 程序来监控网络流量，并在发现异常流量时进行警报。</p></li><li><p>安全过滤：eBPF 可以用于对网络数据包进行安全过滤。例如，可以使用 eBPF 程序来阻止恶意流量的传播，或者在发现恶意流量时对其进行拦截。[1]</p></li><li><p>性能分析：eBPF 可以用于对内核的性能进行分析。例如，可以使用 eBPF 程序来收集内核的性能指标，并通过特定的接口将其可视化。这样，可以更好地了解内核的性能瓶颈，并进行优化。</p></li><li><p>虚拟化：eBPF 可以用于虚拟化技术。例如，可以使用 eBPF 程序来收集虚拟机的性能指标，并进行负载均衡。这样，可以更好地利用虚拟化环境的资源，提高系统的性能和稳定性。</p></li><li><p>安全：验证器确保了任何 eBPF 程序都不会搞垮内核。</p></li><li><p>可移植：同一份 eBPF 字节码，理论上可以在任何架构（x86, ARM, RISC-V）的 Linux 内核上运行，因为 JIT 会为它们翻译出对应的原生机器码。</p></li><li><p>高性能：因为 JIT 的存在，最终运行的是原生机器码，速度接近于原生内核代码。</p></li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li><p>eBPF 的工作原理主要分为三个步骤：加载、编译和执行。</p></li><li><p>eBPF 需要在内核中运行。这通常是由用户态的应用程序完成的，它会通过系统调用来加载 eBPF 程序。在加载过程中，内核会将 eBPF 程序的代码复制到内核空间。</p></li><li><p>eBPF 程序需要经过编译和执行。这通常是由Clang&#x2F;LLVM的编译器完成，然后形成字节码后，将用户态的字节码装载进内核，Verifier会对要注入内核的程序进行一些内核安全机制的检查,这是为了确保 eBPF 程序不会破坏内核的稳定性和安全性。在检查过程中，内核会对 eBPF 程序的代码进行分析，以确保它不会进行恶意操作，如系统调用、内存访问等。如果 eBPF 程序通过了内核安全机制的检查，它就可以在内核中正常运行了，其会通过通过一个JIT编译步骤将程序的通用字节码转换为机器特定指令集，以优化程序的执行速度。</p></li></ul><h3 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash">+-----------------------------------------------------------------------------+<br>|                                  用户空间 (User Space)                      |<br>|-----------------------------------------------------------------------------|<br>|      [高层抽象/工具]                          [底层开发库]                  |<br>|                                                                             |<br>|   +-----------------+       +----------------+                              |<br>|   |   bpftrace      |       |      BCC       | python/c++高级语言封装       |<br>|   | (诊断与排障语言)|       | (快速原型框架) | LLVM and header file         |<br>|   +-------+---------+       +--------+-------+                              |<br>|           |                          |                                      |<br>|  +---------------------------+       |                                      |<br>|  |         libbpf            |       |                                      |<br>|  |      (C开发库, CO-RE)     | ------&gt;----------------------------&gt;      <br>|  +-------------+-------------+                                    |<br>|                                                                   |         <br>|                BPF Maps (e.g., RingBuf, Hash)              | System Call   |<br>|     &lt;------------------------------------------------------&gt; (bpf())       |<br>|                (内核与用户空间的数据通道)                    | (控制与加载)  |<br>|                                                            |               |<br>+------------------------------------------------------------+----------------+<br>|                                  内核空间 (Kernel Space)                      |<br>|-----------------------------------------------------------------------------|<br>|                                                            |                |<br>|       BPF Maps (内核中的键值对存储) &lt;-----------------+    |                |<br>|                                                     |    |                |<br>|   +---------------------------------------------+   |    |                |<br>|   |                  eBPF 子系统                |   |    |                |<br>|   |                                             |   |    |                |<br>|   |  +-----------+     +----------+     +-----+   |    |                |<br>|   |  | Verifier  | --&gt; |   JIT    | --&gt; | CPU |   |    |                |<br>|   |  | (安全检查)|     | (编译优化) |   | (原生执行)|   |    |                |<br>|   |  +-----------+     +----------+     +-----+   |    v                |<br>|   |                                             |    |                |<br>|   |        eBPF 程序 (你的.bpf.c代码)           |    |                |<br>|   |                                             |    |                |<br>|   +-----------------------+---------------------+    v                |<br>|                           ^                          |                |<br>|                           | (事件触发)               | (读取/写入)    |<br>|                           |                          |                |<br>|   +-----------------------+--------------------------+------------+   |<br>|   |                      内核钩子 (Kernel Hooks)                |   |<br>|   |                                                             |   |<br>|   |  ftrace (kprobes, tracepoints), LSM, TC, XDP, Sockets ...   |   |<br>|   |  (BTF - 提供内核元数据, 增强钩子能力)                         |   |<br>|   +-------------------------------------------------------------+   |<br>|                                                                     |<br>+---------------------------------------------------------------------+<br></code></pre></td></tr></table></figure><ul><li><p>BCC</p></li><li><p>BCC 是基于 LLVM&#x2F;Clang 和内核头文件构建的一个 C++&#x2F;Python 封装的高层框架。</p></li><li><p>它通过 bcc 自带的运行时来加载和操作 BPF 程序。</p></li><li><p>不使用 libbpf。而是用自己的一套 loader 逻辑（依赖 Clang 编译 .bpf.c，自己生成 BPF bytecode，再用 bpf() syscall 加载进内核）。</p></li><li><p>它甚至是早于libbpf 出现的。</p></li><li><p>libbpf</p><ul><li>是一个官方的 C 语言开发库，用于用户空间与内核空间交互。</li><li>主要目标是：<ul><li>读取 .o（ELF）中的 BPF 程序段、map 定义等</li><li>使用 bpf() 系统调用加载程序</li><li>支持 CO-RE（Compile Once Run Everywhere）</li><li>解析 BTF 信息</li></ul></li></ul></li><li><p>bpftrace</p><ul><li>bpftrace 是 Linux 的一种高级跟踪语言。bpftrace 使用 LLVM 作为后端将脚本编译为 eBPF 字节码，并使用 libbpf 和 bcc 与 Linux BPF 子系统交互，以及现有的 Linux 跟踪功能：内核动态跟踪（kprobes）、用户级动态跟踪（uprobes）、跟踪点等</li></ul></li></ul><ul><li>ibbpf-bootstrap (仓库)<ul><li>由 libbpf 官方维护，如何正确地构建一个现代的、基于 libbpf + CO-RE 的 eBPF 程序。clone 下来就能直接编译: 它的 Makefile（构建脚本）已经帮你处理好了所有复杂的细节：如何调用 clang 将 .bpf.c 文件编译成 eBPF 对象文件 (.bpf.o)，如何将用户态的 .c 文件和 libbpf 库链接起来。它是一个“开箱即用”的实践示例。</li></ul></li><li>awesome-ebpf (仓库)<ul><li>一个 “资源清单”, 收集了互联网上几乎所有与 eBPF 相关的优秀资源链接，比如：教程、项目、工具、博客文章、演讲视频等。</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://GoKo-Son626.github.io/categories/kernel/">kernel</category>
      
      <category domain="https://GoKo-Son626.github.io/categories/kernel/ebpf/">ebpf</category>
      
      
      <category domain="https://GoKo-Son626.github.io/tags/ebpf/">ebpf</category>
      
      
      <comments>https://goko-son626.github.io/post/ebpf-and-use-it.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>qspinlock</title>
      <link>https://goko-son626.github.io/post/qspinlock.html</link>
      <guid>https://goko-son626.github.io/post/qspinlock.html</guid>
      <pubDate>Thu, 03 Apr 2025 01:25:24 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;qspinlock 是一种为现代多核系统设计的先进混合自旋锁。它巧妙地融合了两种经典锁的优点：既继承了票据锁（ticket lock）的公平性，又借鉴了 MCS 锁优异的可扩展性。&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>qspinlock 是一种为现代多核系统设计的先进混合自旋锁。它巧妙地融合了两种经典锁的优点：既继承了票据锁（ticket lock）的公平性，又借鉴了 MCS 锁优异的可扩展性。</strong></em></li></ul><span id="more"></span><h4 id="1-传统spinlock："><a href="#1-传统spinlock：" class="headerlink" title="1. 传统spinlock："></a>1. 传统spinlock：</h4><ul><li>多个等待的 CPU 核心中，谁先获得锁并无保证，存在公平性问题，同时缓存一致性开销大（如MESI），CPU核心越大，cache需求越厉害，缺乏可扩展性</li></ul><p><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/qspinlock/image-8.png" alt="alt text"></p><h4 id="2-Ticket-spinlock"><a href="#2-Ticket-spinlock" class="headerlink" title="2. Ticket spinlock"></a>2. Ticket spinlock</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> TICKET_NEXT16</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>    u32 lock;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">raw_tickets</span> &#123;</span><br>      <span class="hljs-comment">/* little endian */</span><br>      u16 owner;<br>      u16 next;<br>    &#125; tickets;<br>  &#125;;<br>&#125; <span class="hljs-type">arch_spinlock_t</span>;<br><br>my_ticket = atomic_fetch_inc(&amp;lock-&gt;tickets.next);<br><br><span class="hljs-keyword">while</span> (lock-&gt;tickets.owner != my_ticket)<br>  cpu_relax();<br></code></pre></td></tr></table></figure><ul><li>解决了公平问题，防止某些 CPU 永远得不到锁，但所有核都轮询同一个owner变量，read cache line成热点，限制扩展性</li></ul><h4 id="3-MCS-lock"><a href="#3-MCS-lock" class="headerlink" title="3. MCS lock"></a>3. MCS lock</h4><ul><li>本质上是一种基于链表结构的自旋锁，每个CPU有一个对应的节点(锁的副本)，基于各自不同的副本变量进行等待，锁本身是共享的，但队列节点是线程自己维护的，每个CPU只需要查询自己对应的本地cache line，仅在这个变量发生变化的时候，才需要读取内存和刷新这条cache line, 不像 classic&#x2F;ticket对共享变量进行spin</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_spinlock</span> &#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_spinlock</span> *<span class="hljs-title">next</span>;</span><br>  <span class="hljs-type">int</span> locked; <span class="hljs-comment">/* 1 if lock acquired */</span><br>  <span class="hljs-type">int</span> count;  <span class="hljs-comment">/* nesting count, see qspinlock.c */</span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">mcs_spin_lock</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mcs_spinlock **lock, <span class="hljs-keyword">struct</span> mcs_spinlock *node)</span><br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_spinlock</span> *<span class="hljs-title">prev</span>;</span><br><br>  <span class="hljs-comment">/* Init node */</span><br>  node-&gt;locked = <span class="hljs-number">0</span>;<br>  node-&gt;next   = <span class="hljs-literal">NULL</span>;<br><br>  prev = xchg(lock, node);<br>  <span class="hljs-keyword">if</span> (likely(prev == <span class="hljs-literal">NULL</span>)) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  WRITE_ONCE(prev-&gt;next, node);<br><br>  <span class="hljs-comment">/* Wait until the lock holder passes the lock down. */</span><br>  arch_mcs_spin_lock_contended(&amp;node-&gt;locked);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>每个 CPU 线程创建的node 是独立的，每个线程都有自己的 node 实例。但是结构体中多了一个指针使结构体变大了，导致了“内存开销问题”：MCS 锁把竞争带来的 cache-line 抖动降低了，但牺牲了一些内存和部分结构管理的成本。</li></ul><h4 id="4-qspinlock"><a href="#4-qspinlock" class="headerlink" title="4. qspinlock"></a>4. qspinlock</h4><p><strong>include&#x2F;asm-generic&#x2F;qspinlock_types.h:</strong> 锁数据结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">qspinlock</span> &#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>    <span class="hljs-type">atomic_t</span> val;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                 * By using the whole 2nd least significant byte for the</span><br><span class="hljs-comment">                 * pending bit, we can allow better optimization of the lock</span><br><span class="hljs-comment">                 * acquisition for the pending bit holder.</span><br><span class="hljs-comment">                 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __LITTLE_ENDIAN</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>      u8      locked;<br>      u8      pending;<br>    &#125;;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>      u16     locked_pending;<br>      u16     tail;<br>    &#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>      u16     tail;<br>      u16     locked_pending;<br>    &#125;;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>      u8      reserved[<span class="hljs-number">2</span>];<br>      u8      pending;<br>      u8      locked;<br>    &#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  &#125;;<br>&#125; <span class="hljs-type">arch_spinlock_t</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Initializier</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __ARCH_SPIN_LOCK_UNLOCKED       &#123; &#123; .val = ATOMIC_INIT(0) &#125; &#125;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Bitfields in the atomic value:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * When NR_CPUS &lt; 16K</span><br><span class="hljs-comment"> *  0- 7: locked byte</span><br><span class="hljs-comment"> *     8: pending</span><br><span class="hljs-comment"> *  9-15: not used</span><br><span class="hljs-comment"> * 16-17: tail index</span><br><span class="hljs-comment"> * 18-31: tail cpu (+1)</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * When NR_CPUS &gt; = 16K</span><br><span class="hljs-comment"> *  0- 7: locked byte</span><br><span class="hljs-comment"> *     8: pending</span><br><span class="hljs-comment"> *  9-10: tail index</span><br><span class="hljs-comment"> * 11-31: tail cpu (+1)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Q_SET_MASK(type)       (((1U &lt;&lt; _Q_ ## type ## _BITS) - 1)\</span><br><span class="hljs-meta">&lt;&lt; _Q_ ## type ## _OFFSET)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Q_LOCKED_OFFSET        0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Q_LOCKED_BITS          8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Q_LOCKED_MASK          _Q_SET_MASK(LOCKED)</span><br></code></pre></td></tr></table></figure><p><strong>When NR_CPUS &lt; 16K：</strong><br><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/qspinlock/image-7.png" alt="alt text"></p><ul><li><code>locked</code>：用来表示这个锁是否被人持有（0：无，1：有）</li><li><code>pending</code>：可以理解为最优先持锁位，即当unlock之后只有这个位的CPU最先持锁，也有1和0</li><li><code>tail</code>：有idx+CPU构成，用来标识等待队列的最后一个节点。</li><li><code>tail_idx</code>：就是index，它作为mcs_nodes数组的下标使用</li><li><code>tail_CPU</code>：用来表示CPU的编号+1，+1因为规定tail为0的时候表示等待队列中没有成员</li></ul><p><strong>kernel&#x2F;locking&#x2F;mcs_spinlock.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_spinlock</span> &#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_spinlock</span> *<span class="hljs-title">next</span>;</span><br>  <span class="hljs-type">int</span> locked; <span class="hljs-comment">/* 1 if lock acquired */</span><br>  <span class="hljs-type">int</span> count;  <span class="hljs-comment">/* nesting count, see qspinlock.c */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><code>locked = 1</code>:只是说锁传到了当前加节点，但是当前节点还需要主动申请锁(qspinlock -&gt; locked &#x3D; 1)<br><code>count</code>：针对四种上下文用于追踪当前用了第几个 node（即 idx），最大为4,不够用时就fallback不排队直接自旋</p><p><strong>kernel&#x2F;locking&#x2F;qspinlock.c:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_NODES       4</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">qnode</span> &#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mcs_spinlock</span> <span class="hljs-title">mcs</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_PARAVIRT_SPINLOCKS</span><br>  <span class="hljs-type">long</span> reserved[<span class="hljs-number">2</span>];<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Per-CPU queue node structures; we can never have more than 4 nested</span><br><span class="hljs-comment"> * contexts: task, softirq, hardirq, nmi.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Exactly fits one 64-byte cacheline on a 64-bit architecture.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * PV doubles the storage and uses the second cacheline for PV state.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-title function_">DEFINE_PER_CPU_ALIGNED</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> qnode, qnodes[MAX_NODES])</span>;<br></code></pre></td></tr></table></figure><ul><li>一个 CPU 上可能嵌套多个锁, <code>qnodes</code>针对四种上下文情况下，例：进程上下文中发生中断后再次获取锁</li><li>PER_CPU的优点是快，可防止抢锁时再mallock或临时分配导致延迟，成本等问题</li></ul><p><strong>申请锁：</strong></p><ol><li>快速申请<br><strong>include&#x2F;asm-generic&#x2F;qspinlock.h</strong></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * queued_spin_lock - acquire a queued spinlock</span><br><span class="hljs-comment"> * @lock: Pointer to queued spinlock structure</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">void</span> <span class="hljs-title function_">queued_spin_lock</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> qspinlock *lock)</span><br>&#123;<br>  <span class="hljs-type">int</span> val = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">if</span> (likely(atomic_try_cmpxchg_acquire(&amp;lock-&gt;val, &amp;val, _Q_LOCKED_VAL)))<br>    <span class="hljs-keyword">return</span>;<br><br>  queued_spin_lock_slowpath(lock, val);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/qspinlock/image-9.png" alt="alt text"></p><ol start="2"><li>中速申请</li></ol><ul><li>快速申请失败，queue中为空时，设置锁的pending位</li><li>再次检测（检查中间是否有其它cpu进入）</li><li>一直循环检测locked位</li><li>当locked位为0时，清除pending位获得锁</li></ul><p><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/qspinlock/image-11.png" alt="alt text"></p><ol start="3"><li>慢速申请</li></ol><p><img src="https://raw.githubusercontent.com/GoKo-Son626/my-blog_images/main/qspinlock/image-12.png" alt="alt text"></p><table><thead><tr><th>申请</th><th>操作</th></tr></thead><tbody><tr><td>快速申请</td><td>这个锁当前没有人持有，直接通过cmpxchg()设置locked域即可获取了锁</td></tr><tr><td>中速申请</td><td>锁已经被人持有，但是MCS链表没有其他人，有且仅有一个人在等待这个锁。设置pending域，表示是第一顺位继承者，自旋等待lock-&gt; locked清0，即锁持有者释放锁</td></tr><tr><td>慢速申请</td><td>进入到queue中自旋等待，若为队列头（队列中没有等待的cpu），说明它已排到最前，可以开始尝试获取锁；否则，它会自旋等待前一个节点释放锁，并通知它可以尝试获取锁了</td></tr></tbody></table><p><strong>end:</strong></p><ul><li><p>如果只有1个或2个CPU试图获取锁，那么只需要一个4字节的qspinlock就可以了，其所占内存的大小和ticket spinlock一样。当有3个以上的CPU试图获取锁，则需要(N-2)个MCS node</p></li><li><p>qspinlock中加入”pending”位域的意义，如果是两个CPU试图获取锁，那么第二个CPU只需要简单地设置”pending”为1，而不用创建一个MCS node</p></li><li><p>试图加锁的CPU数目超过3个，使用ticket spinlock机制就会造成多个CPU的cache line刷新的问题，而qspinlock可以利用MCS node队列来解决这个问题</p></li><li><p>在多核争用严重场景下，qspinlock 让等待者在本地内存区域自旋，减少了锁的缓存抖动和对总线的竞争消耗</p></li><li><p>RISCV_QUEUED_SPINLOCKS 只应在平台(RISC-V)具有 Zabha 或 Ziccrse 时启用，不支持的情况不要选用</p></li><li><p>优先级反转问题，queue会保证了FIFO提高了公平性，但它无法感知任务的优先级，可能因为排在队列前方的低优先级任务未释放锁而发生等待，从而导致 优先级反转</p></li></ul>]]></content:encoded>
      
      
      <category domain="https://GoKo-Son626.github.io/categories/kernel/">kernel</category>
      
      <category domain="https://GoKo-Son626.github.io/categories/kernel/qspinlock/">qspinlock</category>
      
      
      <category domain="https://GoKo-Son626.github.io/tags/lock/">lock</category>
      
      
      <comments>https://goko-son626.github.io/post/qspinlock.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Platform bus</title>
      <link>https://goko-son626.github.io/post/Platform-bus.html</link>
      <guid>https://goko-son626.github.io/post/Platform-bus.html</guid>
      <pubDate>Mon, 06 Jan 2025 03:33:21 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;平台总线是linux系统虚拟出来的一种总线,是一个内核子系统，负责管理 platform_device（硬件描述）和 platform_driver（驱动代码）,使它们先分离.后搭档&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>平台总线是linux系统虚拟出来的一种总线,是一个内核子系统，负责管理 platform_device（硬件描述）和 platform_driver（驱动代码）,使它们先分离.后搭档</strong></em></li></ul><span id="more"></span><h3 id="平台总线-Platform-Bus-总线控制器信息和控制器驱动之间"><a href="#平台总线-Platform-Bus-总线控制器信息和控制器驱动之间" class="headerlink" title="平台总线(Platform Bus)(总线控制器信息和控制器驱动之间)"></a>平台总线(Platform Bus)(总线控制器信息和控制器驱动之间)</h3><ul><li>平台总线（Platform Bus）是内核的一条“虚拟”总线。它不像 PCI、USB 那样是物理上存在的总线，而是为了解决一类特殊设备的驱动问题而设计的 <strong>软件机制</strong>。这类设备通常是 <strong>SoC (System on Chip) 芯片内部集成的、不可被自动识别的外设</strong>，比如 I2C 控制器、SPI 控制器、GPIO 控制器、LCD 控制器等。</li></ul><ul><li><strong>原理：设备与驱动的分离与匹配 (Separation and Matching)</strong><ul><li><p><strong>问题：</strong> 对于 PCI 或 USB 设备，设备自身带有 ID 信息（Vendor ID, Product ID）。驱动可以根据这些 ID “认领” 设备。但 SoC 上的那些外设，它们的寄存器地址、中断号都是固定的，写死在芯片里了，没法自动发现。</p></li><li><p><strong>解决：</strong> 把 <strong>设备信息</strong> 和 <strong>驱动代码</strong> 分开！”</p><ol><li><strong>平台设备 (<code>platform_device</code>)：</strong> 这是一块纯粹的“数据”，用来描述硬件资源。它告诉内核：“在物理地址 <code>0x12345678</code> 有个设备，它使用中断号 <code>5</code>，它的名字叫 <code>my-i2c-controller</code>”。这些信息通常写在 <strong>设备树 (Device Tree, <code>.dts</code> 文件)</strong> 中，或者早期的板级配置文件 (<code>board-xxx.c</code>)里。</li><li><strong>平台驱动 (<code>platform_driver</code>)：</strong> 真正的驱动代码。注册时告诉内核：是一个驱动，我能处理名字叫 <code>my-i2c-controller</code> 的设备。</li><li><strong>匹配 (<code>Match</code>)：</strong> 当一个 <code>platform_device</code> 和一个 <code>platform_driver</code> 被注册到内核时，平台总线核心会进行匹配。最常见的匹配方式就是看 <strong>名字</strong> 是否一样。</li><li><strong>探测 (<code>Probe</code>)：</strong> 一旦匹配成功，总线核心就会调用平台驱动的 <code>.probe</code> 函数。在这个函数里，驱动程序会通过相关的API函数从 <code>platform_device</code> 结构体中获取到设备的硬件资源（如内存地址、中断号），然后用这些信息去初始化硬件，完成驱动的加载。</li></ol></li><li><p><strong>流程：</strong></p><ul><li>系统启动，内核解析设备树。</li><li>内核在设备树里读到一段描述 I2C 控制器硬件的节点（包含了寄存器地址、中断号，以及最重要的 compatible &#x3D; “vendor,i2c-controller-v1”;）。</li><li>内核根据这个节点，创建并注册一个 platform_device 到平台总线。</li><li>I2C 控制器驱动（platform_driver）在加载时，会告诉平台总线：“我能处理 compatible 是 “vendor,i2c-controller-v1” 的设备”。</li><li>平台总线看到两者匹配，于是调用 I2C 控制器驱动的 .probe 函数。<ul><li>在 I2C 控制器驱动的 .probe 函数中，驱动程序会执行一系列初始化操作，其中最重要的一步是调用 i2c_add_adapter() 或 i2c_add_numbered_adapter()。这个函数调用，才是在内核中“建立”或“注册”了一条 I2C 总线（即一个 i2c_adapter）。这条逻辑上的总线就代表了那条物理的 I2C 总线。内核里的 i2c_adapter 就是物理 I2C 总线在软件层面的抽象。</li></ul></li><li><strong>设备间交互</strong>：<ul><li>“其他设备驱动”（比如 I2C 温度传感器驱动）不直接调用 I2C 控制器驱动里的 ops。这是一个分层概念。</li><li>正确的交互方式：<ul><li>I2C 控制器驱动把它实现底层 I&#x2F;O 操作的 ops（struct i2c_algorithm）注册给了 I2C 总线核心。</li><li>I2C 温度传感器驱动想通信时，它调用的是 I2C 总线核心提供的标准、统一的 API，如 i2c_master_send() 和 i2c_master_recv()。</li><li>I2C 总线核心在收到这些 API 调用后，会找到对应的 i2c_adapter，然后去调用这个 adapter 在注册时提供的 ops 里的具体函数，最终由 I2C 控制器驱动的代码来操作硬件。</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="platform-bus-设备和驱动"><a href="#platform-bus-设备和驱动" class="headerlink" title="platform bus 设备和驱动"></a>platform bus 设备和驱动</h3><h4 id="1-platform-device结构体"><a href="#1-platform-device结构体" class="headerlink" title="1. platform_device结构体"></a>1. platform_device结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">platform_device</span> &#123;</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span>*name;  <span class="hljs-comment">// 显示在/sys/bus/platform/devices/name.id(.auto)</span><br>  <span class="hljs-type">int</span>id;           <span class="hljs-comment">// 用来区分不同设备：name.id, id = -1: 没有后缀</span><br>  <span class="hljs-type">bool</span>id_auto;    <span class="hljs-comment">// 自动设置id：name.id.auto</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device</span><span class="hljs-title">dev</span>;</span>  <span class="hljs-comment">// 设备的通用属性部分</span><br>  u64platform_dma_mask;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device_dma_parameters</span> <span class="hljs-title">dma_parms</span>;</span><br>  u32num_resources;        <span class="hljs-comment">// 存储的资源的个数</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">resource</span>*<span class="hljs-title">resource</span>;</span>  <span class="hljs-comment">// 存储资源</span><br><br>  <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">platform_device_id</span>*<span class="hljs-title">id_entry</span>;</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * Driver name to force a match.  Do not set directly, because core</span><br><span class="hljs-comment">   * frees it.  Use driver_set_override() to set or clear it.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *driver_override;<br><br>  <span class="hljs-comment">/* MFD cell pointer */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mfd_cell</span> *<span class="hljs-title">mfd_cell</span>;</span><br><br>  <span class="hljs-comment">/* arch specific additions */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pdev_archdata</span><span class="hljs-title">archdata</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>成员结构体:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kobject</span> <span class="hljs-title">kobj</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device</span>*<span class="hljs-title">parent</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device_private</span>*<span class="hljs-title">p</span>;</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>*init_name; <span class="hljs-comment">/* initial name of the device */</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device_type</span> *<span class="hljs-title">type</span>;</span><br><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bus_type</span>*<span class="hljs-title">bus</span>;</span><span class="hljs-comment">/* type of bus device is on */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device_driver</span> *<span class="hljs-title">driver</span>;</span><span class="hljs-comment">/* which driver has allocated this</span><br><span class="hljs-comment">   device */</span><br><span class="hljs-type">void</span>*platform_data;<span class="hljs-comment">/* Platform specific data, device</span><br><span class="hljs-comment">   core doesn&#x27;t touch it */</span><br><span class="hljs-type">void</span>*driver_data;<span class="hljs-comment">/* Driver data, set and get with</span><br><span class="hljs-comment">   dev_set_drvdata/dev_get_drvdata */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mutex</span><span class="hljs-title">mutex</span>;</span><span class="hljs-comment">/* mutex to synchronize calls to</span><br><span class="hljs-comment"> * its driver.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dev_links_info</span><span class="hljs-title">links</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dev_pm_info</span><span class="hljs-title">power</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dev_pm_domain</span>*<span class="hljs-title">pm_domain</span>;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_ENERGY_MODEL</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">em_perf_domain</span>*<span class="hljs-title">em_pd</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_PINCTRL</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dev_pin_info</span>*<span class="hljs-title">pins</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dev_msi_info</span><span class="hljs-title">msi</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_ARCH_HAS_DMA_OPS</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dma_map_ops</span> *<span class="hljs-title">dma_ops</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>u64*dma_mask;<span class="hljs-comment">/* dma mask (if dma&#x27;able device) */</span><br>u64coherent_dma_mask;<span class="hljs-comment">/* Like dma_mask, but for</span><br><span class="hljs-comment">     alloc_coherent mappings as</span><br><span class="hljs-comment">     not all hardware supports</span><br><span class="hljs-comment">     64 bit addresses for consistent</span><br><span class="hljs-comment">     allocations such descriptors. */</span><br>u64bus_dma_limit;<span class="hljs-comment">/* upstream dma constraint */</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bus_dma_region</span> *<span class="hljs-title">dma_range_map</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device_dma_parameters</span> *<span class="hljs-title">dma_parms</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span><span class="hljs-title">dma_pools</span>;</span><span class="hljs-comment">/* dma pools (if dma&#x27;ble) */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_DMA_DECLARE_COHERENT</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dma_coherent_mem</span>*<span class="hljs-title">dma_mem</span>;</span> <span class="hljs-comment">/* internal for coherent mem</span><br><span class="hljs-comment">     override */</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_DMA_CMA</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cma</span> *<span class="hljs-title">cma_area</span>;</span><span class="hljs-comment">/* contiguous memory area for dma</span><br><span class="hljs-comment">   allocations */</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_SWIOTLB</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_tlb_mem</span> *<span class="hljs-title">dma_io_tlb_mem</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_SWIOTLB_DYNAMIC</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">dma_io_tlb_pools</span>;</span><br><span class="hljs-type">spinlock_t</span> dma_io_tlb_lock;<br><span class="hljs-type">bool</span> dma_uses_io_tlb;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">/* arch specific additions */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dev_archdata</span><span class="hljs-title">archdata</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device_node</span>*<span class="hljs-title">of_node</span>;</span> <span class="hljs-comment">/* associated device tree node */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fwnode_handle</span>*<span class="hljs-title">fwnode</span>;</span> <span class="hljs-comment">/* firmware device node */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_NUMA</span><br><span class="hljs-type">int</span>numa_node;<span class="hljs-comment">/* NUMA node this device is close to */</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-type">dev_t</span>devt;<span class="hljs-comment">/* dev_t, creates the sysfs &quot;dev&quot; */</span><br>u32id;<span class="hljs-comment">/* device instance */</span><br><br><span class="hljs-type">spinlock_t</span>devres_lock;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span><span class="hljs-title">devres_head</span>;</span><br><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-keyword">class</span>*<span class="hljs-keyword">class</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">attribute_group</span> **<span class="hljs-title">groups</span>;</span><span class="hljs-comment">/* optional groups */</span><br><br><span class="hljs-type">void</span>(*release)(<span class="hljs-keyword">struct</span> device *dev);      <span class="hljs-comment">// 必须编写，不然驱动编译不过去</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iommu_group</span>*<span class="hljs-title">iommu_group</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dev_iommu</span>*<span class="hljs-title">iommu</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device_physical_location</span> *<span class="hljs-title">physical_location</span>;</span><br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">device_removable</span><span class="hljs-title">removable</span>;</span><br><br><span class="hljs-type">bool</span>offline_disabled:<span class="hljs-number">1</span>;<br><span class="hljs-type">bool</span>offline:<span class="hljs-number">1</span>;<br><span class="hljs-type">bool</span>of_node_reused:<span class="hljs-number">1</span>;<br><span class="hljs-type">bool</span>state_synced:<span class="hljs-number">1</span>;<br><span class="hljs-type">bool</span>can_match:<span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(CONFIG_ARCH_HAS_SYNC_DMA_FOR_DEVICE) || \</span><br><span class="hljs-meta">    defined(CONFIG_ARCH_HAS_SYNC_DMA_FOR_CPU) || \</span><br><span class="hljs-meta">    defined(CONFIG_ARCH_HAS_SYNC_DMA_FOR_CPU_ALL)</span><br><span class="hljs-type">bool</span>dma_coherent:<span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_DMA_OPS_BYPASS</span><br><span class="hljs-type">bool</span>dma_ops_bypass : <span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_DMA_NEED_SYNC</span><br><span class="hljs-type">bool</span>dma_skip_sync:<span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_IOMMU_DMA</span><br><span class="hljs-type">bool</span>dma_iommu:<span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Resources are tree-like, allowing</span><br><span class="hljs-comment"> * nesting etc..</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">resource</span> &#123;</span><br><span class="hljs-type">resource_size_t</span> start;  <span class="hljs-comment">// 资源的起始信息和终止信息</span><br><span class="hljs-type">resource_size_t</span> end;    <span class="hljs-comment">// etc：中断的起始地址和终止地址</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *name;       <span class="hljs-comment">// 存储信息名称：etc：中断-irq</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> flags;    <span class="hljs-comment">// 存储资源类型：etc: IORESOURCE_IO/MEM/REG/IRQ/DMA/BUS...</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> desc;     <span class="hljs-comment">// 描述信息</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">resource</span> *<span class="hljs-title">parent</span>, *<span class="hljs-title">sibling</span>, *<span class="hljs-title">child</span>;</span> <span class="hljs-comment">// 节点相关</span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="2-简单的platform-device"><a href="#2-简单的platform-device" class="headerlink" title="2. 简单的platform_device"></a>2. 简单的platform_device</h4><ul><li>insmod注册成功：ls &#x2F;sys&#x2F;bus&#x2F;platform&#x2F;devices&#x2F;mydevice</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/platform_device.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">resource</span> <span class="hljs-title">mydevice_resource</span>[] =</span> &#123;<br>  [<span class="hljs-number">0</span>] = &#123;<br>    .start = <span class="hljs-number">0xFDD60000</span>,<br>    .end = <span class="hljs-number">0xFDD50004</span>,<br>    .flags = IORESOURCE_IO,<br>  &#125;,<br>  [<span class="hljs-number">1</span>] = &#123;<br>    .start = <span class="hljs-number">13</span>,<br>    .end = <span class="hljs-number">13</span>,<br>    .flags = IORESOURCE_IRQ,<br>  &#125;,<br>&#125;<br><br><span class="hljs-type">void</span> mydevice_release(<span class="hljs-keyword">struct</span> device *dev)<br>&#123;<br>  printk(<span class="hljs-string">&quot;This is mydevice_release\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">static</span> platform_device platform_device_test = &#123;<br>  .name = <span class="hljs-string">&quot;mydevice&quot;</span>,<br>  .id = <span class="hljs-number">-1</span>,<br>  .resource = mydevice_resource,<br>  .num_resources = ARRAY_SIZE(mydevice_resource),<br>  .dev = &#123;<br>    .release = mydevice_release,<br>  &#125;,<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">platform_device_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  platform_device_register(&amp;platform_device_test);<br><br>  printk(<span class="hljs-string">&quot;platform_device init\n&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">platform_device_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  platform_device_unregister(&amp;platform_device_test);<br><br>  printk(<span class="hljs-string">&quot;platform_device exit\n&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>module <span class="hljs-title function_">init</span><span class="hljs-params">(platform_device_init)</span>;<br>module <span class="hljs-title function_">exit</span><span class="hljs-params">(platform_device_exit)</span>;<br><br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;goko&quot;</span>);<br>MODULE_VERSION(<span class="hljs-string">&quot;V1.0&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="3-platform-driver结构体"><a href="#3-platform-driver结构体" class="headerlink" title="3. platform_driver结构体"></a>3. platform_driver结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">platform_driver</span> &#123;</span><br><span class="hljs-type">int</span> (*probe)(<span class="hljs-keyword">struct</span> platform_device *);     <span class="hljs-comment">// 匹配成功之后执行</span><br><span class="hljs-type">void</span> (*remove)(<span class="hljs-keyword">struct</span> platform_device *);   <span class="hljs-comment">// 设备移除时执行</span><br><span class="hljs-type">void</span> (*shutdown)(<span class="hljs-keyword">struct</span> platform_device *); <span class="hljs-comment">// 设备关闭时执行dy</span><br><span class="hljs-type">int</span> (*suspend)(<span class="hljs-keyword">struct</span> platform_device *, <span class="hljs-type">pm_message_t</span> state); <span class="hljs-comment">// 设备挂起时执行dy</span><br><span class="hljs-type">int</span> (*resume)(<span class="hljs-keyword">struct</span> platform_device *);    <span class="hljs-comment">// 设备恢复时执行dy</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device_driver</span> <span class="hljs-title">driver</span>;</span>                <span class="hljs-comment">// 设备公用的一些属性</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">platform_device_id</span> *<span class="hljs-title">id_table</span>;</span>  <span class="hljs-comment">// 设备id表</span><br><span class="hljs-type">bool</span> prevent_deferred_probe;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * For most device drivers, no need to care about this flag as long as</span><br><span class="hljs-comment"> * all DMAs are handled through the kernel DMA API. For some special</span><br><span class="hljs-comment"> * ones, for example VFIO drivers, they know how to manage the DMA</span><br><span class="hljs-comment"> * themselves and set this flag so that the IOMMU layer will allow them</span><br><span class="hljs-comment"> * to setup and manage their own I/O address space.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">bool</span> driver_managed_dma;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="4-简单的platform-driver"><a href="#4-简单的platform-driver" class="headerlink" title="4. 简单的platform_driver"></a>4. 简单的platform_driver</h4><ul><li>insmod注册成功：ls &#x2F;sys&#x2F;bus&#x2F;platform&#x2F;drivers&#x2F;mydevice</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span>      <span class="hljs-comment">// 所有模块都需要</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span>        <span class="hljs-comment">// __init 和 __exit 宏</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/fs.h&gt;</span>          <span class="hljs-comment">// file_operations 结构体和文件系统相关函数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/cdev.h&gt;</span>        <span class="hljs-comment">// cdev 结构体和相关函数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/uaccess.h&gt;</span>     <span class="hljs-comment">// copy_to_user, copy_from_user</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/device.h&gt;</span>      <span class="hljs-comment">// class_create, device_create</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/io.h&gt;</span>          <span class="hljs-comment">// ioremap, iounmap</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/platform_device.h&gt;</span> <span class="hljs-comment">// platform_driver 和 platform_device</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/of.h&gt;</span>          <span class="hljs-comment">// of_match_ptr, 设备树相关（如果使用设备树匹配）</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/slab.h&gt;</span>        <span class="hljs-comment">// kzalloc, kfree</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DRIVER_NAME <span class="hljs-string">&quot;my_platform_device&quot;</span> <span class="hljs-comment">// 定义驱动名称</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEVICE_COUNT 1                   <span class="hljs-comment">// 定义设备数量</span></span><br><br><span class="hljs-comment">// 驱动的私有数据结构体，用于存储设备相关的所有信息</span><br><span class="hljs-comment">// 这个结构体整合了你截图中`struct device_test`的所有成员</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mydevice_dev</span> &#123;</span><br>    <span class="hljs-type">dev_t</span> dev_num;             <span class="hljs-comment">// 设备号 (主设备号 + 次设备号)</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cdev</span> <span class="hljs-title">cdev_test</span>;</span>     <span class="hljs-comment">// 字符设备结构体</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-keyword">class</span> *<span class="hljs-keyword">class</span>;</span>       <span class="hljs-comment">// 设备类，用于在/sys/class/下创建条目</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device</span> *<span class="hljs-title">device</span>;</span>     <span class="hljs-comment">// 设备实例，用于在/dev/下创建设备文件</span><br>    <span class="hljs-type">char</span> kbuf[<span class="hljs-number">32</span>];             <span class="hljs-comment">// 内核缓冲区，用于与用户空间交换数据</span><br>    <span class="hljs-type">void</span> __iomem *vir_gpio_dr;  <span class="hljs-comment">// 经过ioremap映射后的虚拟地址</span><br>&#125;;<br><br><span class="hljs-comment">// 全局指针，指向我们的私有数据结构体</span><br><span class="hljs-comment">// 在probe中分配，在remove中释放</span><br><span class="hljs-comment">// 注意：更好的做法是通过 platform_set_drvdata/platform_get_drvdata 来管理，这里为了清晰展示，先用一个全局指针</span><br><span class="hljs-comment">// 稍后会展示更标准的做法</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mydevice_dev</span> *<span class="hljs-title">global_mydev</span>;</span> <br><br><span class="hljs-comment">// --- 文件操作函数集 (file_operations) ---</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mydevice_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *file)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mydevice_dev</span> *<span class="hljs-title">dev</span>;</span><br><br>    printk(KERN_INFO <span class="hljs-string">&quot;mydevice: device opened\n&quot;</span>);<br><br>    <span class="hljs-comment">// 通过 inode 中的 cdev 指针，找到包含它的父结构体 mydevice_dev</span><br>    <span class="hljs-comment">// 这是内核中非常常见和重要的技巧</span><br>    dev = container_of(inode-&gt;i_cdev, <span class="hljs-keyword">struct</span> mydevice_dev, cdev_test);<br><br>    <span class="hljs-comment">// 将设备私有结构体的指针存放在 file-&gt;private_data 中</span><br>    <span class="hljs-comment">// 这样，在后续的 read/write/release 操作中，就可以直接从 file 中获取，无需再次查找</span><br>    file-&gt;private_data = dev; <br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mydevice_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *file)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;mydevice: device closed\n&quot;</span>);<br>    <span class="hljs-comment">// 这里不需要释放 file-&gt;private_data，因为它指向的是在 probe 中分配的内存</span><br>    <span class="hljs-comment">// 该内存的生命周期与驱动绑定，而不是与文件的打开/关闭绑定</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">mydevice_read</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">char</span> __user *buf, <span class="hljs-type">size_t</span> size, <span class="hljs-type">loff_t</span> *off)</span><br>&#123;<br>    <span class="hljs-comment">// 从 file-&gt;private_data 中获取设备私有结构体指针</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mydevice_dev</span> *<span class="hljs-title">dev</span> =</span> file-&gt;private_data;<br>    <span class="hljs-type">size_t</span> len = <span class="hljs-built_in">strlen</span>(dev-&gt;kbuf);<br>    <span class="hljs-type">int</span> ret;<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;mydevice: reading data: %s\n&quot;</span>, dev-&gt;kbuf);<br><br>    <span class="hljs-keyword">if</span> (size &gt; len) &#123;<br>        size = len;<br>    &#125;<br><br>    <span class="hljs-comment">// 将内核空间的数据 (dev-&gt;kbuf) 拷贝到用户空间 (buf)</span><br>    ret = copy_to_user(buf, dev-&gt;kbuf, size);<br>    <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;mydevice: copy_to_user failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> -EFAULT; <span class="hljs-comment">// 返回一个标准的错误码</span><br>    &#125;<br><br>    <span class="hljs-comment">// 在这里，一个简单的实现是每次读取后返回已读取的字节数</span><br>    <span class="hljs-comment">// 一个更完整的实现需要处理 *off，以支持多次读取文件的不同部分</span><br>    <span class="hljs-keyword">return</span> size;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">mydevice_write</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *buf, <span class="hljs-type">size_t</span> size, <span class="hljs-type">loff_t</span> *off)</span><br>&#123;<br>    <span class="hljs-comment">// 从 file-&gt;private_data 中获取设备私有结构体指针</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mydevice_dev</span> *<span class="hljs-title">dev</span> =</span> file-&gt;private_data;<br>    <span class="hljs-type">int</span> ret;<br><br>    <span class="hljs-keyword">if</span> (size &gt;= <span class="hljs-keyword">sizeof</span>(dev-&gt;kbuf)) &#123;<br>        printk(KERN_WARNING <span class="hljs-string">&quot;mydevice: write size is too large\n&quot;</span>);<br>        <span class="hljs-comment">// 截断写入的数据，防止缓冲区溢出</span><br>        size = <span class="hljs-keyword">sizeof</span>(dev-&gt;kbuf) - <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 将用户空间的数据 (buf) 拷贝到内核空间 (dev-&gt;kbuf)</span><br>    ret = copy_from_user(dev-&gt;kbuf, buf, size);<br>    <span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;mydevice: copy_from_user failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> -EFAULT;<br>    &#125;<br><br>    <span class="hljs-comment">// 给内核缓冲区加上字符串结束符</span><br>    dev-&gt;kbuf[size] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;mydevice: written data: %s\n&quot;</span>, dev-&gt;kbuf);<br>    <br>    <span class="hljs-comment">// 在一个真实的GPIO驱动中，这里会解析 kbuf 中的命令（如&quot;on&quot;或&quot;off&quot;）</span><br>    <span class="hljs-comment">// 然后通过 dev-&gt;vir_gpio_dr 指针向硬件寄存器写入值</span><br>    <span class="hljs-comment">// 例如：iowrite32(1, dev-&gt;vir_gpio_dr);</span><br><br>    <span class="hljs-keyword">return</span> size; <span class="hljs-comment">// 返回成功写入的字节数</span><br>&#125;<br><br><span class="hljs-comment">// 定义 file_operations 结构体，并将我们的函数与之关联</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> <span class="hljs-title">mydevice_fops</span> =</span> &#123;<br>    .owner   = THIS_MODULE,<br>    .open    = mydevice_open,<br>    .release = mydevice_release,<br>    .read    = mydevice_read,<br>    .write   = mydevice_write,<br>&#125;;<br><br><br><span class="hljs-comment">// --- Platform 驱动核心函数 ---</span><br><br><span class="hljs-comment">// 当内核匹配到同名的 platform_device 时，会调用此 probe 函数</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mydriver_probe</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> platform_device *pdev)</span><br>&#123;<br>    <span class="hljs-type">int</span> ret;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">resource</span> *<span class="hljs-title">mem_res</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mydevice_dev</span> *<span class="hljs-title">dev</span>;</span><br><br>    printk(KERN_INFO <span class="hljs-string">&quot;mydriver_probe: device probed!\n&quot;</span>);<br><br>    <span class="hljs-comment">// 1. 分配私有数据结构体内存</span><br>    <span class="hljs-comment">// 使用 devm_kzalloc, &quot;devm_&quot; 开头的函数是受设备管理的，当设备卸载时会自动释放资源，非常方便</span><br>    dev = devm_kzalloc(&amp;pdev-&gt;dev, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> mydevice_dev), GFP_KERNEL);<br>    <span class="hljs-keyword">if</span> (!dev) &#123;<br>        <span class="hljs-keyword">return</span> -ENOMEM;<br>    &#125;<br>    global_mydev = dev; <span class="hljs-comment">// 赋值给全局指针（仅为示例）</span><br><br>    <span class="hljs-comment">// 2. 从 platform_device 获取资源 (这里以内存资源为例)</span><br>    <span class="hljs-comment">// 参数: platform_device指针, 资源类型, 索引(第0个内存资源)</span><br>    mem_res = platform_get_resource(pdev, IORESOURCE_MEM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (!mem_res) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;mydriver: failed to get memory resource\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> -EINVAL;<br>    &#125;<br>    printk(KERN_INFO <span class="hljs-string">&quot;mydriver: mem resource start: 0x%pa, size: %lld\n&quot;</span>, &amp;mem_res-&gt;start, resource_size(mem_res));<br>    <br>    <span class="hljs-comment">// 3. 将物理地址映射到内核虚拟地址空间</span><br>    <span class="hljs-comment">// devm_ioremap_resource 会自动处理 ioremap 和 iounmap，非常推荐使用</span><br>    dev-&gt;vir_gpio_dr = devm_ioremap_resource(&amp;pdev-&gt;dev, mem_res);<br>    <span class="hljs-keyword">if</span> (IS_ERR(dev-&gt;vir_gpio_dr)) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;mydriver: failed to ioremap memory resource\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> PTR_ERR(dev-&gt;vir_gpio_dr);<br>    &#125;<br>    <br>    <span class="hljs-comment">// ======== 以下是字符设备创建的标准流程 (来自你的截图逻辑) ========</span><br><br>    <span class="hljs-comment">// 4. 动态申请设备号</span><br>    ret = alloc_chrdev_region(&amp;dev-&gt;dev_num, <span class="hljs-number">0</span>, DEVICE_COUNT, DRIVER_NAME);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;mydriver: failed to allocate chrdev region\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    printk(KERN_INFO <span class="hljs-string">&quot;mydriver: allocated major=%d, minor=%d\n&quot;</span>, MAJOR(dev-&gt;dev_num), MINOR(dev-&gt;dev_num));<br><br>    <span class="hljs-comment">// 5. 初始化 cdev 结构体，并绑定 file_operations</span><br>    cdev_init(&amp;dev-&gt;cdev_test, &amp;mydevice_fops);<br>    dev-&gt;cdev_test.owner = THIS_MODULE;<br><br>    <span class="hljs-comment">// 6. 将 cdev 添加到内核中</span><br>    ret = cdev_add(&amp;dev-&gt;cdev_test, dev-&gt;dev_num, DEVICE_COUNT);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;mydriver: failed to add cdev\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> err_unregister_chrdev;<br>    &#125;<br><br>    <span class="hljs-comment">// 7. 创建设备类 /sys/class/my_platform_device</span><br>    dev-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span> =</span> class_create(THIS_MODULE, DRIVER_NAME);<br>    <span class="hljs-keyword">if</span> (IS_ERR(dev-&gt;class)) &#123;<br>        ret = PTR_ERR(dev-&gt;class);<br>        printk(KERN_ERR <span class="hljs-string">&quot;mydriver: failed to create class\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> err_cdev_del;<br>    &#125;<br><br>    <span class="hljs-comment">// 8. 创建设备文件 /dev/my_platform_device</span><br>    dev-&gt;device = device_create(dev-&gt;class, <span class="hljs-literal">NULL</span>, dev-&gt;dev_num, <span class="hljs-literal">NULL</span>, DRIVER_NAME);<br>    <span class="hljs-keyword">if</span> (IS_ERR(dev-&gt;device)) &#123;<br>        ret = PTR_ERR(dev-&gt;device);<br>        printk(KERN_ERR <span class="hljs-string">&quot;mydriver: failed to create device\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> err_class_destroy;<br>    &#125;<br><br>    <span class="hljs-comment">// 9. 将私有数据结构体指针与 platform_device 关联</span><br>    <span class="hljs-comment">// 这样在 remove 函数中就可以通过 platform_get_drvdata 获取它</span><br>    platform_set_drvdata(pdev, dev);<br><br>    <span class="hljs-comment">// 初始化内核缓冲区</span><br>    <span class="hljs-built_in">strcpy</span>(dev-&gt;kbuf, <span class="hljs-string">&quot;Hello from kernel!&quot;</span>);<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;mydriver: probe successful, device created at /dev/%s\n&quot;</span>, DRIVER_NAME);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 错误处理：按相反的顺序释放已申请的资源</span><br>err_class_destroy:<br>    class_destroy(dev-&gt;class);<br>err_cdev_del:<br>    cdev_del(&amp;dev-&gt;cdev_test);<br>err_unregister_chrdev:<br>    unregister_chrdev_region(dev-&gt;dev_num, DEVICE_COUNT);<br>    <span class="hljs-comment">// devm_kzalloc 和 devm_ioremap_resource 分配的资源会自动释放，无需手动处理</span><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">// 当驱动被卸载或设备被移除时，调用此 remove 函数</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mydriver_remove</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> platform_device *pdev)</span><br>&#123;<br>    <span class="hljs-comment">// 通过 platform_get_drvdata 获取在 probe 中设置的私有数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mydevice_dev</span> *<span class="hljs-title">dev</span> =</span> platform_get_drvdata(pdev);<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;mydriver_remove: removing device\n&quot;</span>);<br><br>    <span class="hljs-comment">// 按照与 probe 相反的顺序销毁和释放资源</span><br>    <span class="hljs-comment">// 注意：devm_ 家族函数管理的资源（内存、ioremap）不需要在这里手动释放！</span><br>    <span class="hljs-comment">// 驱动核心会在这个函数返回后自动清理它们。</span><br><br>    <span class="hljs-comment">// 销毁设备文件 /dev/my_platform_device</span><br>    device_destroy(dev-&gt;class, dev-&gt;dev_num);<br>    <span class="hljs-comment">// 销毁设备类 /sys/class/my_platform_device</span><br>    class_destroy(dev-&gt;class);<br>    <span class="hljs-comment">// 从内核中删除 cdev</span><br>    cdev_del(&amp;dev-&gt;cdev_test);<br>    <span class="hljs-comment">// 注销设备号</span><br>    unregister_chrdev_region(dev-&gt;dev_num, DEVICE_COUNT);<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;mydriver_remove: remove successful\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// ID 表，用于匹配 platform_device</span><br><span class="hljs-comment">// 当一个 platform_device 的 .name 字段与这里的 .name 匹配时，probe 就会被调用</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">platform_device_id</span> <span class="hljs-title">mydriver_id_table</span>[] =</span> &#123;<br>    &#123; .name = <span class="hljs-string">&quot;my-platform-device-example&quot;</span> &#125;, <span class="hljs-comment">// 这个名字需要与 platform_device 注册时使用的名字完全一致</span><br>    &#123; <span class="hljs-comment">/* sentinel */</span> &#125;, <span class="hljs-comment">// 结尾的空条目，表示列表结束</span><br>&#125;;<br>MODULE_DEVICE_TABLE(platform, mydriver_id_table); <span class="hljs-comment">// 将id_table导出，让内核和用户空间知道</span><br><br><span class="hljs-comment">// 定义 platform_driver 结构体</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">platform_driver</span> <span class="hljs-title">my_platform_driver</span> =</span> &#123;<br>    .probe  = mydriver_probe,<br>    .remove = mydriver_remove,<br>    .driver = &#123;<br>        .name  = <span class="hljs-string">&quot;my-platform-device-example&quot;</span>, <span class="hljs-comment">// 驱动的名字</span><br>        .owner = THIS_MODULE,<br>    &#125;,<br>    .id_table = mydriver_id_table, <span class="hljs-comment">// 关联ID匹配表</span><br>&#125;;<br><br><span class="hljs-comment">// 模块加载函数</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">my_driver_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;my_driver_init: Registering platform driver\n&quot;</span>);<br>    <span class="hljs-comment">// 注册 platform_driver 到内核</span><br>    <span class="hljs-keyword">return</span> platform_driver_register(&amp;my_platform_driver);<br>&#125;<br><br><span class="hljs-comment">// 模块卸载函数</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">my_driver_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;my_driver_exit: Unregistering platform driver\n&quot;</span>);<br>    <span class="hljs-comment">// 从内核中注销 platform_driver</span><br>    platform_driver_unregister(&amp;my_platform_driver);<br>&#125;<br><br><span class="hljs-comment">// 注册模块加载和卸载函数</span><br>module_init(my_driver_init);<br>module_exit(my_driver_exit);<br><br><span class="hljs-comment">// 模块许可和信息</span><br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;Your Name&quot;</span>);<br>MODULE_DESCRIPTION(<span class="hljs-string">&quot;A complete platform device driver example&quot;</span>);<br>MODULE_VERSION(<span class="hljs-string">&quot;1.0&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="平台总线和设备驱动"><a href="#平台总线和设备驱动" class="headerlink" title="平台总线和设备驱动"></a>平台总线和设备驱动</h3><ol><li><p><strong>启动与准备 (第 0 步):</strong></p><ul><li>内核启动，解析设备树。</li><li>它看到一个描述 I2C 控制器的节点，于是创建了一个 <code>platform_device</code>。</li><li>它看到 I2C 控制器节点下还有一个描述温度传感器的子节点，于是为它创建了一个 <code>i2c_client</code> 的描述信息（但此时还未注册，因为 I2C 总线还不存在）。</li></ul></li><li><p><strong>第一层匹配 (平台总线):</strong></p><ul><li>你加载了 <strong>I2C 控制器驱动</strong> (<code>platform_driver</code>)。</li><li><strong>平台总线</strong>发现这个驱动和之前创建的 <code>platform_device</code> 匹配。</li><li>平台总线调用 <strong>I2C 控制器驱动</strong> 的 <code>.probe()</code> 函数。</li></ul></li><li><p><strong>桥梁搭建 (控制器驱动的工作):</strong></p><ul><li>在 <strong>I2C 控制器驱动</strong> 的 <code>.probe()</code> 函数中，驱动初始化了硬件，然后调用 <code>i2c_add_adapter()</code>。</li><li><strong>这个调用是关键！</strong> 它在内核里创建并注册了一条功能完备的 <strong>I2C 总线</strong>。</li></ul></li><li><p><strong>第二层匹配 (I2C 总线):</strong></p><ul><li>新的 I2C 总线被注册后，内核的 I2C 核心会把之前为温度传感器准备的 <code>i2c_client</code> 描述信息，正式注册到这条新的 I2C 总线上。</li><li>现在，你加载了<strong>温度传感器驱动</strong> (<code>i2c_driver</code>)。</li><li><strong>I2C 总线</strong>发现这个驱动和刚刚注册的 <code>i2c_client</code> 匹配。</li><li>I2C 总线调用<strong>温度传感器驱动</strong>的 <code>.probe()</code> 函数。</li></ul></li><li><p><strong>最终通信 (设备驱动的工作):</strong></p><ul><li>在<strong>温度传感器驱动</strong>的 <code>.probe()</code> 或其他函数里，它想读取温度。</li><li>它调用一个标准的、与硬件无关的函数 <code>i2c_master_recv()</code>。</li><li>I2C 核心收到调用，查找该设备挂在哪条 I2C 总线上。</li><li>它找到了由<strong>I2C 控制器驱动</strong>注册的那条总线，然后调用了<strong>该控制器驱动</strong>提供的底层传输函数。</li><li><strong>I2C 控制器驱动</strong>的代码开始执行，通过操作寄存器来命令<strong>物理 I2C 控制器</strong>去和<strong>物理温度传感器</strong>通信，并取回数据。</li></ul></li></ol><h3 id="总结：关系一览"><a href="#总结：关系一览" class="headerlink" title="总结：关系一览"></a><strong>总结：关系一览</strong></h3><table><thead><tr><th align="left">角色</th><th align="left">所在的“层”</th><th align="left">它的“驱动”是？</th><th align="left">它的“设备描述”是？</th><th align="left">它和下一层的关系</th></tr></thead><tbody><tr><td align="left"><strong>I2C 控制器</strong></td><td align="left"><strong>平台总线层</strong></td><td align="left"><code>platform_driver</code></td><td align="left"><code>platform_device</code></td><td align="left">它的驱动<strong>创建</strong>了 I2C 总线层</td></tr><tr><td align="left"><strong>I2C 终端设备</strong></td><td align="left"><strong>I2C 总线层</strong></td><td align="left"><code>i2c_driver</code></td><td align="left"><code>i2c_client</code></td><td align="left">它的驱动<strong>使用</strong> I2C 总线层提供的服务</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="https://GoKo-Son626.github.io/categories/dirver/">dirver</category>
      
      
      <category domain="https://GoKo-Son626.github.io/tags/kernel/">kernel</category>
      
      <category domain="https://GoKo-Son626.github.io/tags/driver/">driver</category>
      
      
      <comments>https://goko-son626.github.io/post/Platform-bus.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Basic of linux drivers</title>
      <link>https://goko-son626.github.io/post/linux-kernel-drivers.html</link>
      <guid>https://goko-son626.github.io/post/linux-kernel-drivers.html</guid>
      <pubDate>Mon, 05 Aug 2024 16:32:56 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;linux驱动相关基础知识&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>linux驱动相关基础知识</strong></em></li></ul><span id="more"></span><h3 id="模块编写"><a href="#模块编写" class="headerlink" title="模块编写"></a>模块编写</h3><ul><li><p>驱动模块传参</p><ul><li>module_param(name, type, perm) 宏来定义一个参数。</li><li>name: 参数变量名。</li><li>type: 参数类型 (int, charp (字符串指针), bool 等)。</li><li>perm: 在 sysfs 中对应的文件权限 (&#x2F;sys&#x2F;module&#x2F;<module_name>&#x2F;parameters&#x2F;<param_name>)。0644 表示 root 可写，所有人可读。</param_name></module_name></li></ul></li><li><p>内核模块符号的导出</p><ul><li>EXPORT_SYMBOL(symbol_name): 导出符号，任何模块都可以使用。</li><li>EXPORT_SYMBOL_GPL(symbol_name): 只为 MODULE_LICENSE(“GPL”) 的模块导出，有许可证限制。</li></ul></li><li><p>自动创建设备节点</p><ul><li><p>创建设备类 (class)<br>my_class &#x3D; class_create(THIS_MODULE, “my_class_name”);<br>if (IS_ERR(my_class)) { &#x2F;* handle error *&#x2F; }</p><p>&#x2F;&#x2F; 在此类下创建设备文件<br>&#x2F;&#x2F; 这会触发 uevent，让 udev&#x2F;mdev 工作<br>device_create(my_class, NULL, dev_num, NULL, “my_device_name”);</p></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://GoKo-Son626.github.io/categories/kernel/">kernel</category>
      
      <category domain="https://GoKo-Son626.github.io/categories/kernel/driver/">driver</category>
      
      
      <category domain="https://GoKo-Son626.github.io/tags/driver/">driver</category>
      
      <category domain="https://GoKo-Son626.github.io/tags/linux/">linux</category>
      
      
      <comments>https://goko-son626.github.io/post/linux-kernel-drivers.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>the Three Basic Linux Driver Models</title>
      <link>https://goko-son626.github.io/post/the-Three-Basic-Linux-Driver-Models.html</link>
      <guid>https://goko-son626.github.io/post/the-Three-Basic-Linux-Driver-Models.html</guid>
      <pubDate>Fri, 05 Jul 2024 08:48:55 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;按照读写存储数据方式，我们可以把设备分为以下几种：字符设备、块设备和网络设备。而Linux三大驱动就是指对这些设备的驱动，即字符设备、块设备驱动和网络设备驱动。&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>按照读写存储数据方式，我们可以把设备分为以下几种：字符设备、块设备和网络设备。而Linux三大驱动就是指对这些设备的驱动，即字符设备、块设备驱动和网络设备驱动。</strong></em></li></ul><span id="more"></span><h3 id="1-字符设备-Character-Devices"><a href="#1-字符设备-Character-Devices" class="headerlink" title="1. 字符设备 (Character Devices)"></a>1. 字符设备 (Character Devices)</h3><ul><li><strong>字符设备是一种按字节流（character stream）进行访问的设备，不可寻址，没有缓冲。你请求 5 个字节，它就给你 5 个字节（如果设备里有的话）。它不支持随机访问，数据只能顺序读写。</strong></li></ul><ul><li><p><strong>原理</strong></p><ul><li><strong>核心：</strong> <code>file_operations</code> 结构体。里面定义了当用户空间程序对设备文件调用 <code>open()</code>, <code>read()</code>, <code>write()</code>, <code>ioctl()</code> 等系统调用时，内核应该执行的对应驱动函数。</li><li><strong>VFS (虚拟文件系统)：</strong> 当 <code>open(&quot;/dev/mydevice&quot;, ...)</code> 时，VFS 会根据路径找到对应的 inode（索引节点），inode 中包含了设备号（主设备号和次设备号）。</li><li><strong>驱动注册：</strong> 驱动在加载时，会通过 <code>register_chrdev()</code> 或 <code>alloc_chrdev_region()</code> + <code>cdev_add()</code> 来告诉内核能处理主设备号为 X 的设备，操作函数菜单是<code>file_operations</code> 结构体。</li><li><strong>连接：</strong> VFS 通过主设备号找到驱动和 <code>file_operations</code>，然后调用实现的 <code>my_open()</code>, <code>my_read()</code> 等函数，从而将用户空间的操作连接到了驱动代码上。</li></ul></li><li><p><strong>典型例子：</strong> </p><ul><li>串口 (<code>/dev/ttyS*</code>)、控制台 (<code>/dev/console</code>)、鼠标 (<code>/dev/input/mouse0</code>)、键盘 <code>(/dev/input/event*)</code>。</li><li>I2C&#x2F;SPI 设备： 虽然挂在特定总线上，但最终给用户提供的接口往往是字符设备，如一个 I2C 接口的温湿度传感器，可能会表现为 <code>/dev/i2c-1</code> 或通过 <code>sysfs</code> 访问。</li><li>裸设备驱动： 各种自定义的、简单的控制类设备</li></ul></li><li><p><strong>代码示例</strong></p><ul><li><a href="#%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87">CLICK</a></li></ul></li></ul><hr><h3 id="2-块设备-Block-Devices"><a href="#2-块设备-Block-Devices" class="headerlink" title="2. 块设备 (Block Devices)"></a>2. 块设备 (Block Devices)</h3><ul><li>块设备是按“块”（Block）为单位进行数据访问的设备，块是固定大小的（如 512 字节、4KB）。与字符设备最大的不同是： <strong>支持随机寻址</strong>它可以随机访问（直接读写第 N 个块），并且 <strong>有内核I&#x2F;O缓冲区</strong>。</li></ul><ul><li><p><strong>原理</strong></p><ul><li><strong>核心：</strong> <code>block_device_operations</code> 结构体和 <strong>请求队列 (Request Queue)</strong>。</li><li><strong>I&#x2F;O 调度器：</strong> 当用户程序请求读写数据时，请求不会立即发送给硬件。而是被分解成一个个对“块”的操作请求（<code>struct request</code>），放入一个请求队列中。内核的 <strong>I&#x2F;O 调度器</strong> 会对队列里的请求进行合并、排序，以提高磁盘寻道效率（比如把对相邻块的请求放在一起处理）。</li><li><strong>缓冲&#x2F;缓存 (Buffer Cache)：</strong> 内核会把频繁访问的块设备数据缓存在内存中（Page Cache&#x2F;Buffer Cache）。当用户请求读取数据时，如果缓存里有，就直接从内存返回，速度极快，根本不需要访问物理设备。写操作也可能先写入缓存，稍后再“刷”到磁盘上。</li><li><strong>驱动的角色：</strong> 块设备驱动的主要工作不是直接处理 <code>read/write</code>，而是从请求队列中取出已经由 I&#x2F;O 调度器优化好的 <code>request</code>，然后根据 <code>request</code> 里的信息（起始块号、块数量、方向），操作硬件来完成真正的数据传输。</li><li><strong>使用：</strong> 通常不直接用 <code>read/write</code> 对 <code>/dev/sda</code> 这样的裸设备进行操作（虽然也可以）。但更常见的用法是：在块设备上创建文件系统（<code>mkfs.ext4 /dev/sda1</code>），然后 <code>mount</code> 到一个目录上。之后，用户和程序就通过文件系统来访问，享受到了文件系统和块设备层共同带来的高效和便利。</li></ul></li><li><p><strong>典型例子：</strong> 硬盘 (HDD&#x2F;SSD)(<code>/dev/sda</code>)、U盘 (<code>/dev/sdb</code>)、SD卡 (<code>/dev/mmcblk0</code>)、RAM disk（内存模拟的块设备）、Flash 存储 (通过 MTD): NAND&#x2F;NOR Flash 在 MTD 层之上也可以表现为块设备。</p></li><li><p><strong>代码示例</strong></p><ul><li><a href="#%E5%9D%97%E8%AE%BE%E5%A4%87">CLICK</a></li></ul></li></ul><hr><h3 id="3-网络设备-Network-Devices"><a href="#3-网络设备-Network-Devices" class="headerlink" title="3. 网络设备 (Network Devices)"></a>3. 网络设备 (Network Devices)</h3><ul><li>网络设备是用于收发数据包（Packet）的设备。它和其他两类设备有本质区别，<strong>它不对应 <code>/dev</code> 目录下的文件节点</strong>。而是通过单独的网络接口来代表。</li></ul><ul><li><p><strong>原理</strong></p><ul><li><strong>核心：</strong> <code>net_device_ops</code> 结构体和 <strong><code>sk_buff</code> (Socket Buffer)</strong>。<ul><li><strong>接口而非文件：</strong> 网络设备在内核中被抽象成一个接口（Interface），如 <code>eth0</code>, <code>wlan0</code>。用户空间程序通过 <strong>Socket API</strong>（<code>socket()</code>, <code>bind()</code>, <code>sendto()</code>, <code>recvfrom()</code>）等内核协议栈来与内核的 TCP&#x2F;IP 协议栈交互，而不是操作设备文件。</li><li><strong>数据流：</strong><ul><li><strong>发送：</strong> 用户数据通过 Socket API 进入内核协议栈，被层层打包（加上 TCP&#x2F;UDP 头、IP 头等），最终形成一个 <code>sk_buff</code> 结构体。这个 <code>sk_buff</code> 被交给网络设备驱动。驱动的 <code>ndo_start_xmit</code> 函数（定义在 <code>net_device_ops</code> 中）负责将 <code>sk_buff</code> 里的数据包通过物理网卡发送出去。</li><li><strong>接收：</strong> 网卡收到一个数据包，产生硬件中断。驱动的中断处理程序把数据从硬件接收到内存，封装成一个新的 <code>sk_buff</code>，然后把它交给内核网络协议栈。协议栈逐层解包，最后通过 Socket 将数据送达正确的应用程序。</li></ul></li><li><strong>驱动的角色：</strong> 网络设备驱动是硬件和内核协议栈之间的“搬运工”，主要负责：初始化网卡、启动&#x2F;停止数据收发、在 <code>sk_buff</code> 和硬件之间传递数据包。</li></ul></li></ul></li><li><p><strong>典型例子：</strong> 有线网卡 (<code>eth0</code>, <code>enp3s0</code>)、无线网卡 (<code>wlan0</code>)虚拟网络接口、 CAN总线设备、 USB网络适配器。</p></li><li><p><strong>代码示例</strong></p><ul><li><a href="#%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87">CLICK</a></li></ul></li></ul><hr><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><table><thead><tr><th align="left">特性</th><th align="left">字符设备 (Char)</th><th align="left">块设备 (Block)</th><th align="left">网络设备 (Net)</th><th align="left">平台驱动 (Platform)</th></tr></thead><tbody><tr><td align="left"><strong>数据单位</strong></td><td align="left">字节流 (Stream)</td><td align="left">数据块 (Block)</td><td align="left">数据包 (Packet)</td><td align="left">不直接处理数据流</td></tr><tr><td align="left"><strong>访问方式</strong></td><td align="left">顺序访问</td><td align="left">随机访问</td><td align="left">Socket API</td><td align="left">N&#x2F;A</td></tr><tr><td align="left"><strong>I&#x2F;O 缓冲</strong></td><td align="left">无 (或很简单)</td><td align="left">有内核缓冲&#x2F;缓存和I&#x2F;O调度</td><td align="left">有 Socket 缓冲</td><td align="left">N&#x2F;A</td></tr><tr><td align="left"><strong>用户接口</strong></td><td align="left"><code>/dev</code> 文件节点</td><td align="left"><code>/dev</code> 文件节点, 文件系统</td><td align="left">Socket 接口, <code>ifconfig</code></td><td align="left">通常是为其他驱动提供服务</td></tr><tr><td align="left"><strong>核心结构体</strong></td><td align="left"><code>file_operations</code></td><td align="left"><code>block_device_operations</code></td><td align="left"><code>net_device_ops</code></td><td align="left"><code>platform_driver</code></td></tr><tr><td align="left"><strong>核心机制</strong></td><td align="left">VFS 文件操作映射</td><td align="left">请求队列和I&#x2F;O调度</td><td align="left">协议栈和<code>sk_buff</code></td><td align="left">设备与驱动的分离、匹配、探测</td></tr><tr><td align="left"><strong>主要用途</strong></td><td align="left">简单、串行 I&#x2F;O 设备</td><td align="left">存储设备</td><td align="left">网络通信</td><td align="left">SoC 内部集成外设的管理框架</td></tr></tbody></table><h4 id="字符设备代码示例"><a href="#字符设备代码示例" class="headerlink" title="字符设备代码示例"></a>字符设备代码示例</h4><p><a id="字符设备"></a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/fs.h&gt;</span>       <span class="hljs-comment">// 包含 file_operations 结构体</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/cdev.h&gt;</span>     <span class="hljs-comment">// 包含 cdev 结构体和相关函数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/device.h&gt;</span>   <span class="hljs-comment">// 包含 class_create 和 device_create</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/uaccess.h&gt;</span>  <span class="hljs-comment">// 包含 copy_to_user 和 copy_from_user</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/slab.h&gt;</span>     <span class="hljs-comment">// 包含 kmalloc 和 kfree</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEVICE_NAME <span class="hljs-string">&quot;mymem_char&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CLASS_NAME  <span class="hljs-string">&quot;mymem_class&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_BUFFER_SIZE 1024</span><br><br><span class="hljs-comment">// --- 驱动核心数据结构 ---</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> major_number;                <span class="hljs-comment">// 主设备号</span><br><span class="hljs-type">static</span> <span class="hljs-type">char</span> *kernel_buffer;             <span class="hljs-comment">// 内核数据缓冲区</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-keyword">class</span>* <span class="hljs-title">my_class</span> =</span> <span class="hljs-literal">NULL</span>;   <span class="hljs-comment">// 设备类</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cdev</span> <span class="hljs-title">my_cdev</span>;</span>             <span class="hljs-comment">// 字符设备结构</span><br><br><span class="hljs-comment">// --- file_operations 函数实现 ---</span><br><br><span class="hljs-comment">// open 函数：当设备文件被打开时调用</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">my_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *file)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;MyCharDev: Device opened.\n&quot;</span>);<br>    <span class="hljs-comment">// 通常可以在这里为每个打开实例分配私有数据</span><br>    <span class="hljs-comment">// file-&gt;private_data = ...</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// release 函数：当设备文件被关闭时调用</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">my_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *file)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;MyCharDev: Device closed.\n&quot;</span>);<br>    <span class="hljs-comment">// 清理 open 时分配的私有数据</span><br>    <span class="hljs-comment">// kfree(file-&gt;private_data);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// read 函数：从设备读取数据</span><br><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">my_read</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">char</span> __user *user_buf, <span class="hljs-type">size_t</span> len, <span class="hljs-type">loff_t</span> *offset)</span><br>&#123;<br>    <span class="hljs-type">int</span> bytes_to_read;<br><br>    <span class="hljs-comment">// 检查读取长度是否有效</span><br>    <span class="hljs-keyword">if</span> (*offset &gt;= MAX_BUFFER_SIZE)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// End of file</span><br>    <span class="hljs-keyword">if</span> (*offset + len &gt; MAX_BUFFER_SIZE)<br>        len = MAX_BUFFER_SIZE - *offset;<br><br>    bytes_to_read = len;<br>    <br>    <span class="hljs-comment">// 使用 copy_to_user 将内核数据拷贝到用户空间</span><br>    <span class="hljs-keyword">if</span> (copy_to_user(user_buf, kernel_buffer + *offset, bytes_to_read) != <span class="hljs-number">0</span>) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;MyCharDev: Failed to copy data to user.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> -EFAULT;<br>    &#125;<br><br>    *offset += bytes_to_read; <span class="hljs-comment">// 更新文件偏移</span><br>    printk(KERN_INFO <span class="hljs-string">&quot;MyCharDev: Read %d bytes.\n&quot;</span>, bytes_to_read);<br>    <span class="hljs-keyword">return</span> bytes_to_read;<br>&#125;<br><br><span class="hljs-comment">// write 函数：向设备写入数据</span><br><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">my_write</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *user_buf, <span class="hljs-type">size_t</span> len, <span class="hljs-type">loff_t</span> *offset)</span><br>&#123;<br>    <span class="hljs-type">int</span> bytes_to_write;<br><br>    <span class="hljs-comment">// 检查写入位置是否有效</span><br>    <span class="hljs-keyword">if</span> (*offset &gt;= MAX_BUFFER_SIZE) &#123;<br>        printk(KERN_WARNING <span class="hljs-string">&quot;MyCharDev: No space left on device.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> -ENOSPC; <span class="hljs-comment">// No space left on device</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (*offset + len &gt; MAX_BUFFER_SIZE)<br>        len = MAX_BUFFER_SIZE - *offset;<br><br>    bytes_to_write = len;<br><br>    <span class="hljs-comment">// 使用 copy_from_user 将用户数据拷贝到内核空间</span><br>    <span class="hljs-keyword">if</span> (copy_from_user(kernel_buffer + *offset, user_buf, bytes_to_write) != <span class="hljs-number">0</span>) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;MyCharDev: Failed to copy data from user.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> -EFAULT;<br>    &#125;<br><br>    *offset += bytes_to_write; <span class="hljs-comment">// 更新文件偏移</span><br>    printk(KERN_INFO <span class="hljs-string">&quot;MyCharDev: Wrote %d bytes.\n&quot;</span>, bytes_to_write);<br>    <span class="hljs-keyword">return</span> bytes_to_write;<br>&#125;<br><br><span class="hljs-comment">// --- file_operations 结构体定义 ---</span><br><span class="hljs-comment">// 将实现的函数与标准文件操作关联起来</span><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> <span class="hljs-title">fops</span> =</span> &#123;<br>    .owner   = THIS_MODULE,<br>    .open    = my_open,<br>    .release = my_release,<br>    .read    = my_read,<br>    .write   = my_write,<br>&#125;;<br><br><span class="hljs-comment">// --- 模块初始化函数 ---</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">memchar_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">dev_t</span> dev_num;<br><br>    <span class="hljs-comment">// 1. 分配内核缓冲区</span><br>    kernel_buffer = kmalloc(MAX_BUFFER_SIZE, GFP_KERNEL);<br>    <span class="hljs-keyword">if</span> (!kernel_buffer) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;MyCharDev: Failed to allocate kernel buffer.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> -ENOMEM;<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 动态分配主设备号</span><br>    <span class="hljs-keyword">if</span> (alloc_chrdev_region(&amp;dev_num, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, DEVICE_NAME) &lt; <span class="hljs-number">0</span>) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;MyCharDev: Failed to allocate major number.\n&quot;</span>);<br>        kfree(kernel_buffer);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    major_number = MAJOR(dev_num);<br>    printk(KERN_INFO <span class="hljs-string">&quot;MyCharDev: Major number allocated: %d\n&quot;</span>, major_number);<br><br>    <span class="hljs-comment">// 3. 初始化 cdev 结构体，并与 file_operations 关联</span><br>    cdev_init(&amp;my_cdev, &amp;fops);<br>    my_cdev.owner = THIS_MODULE;<br><br>    <span class="hljs-comment">// 4. 将 cdev 添加到内核</span><br>    <span class="hljs-keyword">if</span> (cdev_add(&amp;my_cdev, dev_num, <span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;MyCharDev: Failed to add cdev to the kernel.\n&quot;</span>);<br>        unregister_chrdev_region(dev_num, <span class="hljs-number">1</span>);<br>        kfree(kernel_buffer);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 5. 创建设备类</span><br>    my_class = class_create(THIS_MODULE, CLASS_NAME);<br>    <span class="hljs-keyword">if</span> (IS_ERR(my_class)) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;MyCharDev: Failed to create device class.\n&quot;</span>);<br>        cdev_del(&amp;my_cdev);<br>        unregister_chrdev_region(dev_num, <span class="hljs-number">1</span>);<br>        kfree(kernel_buffer);<br>        <span class="hljs-keyword">return</span> PTR_ERR(my_class);<br>    &#125;<br><br>    <span class="hljs-comment">// 6. 创建设备文件 (/dev/mymem_char)</span><br>    <span class="hljs-keyword">if</span> (device_create(my_class, <span class="hljs-literal">NULL</span>, dev_num, <span class="hljs-literal">NULL</span>, DEVICE_NAME) == <span class="hljs-literal">NULL</span>) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;MyCharDev: Failed to create device file.\n&quot;</span>);<br>        class_destroy(my_class);<br>        cdev_del(&amp;my_cdev);<br>        unregister_chrdev_region(dev_num, <span class="hljs-number">1</span>);<br>        kfree(kernel_buffer);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;MyCharDev: Driver loaded successfully.\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// --- 模块卸载函数 ---</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">memchar_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">dev_t</span> dev_num = MKDEV(major_number, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 逆序清理资源</span><br>    device_destroy(my_class, dev_num);      <span class="hljs-comment">// 销毁设备文件</span><br>    class_destroy(my_class);                <span class="hljs-comment">// 销毁设备类</span><br>    cdev_del(&amp;my_cdev);                     <span class="hljs-comment">// 从内核移除 cdev</span><br>    unregister_chrdev_region(dev_num, <span class="hljs-number">1</span>);   <span class="hljs-comment">// 释放设备号</span><br>    kfree(kernel_buffer);                   <span class="hljs-comment">// 释放内核缓冲区</span><br><br>    printk(KERN_INFO <span class="hljs-string">&quot;MyCharDev: Driver unloaded.\n&quot;</span>);<br>&#125;<br><br>module_init(memchar_init);<br>module_exit(memchar_exit);<br><br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;Your Name&quot;</span>);<br>MODULE_DESCRIPTION(<span class="hljs-string">&quot;A simple character device driver for memory simulation.&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="块设备代码示例"><a href="#块设备代码示例" class="headerlink" title="块设备代码示例"></a>块设备代码示例</h4><p><a id="块设备"></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include &lt;linux/module.h&gt;</span><br><span class="hljs-comment">#include &lt;linux/kernel.h&gt;</span><br><span class="hljs-comment">#include &lt;linux/init.h&gt;</span><br><span class="hljs-comment">#include &lt;linux/genhd.h&gt;        // 包含 gendisk</span><br><span class="hljs-comment">#include &lt;linux/fs.h&gt;           // 包含 block_device_operations</span><br><span class="hljs-comment">#include &lt;linux/blkdev.h&gt;       // 包含请求队列相关函数</span><br><span class="hljs-comment">#include &lt;linux/vmalloc.h&gt;      // 使用 vmalloc 分配大块内存</span><br><br><span class="hljs-comment">#define DEVICE_NAME &quot;myram_block&quot;</span><br><span class="hljs-comment">#define SECTOR_SIZE 512</span><br><span class="hljs-comment">#define DEVICE_SECTORS 20480 // 10MB (20480 * 512 bytes)</span><br><br>// --- 驱动核心数据结构 ---<br>static int major_number;                // 主设备号<br>static u8 *device_data;                 // 模拟磁盘的内存区域<br>static struct gendisk *my_disk;         // gendisk 结构，代表一个独立的磁盘<br>static struct request_queue *my_queue;  // 请求队列<br>static spinlock_t lock;                 // 用于保护请求队列的自旋锁<br><br>// --- 请求处理函数 ---<br>// 这是块设备驱动的核心，处理来自I/O调度器的请求<br>static void my_request_fn(struct request_queue *q)<br>&#123;<br>    struct request *req;<br><br>    // 循环处理队列中的所有请求<br>    <span class="hljs-keyword">while</span> ((req = blk_fetch_request(q)) != NULL) &#123;<br>        // 检查请求是否合法（这里简化处理，只检查读写请求）<br>        <span class="hljs-keyword">if</span> (req == NULL || (rq_data_dir(req) != READ &amp;&amp; rq_data_dir(req) != WRITE)) &#123;<br>            printk(KERN_NOTICE <span class="hljs-string">&quot;MyRamBlock: Skipping non-RW request\n&quot;</span>);<br>            __blk_end_request_all(req, -EIO);<br>            <span class="hljs-built_in">continue</span>;<br>        &#125;<br><br>        // 计算物理地址和大小<br>        // blk_rq_pos(req) 返回起始扇区号<br>        // blk_rq_cur_bytes(req) 返回请求的总字节数<br>        unsigned long offset = blk_rq_pos(req) * SECTOR_SIZE;<br>        unsigned long num_bytes = blk_rq_cur_bytes(req);<br><br>        // 模拟数据传输<br>        <span class="hljs-keyword">if</span> (rq_data_dir(req) == WRITE) &#123;<br>            // bio_for_each_segment 遍历请求中的所有段 (segment)<br>            // 将请求缓冲区中的数据拷贝到我们的模拟磁盘内存<br>            memcpy(device_data + offset, bio_data(req-&gt;bio), num_bytes);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            // 将模拟磁盘内存中的数据拷贝到请求缓冲区<br>            memcpy(bio_data(req-&gt;bio), device_data + offset, num_bytes);<br>        &#125;<br><br>        // 标记请求完成<br>        __blk_end_request_all(req, 0); // 0 表示成功<br>    &#125;<br>&#125;<br><br>// --- block_device_operations ---<br>// 对于简单的驱动，这个结构体可以为空<br>static struct block_device_operations my_bops = &#123;<br>    .owner = THIS_MODULE,<br>&#125;;<br><br>// --- 模块初始化函数 ---<br>static int __init ramblock_init(void)<br>&#123;<br>    // 1. 分配模拟磁盘的内存<br>    device_data = vmalloc(DEVICE_SECTORS * SECTOR_SIZE);<br>    <span class="hljs-keyword">if</span> (!device_data) &#123;<br>        <span class="hljs-built_in">return</span> -ENOMEM;<br>    &#125;<br><br>    // 2. 注册块设备，获取主设备号<br>    major_number = register_blkdev(0, DEVICE_NAME);<br>    <span class="hljs-keyword">if</span> (major_number &lt; 0) &#123;<br>        vfree(device_data);<br>        <span class="hljs-built_in">return</span> major_number;<br>    &#125;<br><br>    // 3. 初始化自旋锁和请求队列<br>    spin_lock_init(&amp;lock);<br>    my_queue = blk_init_queue(my_request_fn, &amp;lock);<br>    <span class="hljs-keyword">if</span> (!my_queue) &#123;<br>        unregister_blkdev(major_number, DEVICE_NAME);<br>        vfree(device_data);<br>        <span class="hljs-built_in">return</span> -ENOMEM;<br>    &#125;<br><br>    // 4. 分配和初始化 gendisk 结构<br>    my_disk = alloc_disk(1); // 1个次设备 (分区)<br>    <span class="hljs-keyword">if</span> (!my_disk) &#123;<br>        blk_cleanup_queue(my_queue);<br>        unregister_blkdev(major_number, DEVICE_NAME);<br>        vfree(device_data);<br>        <span class="hljs-built_in">return</span> -ENOMEM;<br>    &#125;<br><br>    // 5. 填充 gendisk 信息<br>    my_disk-&gt;major = major_number;<br>    my_disk-&gt;first_minor = 0;<br>    my_disk-&gt;fops = &amp;my_bops;<br>    my_disk-&gt;queue = my_queue;<br>    snprintf(my_disk-&gt;disk_name, 32, DEVICE_NAME);<br>    set_capacity(my_disk, DEVICE_SECTORS); // 设置磁盘容量（以扇区为单位）<br><br>    // 6. 将 gendisk 添加到系统，使其可见<br>    add_disk(my_disk);<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;MyRamBlock: Driver loaded. Major: %d\n&quot;</span>, major_number);<br>    <span class="hljs-built_in">return</span> 0;<br>&#125;<br><br>// --- 模块卸载函数 ---<br>static void __exit ramblock_exit(void)<br>&#123;<br>    del_gendisk(my_disk);           // 从系统移除 gendisk<br>    put_disk(my_disk);              // 释放 gendisk 引用<br>    blk_cleanup_queue(my_queue);    // 清理请求队列<br>    unregister_blkdev(major_number, DEVICE_NAME); // 注销块设备<br>    vfree(device_data);             // 释放内存<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;MyRamBlock: Driver unloaded.\n&quot;</span>);<br>&#125;<br><br>module_init(ramblock_init);<br>module_exit(ramblock_exit);<br><br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;Your Name&quot;</span>);<br>MODULE_DESCRIPTION(<span class="hljs-string">&quot;A simple RAM-based block device driver.&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="网络设备代码示例"><a href="#网络设备代码示例" class="headerlink" title="网络设备代码示例"></a>网络设备代码示例</h4><p><a id="网络设备"></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#include &lt;linux/module.h&gt;</span><br><span class="hljs-comment">#include &lt;linux/kernel.h&gt;</span><br><span class="hljs-comment">#include &lt;linux/init.h&gt;</span><br><span class="hljs-comment">#include &lt;linux/netdevice.h&gt;    // 包含 net_device 和相关函数</span><br><span class="hljs-comment">#include &lt;linux/etherdevice.h&gt;  // 包含 alloc_etherdev</span><br><br><span class="hljs-comment">#define DEVICE_NAME &quot;mynet&quot;</span><br><br>// --- 驱动核心数据结构 ---<br>// 我们将自定义的统计信息和设备指针放在一个结构体中<br>struct mynet_priv &#123;<br>    struct net_device_stats stats;<br>    struct net_device *dev;<br>&#125;;<br><br>static struct net_device *my_net_dev;<br><br>// --- net_device_ops 函数实现 ---<br><br>// open 函数：当接口被 <span class="hljs-string">&quot;ifconfig up&quot;</span> 启动时调用<br>static int mynet_open(struct net_device *dev)<br>&#123;<br>    // 启动传输队列<br>    netif_start_queue(dev);<br>    printk(KERN_INFO <span class="hljs-string">&quot;%s: Device opened.\n&quot;</span>, dev-&gt;name);<br>    <span class="hljs-built_in">return</span> 0;<br>&#125;<br><br>// stop 函数：当接口被 <span class="hljs-string">&quot;ifconfig down&quot;</span> 关闭时调用<br>static int mynet_stop(struct net_device *dev)<br>&#123;<br>    // 停止传输队列<br>    netif_stop_queue(dev);<br>    printk(KERN_INFO <span class="hljs-string">&quot;%s: Device stopped.\n&quot;</span>, dev-&gt;name);<br>    <span class="hljs-built_in">return</span> 0;<br>&#125;<br><br>// 发包函数：这是网络驱动的核心，负责发送数据包<br>static netdev_tx_t mynet_start_xmit(struct sk_buff *skb, struct net_device *dev)<br>&#123;<br>    struct mynet_priv *priv = netdev_priv(dev);<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;%s: Transmitting packet (len: %u)\n&quot;</span>, dev-&gt;name, skb-&gt;len);<br>    <br>    // 更新统计信息<br>    priv-&gt;stats.tx_packets++;<br>    priv-&gt;stats.tx_bytes += skb-&gt;len;<br><br>    // --- 模拟环回 ---<br>    // 正常驱动会在这里把 skb 的数据通过 DMA 发送到硬件<br>    // 我们直接将 skb 重新送回收包路径<br>    skb-&gt;protocol = eth_type_trans(skb, dev); // 设置协议类型<br>    skb-&gt;dev = dev;<br>    netif_rx(skb); // 将 skb 传递给内核协议栈的接收部分<br><br>    // 告诉内核数据包已发送，可以释放 skb<br>    // dev_kfree_skb(skb); // 真实驱动中发送完会释放 skb<br>    // 但因为我们环回了，协议栈会负责释放它<br><br>    <span class="hljs-built_in">return</span> NETDEV_TX_OK; // 返回 OK 表示发送成功<br>&#125;<br><br>// 获取统计信息函数<br>static struct net_device_stats *mynet_get_stats(struct net_device *dev)<br>&#123;<br>    struct mynet_priv *priv = netdev_priv(dev);<br>    <span class="hljs-built_in">return</span> &amp;priv-&gt;stats;<br>&#125;<br><br>// --- net_device_ops 结构体定义 ---<br>static const struct net_device_ops mynet_ops = &#123;<br>    .ndo_open       = mynet_open,<br>    .ndo_stop       = mynet_stop,<br>    .ndo_start_xmit = mynet_start_xmit,<br>    .ndo_get_stats  = mynet_get_stats,<br>&#125;;<br><br>// --- setup 函数，用于初始化设备 ---<br>void mynet_setup(struct net_device *dev)<br>&#123;<br>    // 设置为以太网设备<br>    ether_setup(dev);<br><br>    // 关联我们的操作函数<br>    dev-&gt;netdev_ops = &amp;mynet_ops;<br><br>    // 分配一个随机的 MAC 地址<br>    eth_hw_addr_random(dev);<br><br>    // 其他设备特性标志<br>    dev-&gt;flags |= IFF_NOARP;<br>&#125;<br><br>// --- 模块初始化函数 ---<br>static int __init netloop_init(void)<br>&#123;<br>    struct mynet_priv *priv;<br><br>    // 1. 分配 net_device 结构体，并为私有数据分配空间<br>    my_net_dev = alloc_netdev(sizeof(struct mynet_priv), DEVICE_NAME, NET_NAME_UNKNOWN, mynet_setup);<br>    <span class="hljs-keyword">if</span> (!my_net_dev) &#123;<br>        <span class="hljs-built_in">return</span> -ENOMEM;<br>    &#125;<br><br>    // 获取私有数据指针<br>    priv = netdev_priv(my_net_dev);<br>    priv-&gt;dev = my_net_dev;<br><br>    // 2. 注册网络设备到内核<br>    <span class="hljs-keyword">if</span> (register_netdev(my_net_dev)) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;Failed to register net device\n&quot;</span>);<br>        free_netdev(my_net_dev);<br>        <span class="hljs-built_in">return</span> -1;<br>    &#125;<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;%s: Driver loaded.\n&quot;</span>, my_net_dev-&gt;name);<br>    <span class="hljs-built_in">return</span> 0;<br>&#125;<br><br>// --- 模块卸载函数 ---<br>static void __exit netloop_exit(void)<br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;%s: Unloading driver.\n&quot;</span>, my_net_dev-&gt;name);<br>    unregister_netdev(my_net_dev); // 从内核注销<br>    free_netdev(my_net_dev);       // 释放 net_device<br>&#125;<br><br>module_init(netloop_init);<br>module_exit(netloop_exit);<br><br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;Your Name&quot;</span>);<br>MODULE_DESCRIPTION(<span class="hljs-string">&quot;A simple loopback network device driver.&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://GoKo-Son626.github.io/categories/kernel/">kernel</category>
      
      <category domain="https://GoKo-Son626.github.io/categories/kernel/driver/">driver</category>
      
      
      <category domain="https://GoKo-Son626.github.io/tags/driver/">driver</category>
      
      <category domain="https://GoKo-Son626.github.io/tags/linux/">linux</category>
      
      
      <comments>https://goko-son626.github.io/post/the-Three-Basic-Linux-Driver-Models.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>riscv toolchain</title>
      <link>https://goko-son626.github.io/post/riscv-toolchains.html</link>
      <guid>https://goko-son626.github.io/post/riscv-toolchains.html</guid>
      <pubDate>Tue, 18 Jun 2024 08:30:56 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;在 RISC-V 开发中, 交叉编译工具链允许我们在一个平台（如 x86 主机）上，为另一个平台（如RISC-V 开发板）生成可执行代码。&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>在 RISC-V 开发中, 交叉编译工具链允许我们在一个平台（如 x86 主机）上，为另一个平台（如RISC-V 开发板）生成可执行代码。</strong></em></li></ul><span id="more"></span><h3 id="1-核心概念：工具链的“三元组”-Triplet"><a href="#1-核心概念：工具链的“三元组”-Triplet" class="headerlink" title="1. 核心概念：工具链的“三元组” (Triplet)"></a>1. 核心概念：工具链的“三元组” (Triplet)</h3><p>你经常会看到像 <code>riscv64-unknown-linux-gnu-</code> 这样的名称，这就是工具链的“三元组”，其标准格式为：</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;<span class="hljs-built_in">arch</span>&gt;-&lt;vendor&gt;-&lt;os&gt;<br></code></pre></td></tr></table></figure><ul><li><code>&lt;arch&gt;</code> (架构)：指定目标 CPU 架构，例如 <code>riscv64</code> 或 <code>riscv32</code>。</li><li><code>&lt;vendor&gt;</code> (供应商)：通常是 <code>unknown</code> 或公司名。</li><li><code>&lt;os&gt;</code> (操作系统&#x2F;环境)：这是<strong>最关键</strong>的部分，它决定了工具链的目标环境和使用的 C 标准库 (libc)。最常见的两个是：<ul><li><code>elf</code>: 面向<strong>裸机 (Bare-metal)</strong> 或<strong>嵌入式实时操作系统 (RTOS)</strong>。</li><li><code>linux-gnu</code>: 面向<strong>完整的 GNU&#x2F;Linux 操作系统</strong>。</li></ul></li></ul><h3 id="2-两大主流工具链详解"><a href="#2-两大主流工具链详解" class="headerlink" title="2. 两大主流工具链详解"></a>2. 两大主流工具链详解</h3><h4 id="1-riscv64-unknown-elf"><a href="#1-riscv64-unknown-elf" class="headerlink" title="1. riscv64-unknown-elf"></a>1. <code>riscv64-unknown-elf</code></h4><p>用于<strong>裸机和嵌入式</strong>开发的标准工具链。</p><ul><li><strong>目标系统</strong>: 没有任何操作系统的环境（裸机），或者使用了轻量级实时操作系统（如 FreeRTOS, RT-Thread）的环境。</li><li><strong>C 标准库 (Libc)</strong>: 使用 <strong>Newlib</strong>。<ul><li><strong>Newlib</strong> 是一个轻量级的 C 库，专为嵌入式系统设计。它只提供最基础的 C 语言函数（如 <code>strcpy</code>, <code>printf</code>），并且不依赖任何操作系统的系统调用（Syscall）。如果需要文件操作或内存管理，需要实现底层的“桩函数”(stubs)。</li></ul></li><li><strong>应用场景</strong>:<ul><li>编写 Bootloader（如 U-Boot）。</li><li>开发 RISC-V 的“特权二进制接口”固件（如 OpenSBI）。</li><li>为微控制器 (MCU) 编写固件。</li><li>开发简单的操作系统内核。</li></ul></li></ul><h4 id="2-riscv64-linux-gnu"><a href="#2-riscv64-linux-gnu" class="headerlink" title="2. riscv64-linux-gnu"></a>2. <code>riscv64-linux-gnu</code></h4><p>用于<strong>在 RISC-V 平台上开发 Linux 应用</strong>的工具链。</p><ul><li><strong>目标系统</strong>: 运行完整 Linux 内核的系统。</li><li><strong>C 标准库 (Libc)</strong>: 使用 <strong>glibc</strong> (GNU C Library)。<ul><li><strong>glibc</strong> 是功能完备的标准 C 库，提供了丰富的 POSIX API 支持（如 <code>fork</code>, <code>pthread</code>, 文件系统操作等）。它深度依赖 Linux 内核提供的系统调用来完成工作。</li></ul></li><li><strong>典型应用场景</strong>:<ul><li>编译一个标准的 C&#x2F;C++ 应用程序（如 Nginx, Redis），让它运行在 RISC-V 架构的 Linux 发行版上（如 Ubuntu, Debian for RISC-V）。</li><li>开发 Linux 用户态驱动或服务程序。</li></ul></li></ul><blockquote><p><strong>Tip</strong>: <code>riscv64-unknown-linux-gnu-</code> 和 <code>riscv64-linux-gnu-</code> 在功能上是等价的，可以互换使用。<code>unknown</code> 字段在这里没有实际影响。</p></blockquote><hr><h3 id="3-如何获取和安装工具链"><a href="#3-如何获取和安装工具链" class="headerlink" title="3. 如何获取和安装工具链"></a>3. 如何获取和安装工具链</h3><h4 id="方式一：使用包管理器-简单快捷"><a href="#方式一：使用包管理器-简单快捷" class="headerlink" title="方式一：使用包管理器 (简单快捷)"></a>方式一：使用包管理器 (简单快捷)</h4><p>对于 <code>linux-gnu</code> 工具链，这是最简单的方法。以 Ubuntu&#x2F;Debian 为例：</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装 C 和 C++ 交叉编译器</span><br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install gcc-riscv64-linux-gnu g++-riscv64-linux-gnu<br></code></pre></td></tr></table></figure><ul><li><strong>优点</strong>: 安装简单</li><li><strong>缺点</strong>: 版本可能不是最新的</li></ul><h4 id="方式二：从源码编译-推荐，灵活且最新"><a href="#方式二：从源码编译-推荐，灵活且最新" class="headerlink" title="方式二：从源码编译 (推荐，灵活且最新)"></a>方式二：从源码编译 (推荐，灵活且最新)</h4><p>获取<strong>最新版本</strong>工具链（包括 <code>elf</code> 和 <code>linux-gnu</code>）的<strong>最佳方式</strong>。</p><ol start="0"><li><p><strong>安装相关依赖</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install libncurses-dev libncursesw5-dev pkg-config autoconf automake bison flex gawk gcc g++ libtool make patch python3-dev texinfo wget<br><span class="hljs-built_in">sudo</span> apt-get install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev make bison flex texinfo gawk libncurses5-dev libexpat1-dev libgmp-dev libmpfr-dev libmpc-dev libgmp-dev libmpfr-dev libmpc-dev<br></code></pre></td></tr></table></figure></li><li><p><strong>克隆官方仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#`--recursive` 参数至关重要，它会同时下载 `gcc`, `binutils` 等所有子模块。</span><br>git <span class="hljs-built_in">clone</span> --recursive https://github.com/riscv-collab/riscv-gnu-toolchain<br><span class="hljs-built_in">cd</span> riscv-gnu-toolchain<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>* 检查当前子模块情况。<br>git submodule status<br><br>* 拉取子模块(init: 子模块未初始化时初始化，recursive: 嵌套子模块也一起拉取)<br>* 主仓库换分支时同步子模块<br>git submodule update --init --recursive<br></code></pre></td></tr></table></figure></li><li><p><strong>配置与编译</strong><br>需要指定安装路径 (<code>--prefix</code>) 和目标架构 (<code>--with-arch</code>, <code>--with-abi</code>)。</p><ul><li><strong>编译 <code>linux-gnu</code> 工具链 (用于Linux):</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建安装目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/riscv-linux<br><span class="hljs-comment"># 配置: 目录，目标是为linux构建工具链</span><br>./configure --prefix=/opt/riscv-linux --enable-linux<br><span class="hljs-comment"># `make linux` 会自动处理多阶段编译的复杂流程（构建临时gcc-&gt;构建glibc-&gt;构建最终gcc）</span><br><span class="hljs-keyword">time</span> make -j$(<span class="hljs-built_in">nproc</span>) linux<br><span class="hljs-comment"># 安装</span><br><span class="hljs-built_in">sudo</span> make install <br></code></pre></td></tr></table></figure><ul><li><strong>编译 <code>elf</code> 工具链 (用于裸机):riscv64-unknown-elf-</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建一个安装目录</span><br><span class="hljs-built_in">mkdir</span> -p /opt/riscv-elf<br><span class="hljs-comment"># 配置: 其中 `rv64gc` 指支持 64 位基础整数指令集（I）、乘除法（M）、原子（A）、浮点（F、D）、压缩（C）等扩展；</span><br><span class="hljs-comment">#       `lp64d` 表示 long 和 pointer 为 64 位，使用 double 精度浮点。</span><br>./configure --prefix=/opt/riscv-elf --with-arch=rv64gc --with-abi=lp64d<br><span class="hljs-comment"># 编译 (-j`nproc` 使用所有CPU核心加速)</span><br><span class="hljs-keyword">time</span> make -j$(<span class="hljs-built_in">nproc</span>)<br><span class="hljs-comment"># 安装</span><br><span class="hljs-built_in">sudo</span> make install<br></code></pre></td></tr></table></figure></li><li><p><strong>添加到环境变量</strong><br>为了方便使用，将工具链的 <code>bin</code> 目录添加到 <code>PATH</code>。编辑 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加这行到文件末尾 (根据编译的类型选择)</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/opt/riscv-elf/bin:<span class="hljs-variable">$PATH</span>&quot;</span>  <span class="hljs-comment"># For elf toolchain</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/opt/riscv-linux/bin:<span class="hljs-variable">$PATH</span>&quot;</span> <span class="hljs-comment"># For linux toolchain</span><br><br><span class="hljs-comment"># 使配置生效</span><br><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure></li></ol><hr><h3 id="4-简单使用"><a href="#4-简单使用" class="headerlink" title="4. 简单使用"></a>4. 简单使用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// hello.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, RISC-V World!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用-elf-工具链编译"><a href="#使用-elf-工具链编译" class="headerlink" title="使用 elf 工具链编译"></a>使用 <code>elf</code> 工具链编译</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编译</span><br>riscv64-unknown-elf-gcc -o hello.elf hello.c<br><br><span class="hljs-comment"># 查看文件类型</span><br>file hello.elf<br><span class="hljs-comment"># 输出会类似:</span><br><span class="hljs-comment"># hello.elf: ELF 64-bit LSB executable, UCB RISC-V, version 1 (SYSV), statically linked, not stripped</span><br></code></pre></td></tr></table></figure><p>这个 <code>hello.elf</code> 是一个<strong><em>静态链接</em>的裸机程序</strong>。它不能直接在 <strong>x86 Linux</strong> 主机上运行，也不能在 RISC-V Linux 系统上直接运行，因为它缺少操作系统加载器所需的信息。它需要被烧录到裸机环境或通过模拟器（如 QEMU-system）加载执行。</p><blockquote><p>这个 <code>hello.elf</code> 文件虽然是标准的 ELF 格式，但它与 Linux 可执行文件有本质区别：</p><ul><li><strong>不含 <code>INTERP</code> 段</strong>：它不指定动态链接器，因为它不依赖任何动态库。</li><li><strong>静态链接</strong>: 它静态链接了轻量级的 <code>newlib</code> C 库，而非 <code>glibc</code>。</li><li><strong>无系统调用</strong>: 其中的 <code>printf</code> 函数最终依赖开发者实现的底层 I&#x2F;O 桩函数（如通过 UART 发送字符），而不是 Linux 的 <code>write</code> 系统调用。</li><li><strong>不同的程序入口</strong>: 它的启动代码 (<code>_start</code>) 负责初始化 C 运行环境后调用 <code>main</code>，但 <code>main</code> 返回后程序通常会进入死循环，因为它没有“退出”到操作系统的概念。</li></ul></blockquote><h4 id="使用-linux-gnu-工具链编译"><a href="#使用-linux-gnu-工具链编译" class="headerlink" title="使用 linux-gnu 工具链编译"></a>使用 <code>linux-gnu</code> 工具链编译</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编译</span><br>riscv64-linux-gnu-gcc -o hello.linux hello.c<br><br><span class="hljs-comment"># 查看文件类型</span><br>file hello.linux<br><span class="hljs-comment"># 输出会类似:</span><br><span class="hljs-comment"># hello.linux: ELF 64-bit LSB executable, UCB RISC-V, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-riscv64-lp64d.so.1, for GNU/Linux 4.15.0, not stripped</span><br></code></pre></td></tr></table></figure><p>这个 <code>hello.linux</code> 是一个<strong><em>动态链接</em>的 Linux 程序</strong>。它需要一个 RISC-V Linux 环境来运行，因为它依赖于该环境中的动态链接器 (<code>ld-linux-riscv64-lp64d.so.1</code>) 和 glibc 库。</p><hr><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><table><thead><tr><th>特性</th><th><code>riscv64-unknown-elf</code></th><th><code>riscv64-linux-gnu</code></th></tr></thead><tbody><tr><td><strong>目标平台</strong></td><td><strong>裸机 (Bare-metal)</strong>、RTOS</td><td><strong>GNU&#x2F;Linux 系统</strong></td></tr><tr><td><strong>C 库</strong></td><td><code>newlib</code> (轻量级，无 OS 依赖)</td><td><code>glibc</code> (功能完备，依赖 Linux 内核)</td></tr><tr><td><strong>核心用途</strong></td><td>固件、Bootloader、RTOS 应用、简单操作系统内核</td><td>编译可在 RISC-V Linux 上运行的应用程序</td></tr><tr><td><strong>选择场景</strong></td><td>“为一块开发板从零开始写程序。”</td><td>“在启动的 Linux 上面运行软件。”</td></tr></tbody></table>]]></content:encoded>
      
      
      <category domain="https://GoKo-Son626.github.io/categories/risc-v/">risc-v</category>
      
      <category domain="https://GoKo-Son626.github.io/categories/risc-v/Toolchain/">Toolchain</category>
      
      
      <category domain="https://GoKo-Son626.github.io/tags/risc-v/">risc-v</category>
      
      
      <comments>https://goko-son626.github.io/post/riscv-toolchains.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Compilation libraries and tools</title>
      <link>https://goko-son626.github.io/post/Compilation-libraries-and-tools.html</link>
      <guid>https://goko-son626.github.io/post/Compilation-libraries-and-tools.html</guid>
      <pubDate>Sun, 04 Jun 2023 12:08:24 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;常见的编译库与编译工具的介绍及之间的关系&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>常见的编译库与编译工具的介绍及之间的关系</strong></em></li></ul><span id="more"></span><h3 id="编译器、工具链与C库基本概念"><a href="#编译器、工具链与C库基本概念" class="headerlink" title="编译器、工具链与C库基本概念"></a>编译器、工具链与C库基本概念</h3><h4 id="1-编译器-Compiler"><a href="#1-编译器-Compiler" class="headerlink" title="1. 编译器 (Compiler)"></a><strong>1. 编译器 (Compiler)</strong></h4><ul><li><strong>它是什么？</strong> 代码的“翻译官”。</li><li><strong>它的作用？</strong> 将你写的 C&#x2F;C++ 代码翻译成机器能懂的汇编代码或目标文件 (<code>.o</code>)。</li><li><strong>典型代表</strong>：<code>GCC</code>, <code>Clang</code>。</li><li><strong>使用场景</strong>：写任何代码并想让它运行时，第一步就是用编译器进行翻译。</li></ul><h4 id="2-工具链-Toolchain"><a href="#2-工具链-Toolchain" class="headerlink" title="2. 工具链 (Toolchain)"></a><strong>2. 工具链 (Toolchain)</strong></h4><ul><li><strong>它是什么？</strong> 一个完整的“工具箱”。</li><li><strong>它的关联？</strong> <strong>编译器是工具链的核心组件之一</strong>。工具链还包含了链接器 (<code>ld</code>)、汇编器 (<code>as</code>) 等，它们协同工作，将代码和库文件打包成最终的可执行文件。</li><li><strong>使用场景</strong>：<ul><li><strong>本地工具链</strong>：编译在本机运行的程序 (e.g., <code>gcc</code>)。</li><li><strong>交叉工具链</strong>：在一种架构（如x86电脑）上，编译给另一种架构（如RISC-V开发板）运行的程序 (e.g., <code>riscv64-linux-gnu-gcc</code>)。</li></ul></li></ul><h4 id="3-libc-C标准库"><a href="#3-libc-C标准库" class="headerlink" title="3. libc (C标准库)"></a><strong>3. libc (C标准库)</strong></h4><ul><li><strong>它是什么？</strong> 一个<strong>API标准或规范</strong>，不是一个具体的软件。它定义了像 <code>printf</code>, <code>malloc</code> 等基础函数。</li><li><strong>它的关联？</strong> 它是所有C程序的基础依赖。你需要一个具体的<strong>实现</strong>来使用它。</li><li><strong>使用场景</strong>：这是一个抽象概念，你写的每一行C代码，只要调用了标准函数，都在与这个“标准”打交道。</li></ul><h4 id="4-glibc-GNU-C-Library"><a href="#4-glibc-GNU-C-Library" class="headerlink" title="4. glibc (GNU C Library)"></a><strong>4. glibc (GNU C Library)</strong></h4><ul><li><strong>它是什么？</strong> <strong><code>libc</code> 的一种强大、功能全面的实现</strong>。</li><li><strong>它的关联？</strong> 它是为 <strong>Linux 操作系统</strong>设计的 <code>libc</code>。它不仅包含标准C函数，还包含大量与Linux内核交互的接口（如进程、网络功能）。</li><li><strong>使用场景</strong>：当你需要开发一个运行在<strong>标准Linux系统</strong>（如Ubuntu&#x2F;Debian&#x2F;CentOS）上的应用程序时，你的程序会链接 <code>glibc</code>。对应的工具链通常叫 <code>...-linux-gnu-gcc</code>。</li></ul><h4 id="5-newlib"><a href="#5-newlib" class="headerlink" title="5. newlib"></a><strong>5. newlib</strong></h4><ul><li><strong>它是什么？</strong> <strong><code>libc</code> 的一种轻量级、精简的实现</strong>。</li><li><strong>它的关联？</strong> 它是为<strong>没有操作系统</strong>的环境设计的。因此，它没有 <code>fork</code> 等需要OS支持的复杂功能。</li><li><strong>使用场景</strong>：开发<strong>裸机 (Bare-metal)</strong> 程序、固件 (Firmware)、Bootloader，或者在简单的实时操作系统 (RTOS) 上开发。对应的工具链通常叫 <code>...-elf-gcc</code>。</li></ul><h4 id="6-GNU"><a href="#6-GNU" class="headerlink" title="6. GNU"></a><strong>6. GNU</strong></h4><ul><li><strong>它是什么？</strong> 一个庞大的自由软件生态系统。</li><li><strong>它的关联？</strong> 我们上面讨论的大部分经典工具都来自GNU项目，包括 <code>GCC</code> (编译器), <code>glibc</code> (C库), <code>GDB</code> (调试器), <code>Make</code> (构建工具)。”GNU Toolchain” 指的就是这一整套工具。</li><li><strong>使用场景</strong>：Linux 和嵌入式开发的事实标准。</li></ul><h4 id="7-Clang-LLVM"><a href="#7-Clang-LLVM" class="headerlink" title="7. Clang &#x2F; LLVM"></a><strong>7. Clang &#x2F; LLVM</strong></h4><ul><li><strong>它是什么？</strong> 一套现代化的、可替代 GNU 的编译器工具集。</li><li><strong>它的关联？</strong> <code>Clang</code> 是编译器，是 <code>GCC</code> 的直接竞争对手。<code>Clang</code> 自身不提供 <code>libc</code>，它需要<strong>配合 <code>glibc</code> 或 <code>newlib</code> 等</strong>一起使用。</li><li><strong>使用场景</strong>：因其友好的报错信息和模块化设计，在很多领域（如苹果生态、Android NDK）越来越流行。</li></ul><h4 id="8-ELF-Executable-and-Linkable-Format"><a href="#8-ELF-Executable-and-Linkable-Format" class="headerlink" title="8. ELF (Executable and Linkable Format)"></a><strong>8. ELF (Executable and Linkable Format)</strong></h4><ul><li><strong>它是什么？</strong> 一种<strong>文件格式</strong>，像 <code>.doc</code> 或 <code>.pdf</code> 一样。</li><li><strong>它的关联？</strong> 它是工具链最终生成的<strong>产品</strong>。无论是裸机程序还是Linux程序，最终都可以打包成 ELF 格式。</li><li><strong>使用场景</strong>：<ul><li><strong>裸机ELF</strong>：内部不依赖 <code>glibc</code>，直接在硬件上跑。</li><li><strong>Linux ELF</strong>：内部依赖 <code>glibc</code> 和Linux内核，必须在Linux系统上跑。</li><li><strong>关键</strong>：决定它在哪跑的，是它内部链接了什么库，而不是 <code>ELF</code> 这个格式本身。</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://GoKo-Son626.github.io/categories/note/">note</category>
      
      <category domain="https://GoKo-Son626.github.io/categories/note/compiler/">compiler</category>
      
      
      <category domain="https://GoKo-Son626.github.io/tags/Toolchain/">Toolchain</category>
      
      
      <comments>https://goko-son626.github.io/post/Compilation-libraries-and-tools.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo-blog</title>
      <link>https://goko-son626.github.io/post/hexo-blog.html</link>
      <guid>https://goko-son626.github.io/post/hexo-blog.html</guid>
      <pubDate>Sun, 28 May 2023 05:25:09 GMT</pubDate>
      
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;使用hexo和GitHub Pagtes部署一个自己的博客&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>使用hexo和GitHub Pagtes部署一个自己的博客</strong></em></li></ul><span id="more"></span><h3 id="1-安装并初始化Hexo"><a href="#1-安装并初始化Hexo" class="headerlink" title="1. 安装并初始化Hexo"></a>1. 安装并初始化Hexo</h3><ul><li><ol><li>安装 Hexo CLI</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><ul><li><ol start="2"><li>初始化博客项目目录</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mkdir my-blog &amp;&amp; cd my-blog<br>hexo init<br>npm install<br></code></pre></td></tr></table></figure><ul><li><ol start="3"><li>本地预览</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo server<br></code></pre></td></tr></table></figure><ul><li>启动本地服务：在浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 查看效果</li></ul><h3 id="2-配置-GitHub-Pages-部署"><a href="#2-配置-GitHub-Pages-部署" class="headerlink" title="2.  配置 GitHub Pages 部署"></a>2.  配置 GitHub Pages 部署</h3><ul><li><ol><li>创建GitHub仓库</li></ol><ul><li>创建一个仓库，名字叫 你的GitHub用户名.github.io</li><li>比如你是 goko，就叫 goko.github.io</li></ul></li><li><ol start="2"><li>安装部署插件</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><ul><li><ol start="3"><li>修改 _config.yml（根目录下）添加部署配置：</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">deploy:<br>  type: git<br>  # repo建议使用SSH, SSH免密<br>  repo: https://github.com/你的GitHub用户名/你的GitHub用户名.github.io.git<br>  branch: main  # 或者 master，看你的默认分支<br></code></pre></td></tr></table></figure><ul><li><ol start="4"><li>生成并部署博客</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></td></tr></table></figure><h3 id="3-域名-com-绑定"><a href="#3-域名-com-绑定" class="headerlink" title="3. 域名(.com)绑定"></a>3. 域名(<xxxx>.com)绑定</xxxx></h3><ul><li><ol><li>添加域名(在my-blog下)</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo &quot;&lt;xxxx&gt;.com&quot; &gt; source/CNAME<br># 或者可以：echo &quot;www.&lt;xxxx&gt;.com&quot; &gt; source/CNAME<br># 只能添加一个，而且两个需要添加不同的域名解析（如下）<br></code></pre></td></tr></table></figure><ul><li><ol start="2"><li>重新部署</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><ul><li><ol start="3"><li>设置 DNS 解析指向 GitHub Pages</li></ol></li></ul><p><strong>A. 使用裸域名（apex 域名）goku72.com</strong></p><table><thead><tr><th>记录类型</th><th>主机记录</th><th>记录值</th><th>说明</th></tr></thead><tbody><tr><td>A</td><td>@</td><td>185.199.108.153</td><td>GitHub Pages IP</td></tr><tr><td>A</td><td>@</td><td>185.199.109.153</td><td>GitHub Pages IP</td></tr><tr><td>A</td><td>@</td><td>185.199.110.153</td><td>GitHub Pages IP</td></tr><tr><td>A</td><td>@</td><td>185.199.111.153</td><td>GitHub Pages IP</td></tr></tbody></table><p>example aliyun:</p><ol><li>选择业务需求: 将网站域名解析到服务器IPv4地址</li><li>选择网站域名(主机记录): <xxxx>.com（对应设置“@”主机记录）</xxxx></li><li>填写 IP（记录值）：</li></ol><ul><li>在输入框里粘贴以下四行（每一行一个 IP）：</li><li><pre><code>  &gt; 185.199.109.153  &gt; 185.199.108.153  &gt; 185.199.110.153  &gt; 185.199.111.153</code></pre></li></ul><hr><p><strong>B. 使用 <a href="http://www.goku72.com/">www.goku72.com</a> 作为主域名</strong></p><table><thead><tr><th>记录类型</th><th>主机记录</th><th>记录值</th><th>说明</th></tr></thead><tbody><tr><td>CNAME</td><td>www</td><td>&lt;github用户名&gt;.github.io.</td><td>指向你的 GitHub 用户页仓库</td></tr></tbody></table><p>example aliyun:</p><ol><li>选择业务需求: 将网站域名解析到另外的目标域名</li><li>选择网站域名(主机记录): www.<xxxx>.com（对应设置“www”主机记录）</xxxx></li><li>填写 IP（记录值）：&lt;github用户名&gt;.github.io. (最有有一个符号”.”)</li></ol><h3 id="4-设置主题"><a href="#4-设置主题" class="headerlink" title="4. 设置主题"></a>4. 设置主题</h3><ul><li>cd my-blog&#x2F;themes</li><li>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> butterfly</li><li>修改_config.yml: <ul><li>theme: butterfly</li></ul></li><li>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</li></ul><p><strong>更多主题</strong>：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p><strong>注：</strong></p><ul><li>如果AB两个方式都添加了，只需要在 Hexo 项目的 source&#x2F;CNAME 文件中写 www.<xxxx>.com，GitHub Pages 就会自动把 goku72.com 重定向过去，无需额外设置！</xxxx></li><li>后续换域名只需要：阿里云重新解析 + 修改 source&#x2F;CNAME + 重新部署 Hexo，就能完成域名迁移。</li><li>有些主题可能需要下载插件</li></ul>]]></content:encoded>
      
      
      <category domain="https://GoKo-Son626.github.io/categories/blog/">blog</category>
      
      <category domain="https://GoKo-Son626.github.io/categories/blog/hexo/">hexo</category>
      
      
      <category domain="https://GoKo-Son626.github.io/tags/hexo/">hexo</category>
      
      
      <comments>https://goko-son626.github.io/post/hexo-blog.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
