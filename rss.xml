<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>GoKo&#39;s blog</title>
    <link>https://GoKo-Son626.github.io/</link>
    
    <atom:link href="https://goko-son626.github.io/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Mon, 05 May 2025 04:28:47 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>xv6-riscv-ch2</title>
      <link>https://goko-son626.github.io/post/xv6-riscv-ch2.html</link>
      <guid>https://goko-son626.github.io/post/xv6-riscv-ch2.html</guid>
      <pubDate>Mon, 05 May 2025 04:27:56 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;ch2-Operating-system-organization&quot;&gt;&lt;a href=&quot;#ch2-Operating-system-organization&quot; class=&quot;headerlink&quot; title=&quot;ch2: Operating system orga</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="ch2-Operating-system-organization"><a href="#ch2-Operating-system-organization" class="headerlink" title="ch2: Operating system organization"></a><strong>ch2: Operating system organization</strong></h2><h3 id="2-1-Abstracting-physical-resources"><a href="#2-1-Abstracting-physical-resources" class="headerlink" title="2.1 Abstracting physical resources"></a>2.1 Abstracting physical resources</h3><h3 id="2-2-User-mode-supervisor-mode-and-system-calls"><a href="#2-2-User-mode-supervisor-mode-and-system-calls" class="headerlink" title="2.2 User mode, supervisor mode, and system calls"></a>2.2 User mode, supervisor mode, and system calls</h3><h3 id="2-3-Kernel-organization"><a href="#2-3-Kernel-organization" class="headerlink" title="2.3 Kernel organization"></a>2.3 Kernel organization</h3><h3 id="2-4-Code-xv6-organization"><a href="#2-4-Code-xv6-organization" class="headerlink" title="2.4 Code: xv6 organization"></a>2.4 Code: xv6 organization</h3><h3 id="2-5-Process-overview"><a href="#2-5-Process-overview" class="headerlink" title="2.5 Process overview"></a>2.5 Process overview</h3><h3 id="2-6-Code-starting-xv6-the-first-process-and-system-call"><a href="#2-6-Code-starting-xv6-the-first-process-and-system-call" class="headerlink" title="2.6 Code: starting xv6, the first process and system call"></a>2.6 Code: starting xv6, the first process and system call</h3><h3 id="2-7-Security-Model"><a href="#2-7-Security-Model" class="headerlink" title="2.7 Security Model"></a>2.7 Security Model</h3><h3 id="2-8-Real-world"><a href="#2-8-Real-world" class="headerlink" title="2.8 Real world"></a>2.8 Real world</h3><h3 id="2-9-Exercises"><a href="#2-9-Exercises" class="headerlink" title="2.9 Exercises"></a>2.9 Exercises</h3>]]></content:encoded>
      
      
      
      <category domain="https://GoKo-Son626.github.io/tags/xv6-riscv/">xv6-riscv</category>
      
      
      <comments>https://goko-son626.github.io/post/xv6-riscv-ch2.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>xv6-riscv-ch1</title>
      <link>https://goko-son626.github.io/post/xv6-riscv-ch1/xv6-riscv-ch1.html</link>
      <guid>https://goko-son626.github.io/post/xv6-riscv-ch1/xv6-riscv-ch1.html</guid>
      <pubDate>Mon, 05 May 2025 02:00:04 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;How does xv6 come to life?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ch1-Operating-system-interfaces&quot;&gt;&lt;a href=&quot;#ch1-Operating-system-interfaces&quot; </description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><em>How does xv6 come to life?</em></li></ul><h2 id="ch1-Operating-system-interfaces"><a href="#ch1-Operating-system-interfaces" class="headerlink" title="ch1: Operating system interfaces"></a><strong>ch1: Operating system interfaces</strong></h2><ul><li>As Figure 1.1 shows, xv6 takes the traditional form of a kernel, a special program that provides<br>services to running programs. Each running program, called a process, has memory containing<br>instructions, data, and a stack. The instructions implement the program’s computation. The data<br>are the variables on which the computation acts. The stack organizes the program’s procedure calls.<br>A given computer typically has many processes but only a single kernel.<br><img src="/image.png" alt="alt text"></li><li>When a user program invokes a sys-<br>tem call, the hardware raises the privilege level and starts executing a pre-arranged function in the<br>kernel.<br>The collection of system calls that a kernel provides is the interface that user programs see. The<br>xv6 kernel provides a subset of the services and system calls that Unix kernels traditionally offer.<br>Figure 1.2 lists all of xv6’s system calls.<br><img src="/image-1.png" alt="alt text"></li><li>The shell is an ordinary program that reads commands from the user and executes them. The<br>fact that the shell is a user program, and not part of the kernel, illustrates the power of the system<br>call interface: there is nothing special about the shell. It also means that the shell is easy to replace;<br>as a result, modern Unix systems have a variety of shells to choose from, each with its own user<br>interface and scripting features. The xv6 shell is a simple implementation of the essence of the<br>Unix Bourne shell. Its implementation can be found at (user&#x2F;sh.c:1).<br><img src="/image-2.png" alt="alt text"><br>The xv6 shell uses the exec calls of blew to run programs on behalf of users. The main structure of<br>the shell is simple; see main (user&#x2F;sh.c:146). The main loop reads a line of input from the user with<br>getcmd. Then it calls fork, which creates a copy of the shell process. The parent calls wait,<br>while the child runs the command. For example, if the user had typed “echo hello” to the shell,<br>runcmd would have been called with “echo hello” as the argument. runcmd (user&#x2F;sh.c:55) runs<br>the actual command. For “echo hello”, it would call exec (user&#x2F;sh.c:79). If exec succeeds then<br>the child will execute instructions from echo instead of runcmd. At some point echo will call<br>exit, which will cause the parent to return from wait in main (user&#x2F;sh.c:146).</li></ul><h3 id="1-1-Processes-and-memory"><a href="#1-1-Processes-and-memory" class="headerlink" title="1.1 Processes and memory"></a>1.1 Processes and memory</h3><ul><li>An xv6 process consists of user-space memory (instructions, data, and stack) and per-process state<br>private to the kernel. Xv6 time-shares processes: it transparently switches the available CPUs<br>among the set of processes waiting to execute. When a process is not executing, xv6 saves the<br>process’s CPU registers, restoring them when it next runs the process. The kernel associates a<br>process identifier, or PID, with each process.</li><li>the following program fragment written in the C programming lan-<br>guage</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> pid = fork();<br><span class="hljs-keyword">if</span>(pid &gt; <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;parent: child=%d\n&quot;</span>, pid);<br>pid = wait((<span class="hljs-type">int</span> *) <span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child %d is done\n&quot;</span>, pid);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;child: exiting\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fork error\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>In the example, the output lines<br>parent: child&#x3D;1234<br>child: exiting<br>might come out in either order (or even intermixed), depending on whether the parent or child gets<br>to its printf call first. After the child exits, the parent’s wait returns, causing the parent to print<br>parent: child 1234 is done<br>Although the child has the same memory contents as the parent initially, the parent and child are<br>executing with separate memory and separate registers: changing a variable in one does not affect<br>the other. For example, when the return value of wait is stored into pid in the parent process, it<br>doesn’t change the variable pid in the child. The value of pid in the child will still be zero.</p><ul><li>The exec system call replaces the calling process’s memory with a new memory image loaded<br>from a file stored in the file system. The file must have a particular format, which specifies which<br>part of the file holds instructions, which part is data, at which instruction to start, etc. Xv6 uses the<br>ELF format, which Chapter 3 discusses in more detail. Usually the file is the result of compiling<br>a program’s source code. When exec succeeds, it does not return to the calling program; instead,<br>the instructions loaded from the file start executing at the entry point declared in the ELF header.<br>exec takes two arguments: the name of the file containing the executable and an array of string<br>arguments. For example</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *argv[<span class="hljs-number">3</span>];<br>argv[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;echo&quot;</span>;<br>argv[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;hello&quot;</span>;<br>argv[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br>exec(<span class="hljs-string">&quot;/bin/echo&quot;</span>, argv);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;exec error\n&quot;</span>);<br></code></pre></td></tr></table></figure><p>This fragment replaces the calling program with an instance of the program &#x2F;bin&#x2F;echo running<br>with the argument list echo hello. Most programs ignore the first element of the argument array,<br>which is conventionally the name of the program.</p><ul><li>why fork and exec are not combined in a single call<br>we will see later that<br>the shell exploits the separation in its implementation of I&#x2F;O redirection.<br>Xv6 allocates most user-space memory implicitly: fork allocates the memory required for the<br>child’s copy of the parent’s memory, and exec allocates enough memory to hold the executable<br>file. A process that needs more memory at run-time (perhaps for malloc) can call sbrk(n) to<br>grow its data memory by n zero bytes; sbrk returns the location of the new memory.</li></ul><h3 id="1-2-I-O-and-File-descriptors"><a href="#1-2-I-O-and-File-descriptors" class="headerlink" title="1.2 I&#x2F;O and File descriptors"></a>1.2 I&#x2F;O and File descriptors</h3><ul><li>A file descriptor is a small integer representing a kernel-managed object that a process may read<br>from or write to. A process may obtain a file descriptor by opening a file, directory, or device,<br>or by creating a pipe, or by duplicating an existing descriptor. For simplicity we’ll often refer<br>to the object a file descriptor refers to as a “file”; the file descriptor interface abstracts away the<br>differences between files, pipes, and devices, making them all look like streams of bytes. We’ll<br>refer to input and output as I&#x2F;O.</li><li>Internally, the xv6 kernel uses the file descriptor as an index into a per-process table, so that<br>every process has a private space of file descriptors starting at zero. By convention, a process reads<br>from file descriptor 0 (standard input), writes output to file descriptor 1 (standard output), and<br>writes error messages to file descriptor 2 (standard error). As we will see, the shell exploits the<br>convention to implement I&#x2F;O redirection and pipelines. The shell ensures that it always has three<br>file descriptors open (user&#x2F;sh.c:152), which are by default file descriptors for the console.</li><li>The following program fragment (which forms the essence of the program cat) copies data<br>from its standard input to its standard output. If an error occurs, it writes a message to the standard<br>error.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> buf[<span class="hljs-number">512</span>];<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">for</span>(;;)&#123;<br>n = read(<span class="hljs-number">0</span>, buf, <span class="hljs-keyword">sizeof</span> buf);<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;read error\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(write(<span class="hljs-number">1</span>, buf, n) != n)&#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;write error\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>The important thing to note in the code fragment is that cat doesn’t know whether it is reading<br>from a file, console, or a pipe. Similarly cat doesn’t know whether it is printing to a console, a<br>file, or whatever. The use of file descriptors and the convention that file descriptor 0 is input and<br>file descriptor 1 is output allows a simple implementation of cat.</p><ul><li>The close system call releases a file descriptor, making it free for reuse by a future open,<br>pipe, or dup system call (see below). A newly allocated file descriptor is always the lowest-<br>numbered unused descriptor of the current process.</li><li>File descriptors and fork interact to make I&#x2F;O redirection easy to implement.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *argv[<span class="hljs-number">2</span>];<br>argv[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;cat&quot;</span>;<br>argv[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(fork() == <span class="hljs-number">0</span>) &#123;<br>close(<span class="hljs-number">0</span>);<br>open(<span class="hljs-string">&quot;input.txt&quot;</span>, O_RDONLY);<br>exec(<span class="hljs-string">&quot;cat&quot;</span>, argv);<br>&#125;<br></code></pre></td></tr></table></figure><p>After the child closes file descriptor 0, open is guaranteed to use that file descriptor for the newly<br>opened input.txt: 0 will be the smallest available file descriptor. cat then executes with file<br>descriptor 0 (standard input) referring to input.txt. The parent process’s file descriptors are not<br>changed by this sequence</p><ul><li>Two file descriptors share an offset if they were derived from the same original file descriptor<br>by a sequence of fork and dup calls. Otherwise file descriptors do not share offsets, even if they<br>resulted from open calls for the same file.</li><li>dup allows shells to implement commands like this: <code>ls existing-file non-existing-file &gt; tmp1 2&gt;&amp;1</code>. The 2&gt;&amp;1 tells the shell to give the command a file descriptor 2 that is a duplicate of descriptor 1. Both the name of the existing file and the error message for the non-existing file will show up in the file tmp1. The xv6 shell doesn’t support I&#x2F;O redirection for the error file descriptor, but now you know how to implement it.</li></ul><h3 id="1-3-Pipes"><a href="#1-3-Pipes" class="headerlink" title="1.3 Pipes"></a>1.3 Pipes</h3><ul><li>A pipe is a small kernel buffer exposed to processes as a pair of file descriptors, one for reading<br>and one for writing. Writing data to one end of the pipe makes that data available for reading from<br>the other end of the pipe. Pipes provide a way for processes to communicate.</li><li>The following example code runs the program wc with standard input connected to the read<br>end of a pipe.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> p[<span class="hljs-number">2</span>];<br><span class="hljs-type">char</span> *argv[<span class="hljs-number">2</span>];<br>argv[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;wc&quot;</span>;<br>argv[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>pipe(p);<br><span class="hljs-keyword">if</span>(fork() == <span class="hljs-number">0</span>) &#123;<br>close(<span class="hljs-number">0</span>);<br>dup(p[<span class="hljs-number">0</span>]);<br>close(p[<span class="hljs-number">0</span>]);<br>close(p[<span class="hljs-number">1</span>]);<br>exec(<span class="hljs-string">&quot;/bin/wc&quot;</span>, argv);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>close(p[<span class="hljs-number">0</span>]);<br>write(p[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;hello world\n&quot;</span>, <span class="hljs-number">12</span>);<br>close(p[<span class="hljs-number">1</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">          pipe<br>  [p[1]] -------&gt; [p[0]]<br>   (write)         (read)<br><br>parent:<br>   write(p[1], ...)<br><br>child:<br>   dup(p[0]) -&gt; fd 0<br>   exec(&quot;wc&quot;) -&gt; wc reads from stdin (=read of pipe)<br></code></pre></td></tr></table></figure><p>The fact that read blocks until it is impossible for new data to arrive<br>is one reason that it’s important for the child to close the write end of the pipe before executing<br>wc above: if one of wc ’s file descriptors referred to the write end of the pipe and <strong>not close</strong>, wc would never see<br>end-of-file.</p><ul><li>The xv6 shell implements pipelines such as grep fork sh.c | wc -l in a manner similar<br>to the above code (user&#x2F;sh.c:101). The child process creates a pipe to connect the left end of the<br>pipeline with the right end. Then it calls fork and runcmd for the left end of the pipeline and<br>fork and runcmd for the right end, and waits for both to finish. The right end of the pipeline<br>may be a command that itself includes a pipe (e.g., a | b | c), which itself forks two new child<br>processes (one for b and one for c). Thus, the shell may create a tree of processes. The leaves<br>16of this tree are commands and the interior nodes are processes that wait until the left and right<br>children complete.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">   sh<br>  /  \<br>a     sh<br>     /  \<br>   b     c<br></code></pre></td></tr></table></figure><ul><li><code>echo hello world &gt;/tmp/xyz; wc &lt;/tmp/xyz</code><br>Pipes have at least three advantages over temporary files in this situation. <ul><li>First, pipes automatically clean themselves up; with the file redirection, a shell would have to be careful to remove &#x2F;tmp&#x2F;xyz when done. </li><li>Second, pipes can pass arbitrarily long streams of data, while file redirection requires enough free space on disk to store all the data. </li><li>Third, pipes allow for parallel execution of pipeline stages, while the file approach requires the first program to finish before the second starts.</li></ul></li></ul><h3 id="1-4-File-system"><a href="#1-4-File-system" class="headerlink" title="1.4 File system"></a>1.4 File system</h3><ul><li>The xv6 file system provides data files, which contain uninterpreted byte arrays, and directories,<br>which contain named references to data files and other directories.</li><li>There are system calls to create new files and directories: mkdir creates a new directory, open<br>with the O_CREATE flag creates a new data file, and mknod creates a new device file. This example<br>illustrates all three:</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">mkdir(<span class="hljs-string">&quot;/dir&quot;</span>);<br>fd = open(<span class="hljs-string">&quot;/dir/file&quot;</span>, O_CREATE|O_WRONLY);<br>close(fd);<br>mknod(<span class="hljs-string">&quot;/console&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>mknod creates a special file that refers to a device. Associated with a device file are the major and<br>minor device numbers (the two arguments to mknod), which uniquely identify a kernel device.<br>When a process later opens a device file, the kernel diverts read and write system calls to the<br>kernel device implementation instead of passing them to the file system.</p><ul><li>A file’s name is distinct from the file itself; the same underlying file, called an inode, can have<br>multiple names, called links. Each link consists of an entry in a directory; the entry contains a file<br>name and a reference to an inode. An inode holds metadata about a file, including its type (file or<br>directory or device), its length, the location of the file’s content on disk, and the number of links to<br>a file.</li><li>The fstat system call retrieves information from the inode that a file descriptor refers to. It<br>fills in a struct stat, defined in stat.h (kernel&#x2F;stat.h) as:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#define T_DIR           1// Directory<br>#define T_FILE          2// File<br>#define T_DEVICE        3// Device<br><br>struct stat &#123;<br>        int dev;        // File system’s disk device<br>        uint ino;       // Inode number<br>        short type;     // Type of file<br>        short nlink;    // Number of links to file<br>        uint64 size;    // Size of file in bytes<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>The link system call creates another file system name referring to the same inode as an exist-<br>ing file. This fragment creates a new file named both a and b.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">open(<span class="hljs-string">&quot;a&quot;</span>, O_CREATE|O_WRONLY);<br>link(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>);<br></code></pre></td></tr></table></figure><p>Reading from or writing to a is the same as reading from or writing to b. Each inode is identified<br>by a unique inode number. After the code sequence above, it is possible to determine that a and b<br>refer to the same underlying contents by inspecting the result of fstat: both will return the same<br>inode number (ino), and the nlink count will be set to 2.<br>The unlink system call removes a name from the file</p><ul><li>The unlink system call removes a name from the file system. The file’s inode and the disk<br>space holding its content are only freed when the file’s link count is zero and no file descriptors<br>refer to it. Thus adding</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">unlink(<span class="hljs-string">&quot;a&quot;</span>);<br></code></pre></td></tr></table></figure><p>to the last code sequence leaves the inode and file content accessible as b. Furthermore,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">fd = open(<span class="hljs-string">&quot;/tmp/xyz&quot;</span>, O_CREATE|O_RDWR);<br>unlink(<span class="hljs-string">&quot;/tmp/xyz&quot;</span>);<br></code></pre></td></tr></table></figure><p>is an idiomatic way to create a temporary inode with no name that will be cleaned up when the<br>process closes fd or exits.</p><ul><li>Unix provides file utilities callable from the shell as user-level programs, for example mkdir,<br>ln, and rm. This design allows anyone to extend the command-line interface by adding new user-<br>level programs. In hindsight this plan seems obvious, but other systems designed at the time of<br>Unix often built such commands into the shell (and built the shell into the kernel).<br>One exception is cd, which is built into the shell (user&#x2F;sh.c:161). cd must change the current<br>working directory of the shell itself. If cd were run as a regular command, then the shell would<br>18fork a child process, the child process would run cd, and cd would change the child ’s working<br>directory. The parent’s (i.e., the shell’s) working directory would not change.</li></ul><h3 id="1-5-Real-world"><a href="#1-5-Real-world" class="headerlink" title="1.5 Real world"></a>1.5 Real world</h3><ul><li>the shell was the <strong>first so-called “scripting language.”</strong> The Unix system call interface persists today in<br>systems like BSD, Linux, and macOS.</li><li>The Unix system call interface has been standardized through the Portable Operating System<br>Interface (POSIX) standard. Xv6 is not POSIX compliant: it is missing many system calls (in-<br>cluding basic ones such as lseek), and many of the system calls it does provide differ from the<br>standard. Our main goals for xv6 are simplicity and clarity while providing a simple UNIX-like<br>system-call interface. Several people have extended xv6 with a few more system calls and a sim-<br>ple C library in order to run basic Unix programs. Modern kernels, however, provide many more<br>system calls, and many more kinds of kernel services, than xv6. For example, they support net-<br>working, windowing systems, user-level threads, drivers for many devices, and so on. Modern<br>kernels evolve continuously and rapidly, and offer many features beyond POSIX.</li><li>Xv6 does not provide a notion of users or of protecting one user from another; in Unix terms,<br>all xv6 processes run as root.</li></ul><h3 id="comments："><a href="#comments：" class="headerlink" title="comments："></a>comments：</h3><ul><li>Linux tries to adhere to POSIX (glibc provides most of the POSIX interfaces), but has its own extensions (e.g., epoll).</li><li>Programmers who write POSIX interfaces can compile and run them on macOS, BSD, and Linux (as long as they don’t use platform-specific extensions).</li><li>Think of the xv6 system call interface as a “subset implementation of POSIX.”</li><li></li></ul><p><a href="https://pubs.opengroup.org/onlinepubs/9699919799/"><strong>POSIX文档</strong></a></p>]]></content:encoded>
      
      
      
      <category domain="https://GoKo-Son626.github.io/tags/xv6-riscv/">xv6-riscv</category>
      
      
      <comments>https://goko-son626.github.io/post/xv6-riscv-ch1/xv6-riscv-ch1.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>xv6-riscv_struct</title>
      <link>https://goko-son626.github.io/post/xv6-riscv-struct.html</link>
      <guid>https://goko-son626.github.io/post/xv6-riscv-struct.html</guid>
      <pubDate>Sun, 04 May 2025 16:17:48 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs zsh">.<br>├── kernel<br>│   ├── bio.c<br>│   ├── buf.h<br>│   ├── console.c<br>│   ├── defs.h<br>│   ├── elf.h<br>│   ├── entry.S<br>│   ├── exec.c<br>│   ├── fcntl.h<br>│   ├── file.c<br>│   ├── file.h<br>│   ├── fs.c<br>│   ├── fs.h<br>│   ├── kalloc.c<br>│   ├── kernel.ld<br>│   ├── kernelvec.S<br>│   ├── log.c<br>│   ├── main.c<br>│   ├── memlayout.h<br>│   ├── param.h<br>│   ├── pipe.c<br>│   ├── plic.c<br>│   ├── printf.c<br>│   ├── proc.c<br>│   ├── proc.h<br>│   ├── riscv.h<br>│   ├── sleeplock.c<br>│   ├── sleeplock.h<br>│   ├── spinlock.c<br>│   ├── spinlock.h<br>│   ├── start.c<br>│   ├── stat.h<br>│   ├── string.c<br>│   ├── swtch.S<br>│   ├── syscall.c<br>│   ├── syscall.h<br>│   ├── sysfile.c<br>│   ├── sysproc.c<br>│   ├── trampoline.S<br>│   ├── trap.c<br>│   ├── types.h<br>│   ├── uart.c<br>│   ├── virtio_disk.c<br>│   ├── virtio.h<br>│   └── vm.c<br>├── LICENSE<br>├── Makefile<br>├── mkfs<br>│   └── mkfs.c<br>├── README<br>└── user<br>    ├── cat.c<br>    ├── echo.c<br>    ├── forktest.c<br>    ├── grep.c<br>    ├── grind.c<br>    ├── init.c<br>    ├── initcode.S<br>    ├── kill.c<br>    ├── ln.c<br>    ├── ls.c<br>    ├── mkdir.c<br>    ├── printf.c<br>    ├── rm.c<br>    ├── sh.c<br>    ├── stressfs.c<br>    ├── ulib.c<br>    ├── umalloc.c<br>    ├── user.h<br>    ├── user.ld<br>    ├── usertests.c<br>    ├── usys.pl<br>    ├── wc.c<br>    └── zombie.c<br></code></pre></td></tr></table></figure><h2 id="逐文件详细解读它们的作用、重要性："><a href="#逐文件详细解读它们的作用、重要性：" class="headerlink" title="逐文件详细解读它们的作用、重要性："></a>逐文件详细解读它们的作用、重要性：</h2><hr><h3 id="🧠-整体结构"><a href="#🧠-整体结构" class="headerlink" title="🧠 整体结构"></a>🧠 整体结构</h3><table><thead><tr><th>目录&#x2F;文件</th><th>作用</th><th>建议重点关注</th></tr></thead><tbody><tr><td><code>kernel/</code></td><td>xv6 核心实现，内核源码</td><td>✅ 必看</td></tr><tr><td><code>user/</code></td><td>用户态程序、测试程序、库</td><td>✅ 推荐</td></tr><tr><td><code>mkfs/</code></td><td>构建文件系统镜像工具</td><td>❗可选</td></tr><tr><td>顶层构建文件</td><td><code>Makefile</code>, <code>README</code>, <code>LICENSE</code> 等</td><td>🧩 熟悉结构用</td></tr></tbody></table><hr><h2 id="📁-kernel-—-xv6-的心脏（重点模块）"><a href="#📁-kernel-—-xv6-的心脏（重点模块）" class="headerlink" title="📁 kernel&#x2F; — xv6 的心脏（重点模块）"></a>📁 kernel&#x2F; — xv6 的心脏（重点模块）</h2><p>xv6 主要模块可分为：</p><ul><li><strong>内核启动与内存管理</strong>：<code>entry.S</code>、<code>start.c</code>、<code>vm.c</code>、<code>kalloc.c</code></li><li><strong>中断、异常、系统调用</strong>：<code>trap.c</code>、<code>syscall.c</code>、<code>kernelvec.S</code>、<code>trampoline.S</code></li><li><strong>进程调度与管理</strong>：<code>proc.c</code>、<code>swtch.S</code></li><li><strong>文件系统与文件接口</strong>：<code>fs.c</code>、<code>file.c</code>、<code>bio.c</code>、<code>log.c</code></li><li><strong>设备驱动</strong>：<code>uart.c</code>、<code>console.c</code>、<code>virtio_disk.c</code>、<code>plic.c</code></li><li><strong>内核工具代码</strong>：<code>spinlock.c</code>、<code>sleeplock.c</code>、<code>printf.c</code>、<code>string.c</code></li></ul><hr><h3 id="🧾-文件级详细解释（按子系统分类）"><a href="#🧾-文件级详细解释（按子系统分类）" class="headerlink" title="🧾 文件级详细解释（按子系统分类）"></a>🧾 文件级详细解释（按子系统分类）</h3><hr><h5 id="🟩-一、内核启动与内存管理"><a href="#🟩-一、内核启动与内存管理" class="headerlink" title="🟩 一、内核启动与内存管理"></a>🟩 一、内核启动与内存管理</h5><table><thead><tr><th>文件</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>entry.S</code></td><td>核心启动汇编入口</td><td>设置页表、跳转到 <code>start()</code></td></tr><tr><td><code>start.c</code></td><td>C 语言入口</td><td><code>main()</code> 前做环境初始化（页表、trapframe）</td></tr><tr><td><code>main.c</code></td><td>内核主函数</td><td>启动内核模块，如 <code>userinit()</code></td></tr><tr><td><code>kernel.ld</code></td><td>内核链接脚本</td><td>指定内核段地址、符号导出顺序</td></tr><tr><td><code>vm.c</code></td><td>虚拟内存系统</td><td>页表分配、拷贝、映射（基于 Sv39）</td></tr><tr><td><code>kalloc.c</code></td><td>物理页分配器</td><td>管理空闲页链表，用于 <code>allocuvm</code></td></tr><tr><td><code>memlayout.h</code></td><td>内存布局宏</td><td>定义 KERNBASE、PHYSTOP 等常量</td></tr></tbody></table><p>📌 建议从 <code>entry.S → start.c → main.c → userinit()</code> 跑一遍流程。</p><hr><h5 id="🟦-二、进程管理与调度"><a href="#🟦-二、进程管理与调度" class="headerlink" title="🟦 二、进程管理与调度"></a>🟦 二、进程管理与调度</h5><table><thead><tr><th>文件</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>proc.c</code></td><td>管理进程表、fork&#x2F;wait</td><td><code>scheduler()</code> 是调度器核心</td></tr><tr><td><code>proc.h</code></td><td>进程结构体定义</td><td>结构体 <code>struct proc</code> 包含页表、状态、trapframe</td></tr><tr><td><code>swtch.S</code></td><td>上下文切换汇编</td><td>保存&#x2F;恢复寄存器，调度必用</td></tr><tr><td><code>trap.c</code></td><td>trap&#x2F;中断入口</td><td>用户 → 内核的总入口；异常调度、syscall 都走它</td></tr><tr><td><code>sysproc.c</code></td><td>与进程相关的系统调用</td><td><code>sys_exit</code>、<code>sys_fork</code>、<code>sys_wait</code></td></tr></tbody></table><p>📌 强烈建议：给 <code>fork()</code>、<code>scheduler()</code>、<code>yield()</code> 加打印观察运行。</p><hr><h5 id="🟨-三、系统调用机制"><a href="#🟨-三、系统调用机制" class="headerlink" title="🟨 三、系统调用机制"></a>🟨 三、系统调用机制</h5><table><thead><tr><th>文件</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>syscall.c</code></td><td>syscall 分发器</td><td>根据 syscall num 分发到 <code>sys_*</code></td></tr><tr><td><code>syscall.h</code></td><td>syscall 编号</td><td>用 <code>#define SYS_write 1</code> 等映射</td></tr><tr><td><code>sysfile.c</code></td><td>文件相关 syscall</td><td><code>open/close/read/write</code> 的内核实现</td></tr><tr><td><code>usys.pl</code> → <code>usys.S</code></td><td>用户态 syscall 包装</td><td>生成用户代码 <code>mov a7, id; ecall</code></td></tr></tbody></table><p>📌 syscall 流程 &#x3D; 用户态 <code>ecall</code> → trap → syscall.c → sys_*()</p><hr><h5 id="🟧-四、文件系统与-I-O-接口"><a href="#🟧-四、文件系统与-I-O-接口" class="headerlink" title="🟧 四、文件系统与 I&#x2F;O 接口"></a>🟧 四、文件系统与 I&#x2F;O 接口</h5><table><thead><tr><th>文件</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>fs.c</code></td><td>inode 层</td><td><code>ialloc</code>, <code>readi</code>, <code>writei</code>，文件核心结构</td></tr><tr><td><code>fs.h</code></td><td>inode 定义</td><td><code>struct inode</code>，块地址信息等</td></tr><tr><td><code>file.c</code></td><td>文件描述符层</td><td><code>struct file</code>，管理 open&#x2F;close 等</td></tr><tr><td><code>file.h</code></td><td>文件描述符定义</td><td>支持 pipe&#x2F;dev&#x2F;inode 等类型</td></tr><tr><td><code>bio.c</code></td><td>缓存块读写</td><td>实现 block 级读写缓存</td></tr><tr><td><code>log.c</code></td><td>日志机制</td><td>crash-safe 写操作事务（write-ahead logging）</td></tr><tr><td><code>pipe.c</code></td><td>管道实现</td><td>内存中双向 FIFO</td></tr><tr><td><code>fcntl.h</code>, <code>stat.h</code></td><td>POSIX 相关头文件</td><td>用于 <code>open</code> flag、<code>stat</code> 结构体</td></tr></tbody></table><p>📌 建议调试 <code>fs.c</code> 的 <code>namei()</code>、<code>dirlookup()</code>，看路径如何被解析。</p><hr><h5 id="🟥-五、设备驱动与中断控制"><a href="#🟥-五、设备驱动与中断控制" class="headerlink" title="🟥 五、设备驱动与中断控制"></a>🟥 五、设备驱动与中断控制</h5><table><thead><tr><th>文件</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>uart.c</code></td><td>串口驱动</td><td>初始化串口，写入字符给终端</td></tr><tr><td><code>console.c</code></td><td>控制台 I&#x2F;O</td><td>与 UART 配合实现 shell 输入输出</td></tr><tr><td><code>plic.c</code></td><td>中断控制器</td><td>Platform-Level Interrupt Controller</td></tr><tr><td><code>virtio_disk.c</code></td><td>虚拟磁盘驱动</td><td>QEMU 虚拟磁盘硬件访问层</td></tr><tr><td><code>virtio.h</code></td><td>virtio 设备定义</td><td>配套数据结构</td></tr></tbody></table><p>📌 <code>virtio_disk.c</code> 调试方法：观察 <code>virtio_rw()</code> 实现的读写逻辑。</p><hr><h5 id="🟫-六、工具类-内核库函数"><a href="#🟫-六、工具类-内核库函数" class="headerlink" title="🟫 六、工具类 &#x2F; 内核库函数"></a>🟫 六、工具类 &#x2F; 内核库函数</h5><table><thead><tr><th>文件</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>defs.h</code></td><td>内核函数声明</td><td><code>extern</code> 所有模块函数，供全局使用</td></tr><tr><td><code>riscv.h</code></td><td>RISC-V CSR 宏、寄存器定义</td><td>包含 <code>rdtime</code>, <code>csrr</code>, <code>sstatus</code> 等</td></tr><tr><td><code>spinlock.c/.h</code></td><td>自旋锁实现</td><td>核心互斥机制，需关中断</td></tr><tr><td><code>sleeplock.c/.h</code></td><td>睡眠锁实现</td><td>用于文件系统，sleep&#x2F;wakeup 管理</td></tr><tr><td><code>string.c</code></td><td>libc 实现</td><td><code>memcpy</code>, <code>strlen</code> 等内核自带函数</td></tr><tr><td><code>printf.c</code></td><td>内核级 printf</td><td>用于调试打印，无缓冲版</td></tr><tr><td><code>param.h</code></td><td>系统参数宏</td><td>定义 <code>NPROC</code>, <code>MAXPATH</code> 等全局参数</td></tr><tr><td><code>types.h</code></td><td>常用类型定义</td><td><code>uchar</code>, <code>uint</code>, <code>sint</code> 等简写</td></tr></tbody></table><p>📌 常用 grep 命令：<code>grep -rn &quot;spin_lock&quot; kernel/</code> 追踪并发点</p><hr><h3 id="📁-user-—-用户态程序与测试"><a href="#📁-user-—-用户态程序与测试" class="headerlink" title="📁 user&#x2F; — 用户态程序与测试"></a>📁 user&#x2F; — 用户态程序与测试</h3><table><thead><tr><th>文件</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>*.c</code></td><td>命令程序</td><td>shell 命令如 <code>ls</code>, <code>cat</code>, <code>echo</code>, <code>sh</code> 等</td></tr><tr><td><code>init.c</code></td><td>首个用户进程</td><td><code>userinit()</code> 启动的程序，运行 <code>/init</code></td></tr><tr><td><code>initcode.S</code></td><td>最原始的用户态代码</td><td>由 <code>userinit()</code> 载入的程序（汇编）</td></tr><tr><td><code>ulib.c</code></td><td>libc 函数</td><td>用户态的 <code>malloc</code>, <code>printf</code> 等</td></tr><tr><td><code>umalloc.c</code></td><td>malloc 实现</td><td>用户态堆分配</td></tr><tr><td><code>usertests.c</code></td><td>用户态测试集</td><td>测试 syscall、进程、文件功能</td></tr><tr><td><code>user.ld</code></td><td>用户态链接脚本</td><td>控制用户程序的段分布</td></tr><tr><td><code>user.h</code></td><td>函数声明</td><td>供用户程序引用 <code>printf</code>, <code>fork</code> 等接口</td></tr></tbody></table><p>📌 强烈推荐你从 <code>init.c</code> 开始 debug，第一个用户进程的运行关键路径！</p><hr><h3 id="📁-mkfs-—-构建文件系统镜像工具"><a href="#📁-mkfs-—-构建文件系统镜像工具" class="headerlink" title="📁 mkfs&#x2F; — 构建文件系统镜像工具"></a>📁 mkfs&#x2F; — 构建文件系统镜像工具</h3><table><thead><tr><th>文件</th><th>说明</th></tr></thead><tbody><tr><td><code>mkfs.c</code></td><td>构建 xv6 文件系统镜像（user&#x2F;init 等文件压入）</td></tr></tbody></table><p>📌 不看也无妨，用于 <code>make</code> 阶段构建 <code>fs.img</code></p><hr><h3 id="📄-顶层文件"><a href="#📄-顶层文件" class="headerlink" title="📄 顶层文件"></a>📄 顶层文件</h3><table><thead><tr><th>文件</th><th>说明</th></tr></thead><tbody><tr><td><code>Makefile</code></td><td>编译入口，构建 <code>kernel</code>, <code>fs.img</code>, <code>qemu</code> 等</td></tr><tr><td><code>README</code></td><td>简要说明文档，讲解如何使用</td></tr><tr><td><code>LICENSE</code></td><td>授权条款（MIT）</td></tr></tbody></table><hr><h3 id="✅-总结"><a href="#✅-总结" class="headerlink" title="✅ 总结"></a>✅ 总结</h3><ul><li>用 <strong>模块化思维</strong> 分阶段学，比如 “先把 trap 理清楚”，再看 syscall。</li><li>推荐搭配如下工具：<ul><li>tmux</li><li>zsh</li><li>grep…</li></ul></li></ul>]]></content:encoded>
      
      
      
      <category domain="https://GoKo-Son626.github.io/tags/xv6-riscv/">xv6-riscv</category>
      
      
      <comments>https://goko-son626.github.io/post/xv6-riscv-struct.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>xv6-riscv_PLAN</title>
      <link>https://goko-son626.github.io/post/xv6-riscv-PLAN.html</link>
      <guid>https://goko-son626.github.io/post/xv6-riscv-PLAN.html</guid>
      <pubDate>Sun, 04 May 2025 14:12:12 GMT</pubDate>
      
        
        
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;How do you learn in 12 hours?&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;from chatgpt, but I do it.&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h</description>
        
      
      
      
      <content:encoded><![CDATA[<ul><li><em><strong>How do you learn in 12 hours?</strong></em></li><li><em><strong>from chatgpt, but I do it.</strong></em></li></ul><hr><p>🕐 第 1 阶段：xv6 是怎么“活”起来的（0–2h）<br>⬛ 第0章：xv6 overview （PDF开头）<br><strong>学习目标</strong>：大致知道 xv6 有哪些模块，调用图</p><p><strong>方法</strong>：通读目录，理解它的子系统划分、进程图</p><p>⬛ 第1章：启动与用户态<br><strong>文件</strong>：<code>kernel/entry.S</code>, <code>kernel/start.c</code>, <code>kernel/main.c</code><br><strong>路径</strong>：QEMU → bootloader → 内核 → <code>main</code> → <code>userinit()</code></p><p><strong>重点理解</strong>：</p><ul><li><code>entry.S</code> 作用（设置 <code>satp</code>、<code>sp</code>、<code>mret</code>）</li><li><code>kvminit</code> &#x2F; <code>kvmmap</code> &#x2F; <code>kvminithart</code> 如何设置页表</li><li><code>userinit()</code> 如何设置第一个进程（<code>initproc</code>）</li></ul><p>✅ 建议操作：</p><ul><li>给 <code>start.c</code> 和 <code>main.c</code> 打日志，观察 <code>kvminit</code>、<code>procinit</code> 调用顺序。</li></ul><hr><p>🕒 第 2 阶段：进程管理和系统调用（2–5h）<br>⬛ 第2章：进程管理（重点）<br><strong>文件</strong>：<code>kernel/proc.c</code>, <code>kernel/proc.h</code></p><p><strong>关键点</strong>：</p><ul><li><code>allocproc</code>, <code>fork</code>, <code>scheduler</code>, <code>yield</code>, <code>exit</code>, <code>wait</code></li><li>进程状态 <code>enum procstate</code> 的流转图（<code>NEW → RUNNABLE → RUNNING → ZOMBIE</code>）</li></ul><p>✅ 建议操作：</p><ul><li>用 ps 类似命令验证状态</li><li>手动修改 <code>user/test.c</code> 增加 <code>fork</code> 和 <code>wait</code></li></ul><p>⬛ 第3章：系统调用机制<br><strong>文件</strong>：<code>kernel/syscall.c</code>, <code>kernel/trap.c</code>, <code>user/usys.S</code></p><p><strong>流程</strong>：用户态 → <code>ecall</code> → <code>trap</code> → <code>syscall()</code> → <code>sys_*()</code></p><p>✅ 建议操作：</p><ul><li>打日志看 syscall number 传入路径</li><li>追踪 <code>sys_write</code> 是如何调用到 <code>filewrite</code></li></ul><hr><p>🕓 第 3 阶段：内存管理（5–7h）<br>⬛ 第4章：内存子系统<br><strong>文件</strong>：<code>kernel/vm.c</code>, <code>kernel/kalloc.c</code>, <code>kernel/defs.h</code></p><p><strong>重点函数</strong>：</p><ul><li><code>allocuvm</code>, <code>deallocuvm</code>, <code>uvmcopy</code></li><li><code>walk</code>, <code>mappages</code>，页表结构 <code>Sv39</code></li></ul><p>✅ 学习方法：</p><ul><li>画图：<code>Sv39</code> 三级页表的 index 是怎么划分的</li><li>使用 <code>make qemu-gdb</code> 中断在 <code>uvmcopy</code> 看页表</li></ul><hr><p>🕔 第 4 阶段：I&#x2F;O + 文件系统（7–9h）<br>⬛ 第5章：文件系统<br><strong>文件</strong>：<code>fs.c</code>, <code>file.c</code>, <code>bio.c</code>, <code>log.c</code></p><p><strong>关键理解</strong>：</p><ul><li>inode、目录项、open&#x2F;file 结构体</li><li><code>file-&gt;ip-&gt;dev-&gt;read()</code> 等层级调用</li></ul><p>✅ 操作建议：</p><ul><li>手动创建小文件，查看 inode 分配</li><li>给 <code>fs.c</code> 中的 <code>readi</code> &#x2F; <code>writei</code> 加日志</li></ul><p>⬛ 第6章：设备驱动<br><strong>文件</strong>：<code>uart.c</code>, <code>console.c</code>, <code>virtio_disk.c</code></p><p><strong>理解</strong>：</p><ul><li>UART 输出和中断机制</li><li><code>virtio</code> 如何模拟硬盘读写</li></ul><p>✅ 小测试：</p><ul><li>改写 <code>consoleintr()</code> 中的字符判断，屏蔽输入 <code>&#39;a&#39;</code> 试试</li></ul><hr><p>🕖 第 5 阶段：调试 + 回顾（9–12h）</p><ul><li>使用 <code>make qemu-gdb</code>，用 gdb 打断点看启动流程、trap 过程</li><li>使用 <code>grep</code> + <code>cscope</code> 学会快速定位函数定义</li><li>整理 syscall 流程、trap 流程图</li><li>复现 lab 中的练习题（如添加系统调用）</li></ul><hr>]]></content:encoded>
      
      
      
      <category domain="https://GoKo-Son626.github.io/tags/xv6-riscv/">xv6-riscv</category>
      
      
      <comments>https://goko-son626.github.io/post/xv6-riscv-PLAN.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo博客搭建</title>
      <link>https://goko-son626.github.io/post/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html</link>
      <guid>https://goko-son626.github.io/post/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html</guid>
      <pubDate>Thu, 01 May 2025 05:25:09 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;1-安装并初始化Hexo&quot;&gt;&lt;a href=&quot;#1-安装并初始化Hexo&quot; class=&quot;headerlink&quot; title=&quot;1. 安装并初始化Hexo&quot;&gt;&lt;/a&gt;1. 安装并初始化Hexo&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;安装 Hexo CLI&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="1-安装并初始化Hexo"><a href="#1-安装并初始化Hexo" class="headerlink" title="1. 安装并初始化Hexo"></a>1. 安装并初始化Hexo</h3><ul><li><ol><li>安装 Hexo CLI</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><ul><li><ol start="2"><li>初始化博客项目目录</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mkdir my-blog &amp;&amp; cd my-blog<br>hexo init<br>npm install<br></code></pre></td></tr></table></figure><ul><li><ol start="3"><li>本地预览</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo server<br></code></pre></td></tr></table></figure><ul><li>启动本地服务：在浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 查看效果</li></ul><h3 id="2-配置-GitHub-Pages-部署"><a href="#2-配置-GitHub-Pages-部署" class="headerlink" title="2.  配置 GitHub Pages 部署"></a>2.  配置 GitHub Pages 部署</h3><ul><li><ol><li>创建GitHub仓库</li></ol><ul><li>创建一个仓库，名字叫 你的GitHub用户名.github.io</li><li>比如你是 goko，就叫 goko.github.io</li></ul></li><li><ol start="2"><li>安装部署插件</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><ul><li><ol start="3"><li>修改 _config.yml（根目录下）添加部署配置：</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">deploy:<br>  type: git<br>  # repo建议使用SSH, SSH免密<br>  repo: https://github.com/你的GitHub用户名/你的GitHub用户名.github.io.git<br>  branch: main  # 或者 master，看你的默认分支<br></code></pre></td></tr></table></figure><ul><li><ol start="4"><li>生成并部署博客</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></td></tr></table></figure><h3 id="3-域名-com-绑定"><a href="#3-域名-com-绑定" class="headerlink" title="3. 域名(.com)绑定"></a>3. 域名(<xxxx>.com)绑定</h3><ul><li><ol><li>添加域名(在my-blog下)</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo &quot;&lt;xxxx&gt;.com&quot; &gt; source/CNAME<br># 或者可以：echo &quot;www.&lt;xxxx&gt;.com&quot; &gt; source/CNAME<br># 只能添加一个，而且两个需要添加不同的域名解析（如下）<br></code></pre></td></tr></table></figure><ul><li><ol start="2"><li>重新部署</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><ul><li><ol start="3"><li>设置 DNS 解析指向 GitHub Pages</li></ol></li></ul><p><strong>A. 使用裸域名（apex 域名）goku72.com</strong></p><table><thead><tr><th>记录类型</th><th>主机记录</th><th>记录值</th><th>说明</th></tr></thead><tbody><tr><td>A</td><td>@</td><td>185.199.108.153</td><td>GitHub Pages IP</td></tr><tr><td>A</td><td>@</td><td>185.199.109.153</td><td>GitHub Pages IP</td></tr><tr><td>A</td><td>@</td><td>185.199.110.153</td><td>GitHub Pages IP</td></tr><tr><td>A</td><td>@</td><td>185.199.111.153</td><td>GitHub Pages IP</td></tr></tbody></table><p>example aliyun:</p><ol><li>选择业务需求: 将网站域名解析到服务器IPv4地址</li><li>选择网站域名(主机记录): <xxxx>.com（对应设置“@”主机记录）</li><li>填写 IP（记录值）：</li></ol><ul><li>在输入框里粘贴以下四行（每一行一个 IP）：</li><li><pre><code>  &gt; 185.199.109.153  &gt; 185.199.108.153  &gt; 185.199.110.153  &gt; 185.199.111.153</code></pre></li></ul><hr><p><strong>B. 使用 <a href="http://www.goku72.com/">www.goku72.com</a> 作为主域名</strong></p><table><thead><tr><th>记录类型</th><th>主机记录</th><th>记录值</th><th>说明</th></tr></thead><tbody><tr><td>CNAME</td><td>www</td><td>&lt;github用户名&gt;.github.io.</td><td>指向你的 GitHub 用户页仓库</td></tr></tbody></table><p>example aliyun:</p><ol><li>选择业务需求: 将网站域名解析到另外的目标域名</li><li>选择网站域名(主机记录): www.<xxxx>.com（对应设置“www”主机记录）</li><li>填写 IP（记录值）：&lt;github用户名&gt;.github.io. (最有有一个符号”.”)</li></ol><h3 id="4-设置主题"><a href="#4-设置主题" class="headerlink" title="4. 设置主题"></a>4. 设置主题</h3><ul><li>cd my-blog&#x2F;themes</li><li>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> butterfly</li><li>修改_config.yml: <ul><li>theme: butterfly</li></ul></li><li>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</li></ul><p><strong>更多主题</strong>：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p><strong>注：</strong></p><ul><li>如果AB两个方式都添加了，只需要在 Hexo 项目的 source&#x2F;CNAME 文件中写 www.<xxxx>.com，GitHub Pages 就会自动把 goku72.com 重定向过去，无需额外设置！</li><li>后续换域名只需要：阿里云重新解析 + 修改 source&#x2F;CNAME + 重新部署 Hexo，就能完成域名迁移。</li><li>有些主题可能需要下载插件</li></ul>]]></content:encoded>
      
      
      
      <category domain="https://GoKo-Son626.github.io/tags/hexo/">hexo</category>
      
      
      <comments>https://goko-son626.github.io/post/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
